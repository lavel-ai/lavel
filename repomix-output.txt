This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-09T15:32:38.721Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursor/
  research/
    login-middleware-database.md
    login-middleware-plan.md
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  CODE_OF_CONDUCT.md
  copilot-instructions.md.example
  dependabot.yml
  pull_request_template.md
.specstory/
  history/
    .what-is-this.md
    debugging-clerk-authentication-middleware-issues.md
    multi-database-approach-analysis-and-testing.md
    multitenant-login-middleware-implementation-plan.md
apps/
  api/
    __tests__/
      health.test.ts
    app/
      health/
        route.ts
      webhooks/
        clerk/
          route.ts
        stripe/
          route.ts
      global-error.tsx
      layout.tsx
    .env.example
    .gitignore
    env.ts
    instrumentation.ts
    next.config.ts
    package.json
    sentry.client.config.ts
    tsconfig.json
    vercel.json
    vitest.config.ts
  app/
    __tests__/
      sign-in.test.tsx
      sign-up.test.tsx
    app/
      .well-known/
        vercel/
          flags/
            route.ts
      (authenticated)/
        components/
          avatar-stack.tsx
          collaboration-provider.tsx
          cursors.tsx
          header.tsx
          posthog-identifier.tsx
          search.tsx
          sidebar.tsx
        search/
          page.tsx
        webhooks/
          page.tsx
        layout.tsx
        page.tsx
      (unauthenticated)/
        sign-in/
          [[...sign-in]]/
            page.tsx
        sign-up/
          [[...sign-up]]/
            page.tsx
        layout.tsx
      actions/
        users/
          get.ts
          search.ts
      api/
        collaboration/
          auth/
            route.ts
      components/
        ClerkContextTest.tsx
      middleware/
        tenant-middleware.ts
      utils/
        tenant-db.ts
      global-error.tsx
      layout.tsx
    .env.example
    .gitignore
    env.ts
    instrumentation.ts
    liveblocks.config.ts
    middleware.ts
    next.config.ts
    package.json
    postcss.config.mjs
    sentry.client.config.ts
    tailwind.config.ts
    tsconfig.json
    vitest.config.ts
  docs/
    api-reference/
      endpoint/
        create.mdx
        delete.mdx
        get.mdx
      introduction.mdx
      openapi.json
    authentication/
      log-in.mdx
    essentials/
      code.mdx
      images.mdx
      markdown.mdx
      navigation.mdx
      reusable-snippets.mdx
      settings.mdx
    images/
      hero-dark.svg
      hero-light.svg
    logo/
      dark.svg
      light.svg
    snippets/
      snippet-intro.mdx
    development.mdx
    favicon.svg
    introduction.mdx
    mint.json
    package.json
    quickstart.mdx
  email/
    emails/
      contact.tsx
    .gitignore
    package.json
    tsconfig.json
  storybook/
    .storybook/
      main.ts
      preview-head.html
      preview.tsx
    stories/
      accordion.stories.tsx
      alert-dialog.stories.tsx
      alert.stories.tsx
      aspect-ratio.stories.tsx
      avatar.stories.tsx
      badge.stories.tsx
      breadcrumb.stories.tsx
      button.stories.tsx
      calendar.stories.tsx
      card.stories.tsx
      carousel.stories.tsx
      chart.stories.tsx
      checkbox.stories.tsx
      collapsible.stories.tsx
      command.stories.tsx
      context-menu.stories.tsx
      dialog.stories.tsx
      drawer.stories.tsx
      dropdown-menu.stories.tsx
      form.stories.tsx
      hover-card.stories.tsx
      input-otp.stories.tsx
      input.stories.tsx
      label.stories.tsx
      menubar.stories.tsx
      navigation-menu.stories.tsx
      pagination.stories.tsx
      popover.stories.tsx
      progress.stories.tsx
      radio-group.stories.tsx
      resizable.stories.tsx
      scroll-area.stories.tsx
      select.stories.tsx
      separator.stories.tsx
      sheet.stories.tsx
      sidebar.stories.tsx
      skeleton.stories.tsx
      slider.stories.tsx
      sonner.stories.tsx
      switch.stories.tsx
      table.stories.tsx
      tabs.stories.tsx
      textarea.stories.tsx
      toast.stories.tsx
      toggle-group.stories.tsx
      toggle.stories.tsx
      tooltip.stories.tsx
    .gitignore
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tailwind.config.ts
    tsconfig.json
  web/
    .well-known/
      vercel/
        flags/
          route.ts
    app/
      (home)/
        components/
          cases.tsx
          cta.tsx
          faq.tsx
          features.tsx
          hero.tsx
          stats.tsx
          tenant-display.tsx
          tenant-info.tsx
          testimonials.tsx
        tenant/
          page.tsx
        page.tsx
      [subdomain]/
        page.tsx
      blog/
        [slug]/
          page.tsx
        page.tsx
      components/
        header/
          index.tsx
          logo.svg
        footer.tsx
      contact/
        actions/
          contact.tsx
        components/
          contact-form.tsx
        page.tsx
      legal/
        [slug]/
          page.tsx
        layout.tsx
      pricing/
        page.tsx
      styles/
        web.css
      global-error.tsx
      layout.tsx
      robots.ts
      sitemap.ts
    components/
      sidebar.tsx
    .env.example
    .gitignore
    env.ts
    instrumentation.ts
    middleware.ts
    next.config.ts
    package.json
    postcss.config.mjs
    tailwind.config.ts
    tsconfig.json
    vercel.json
packages/
  ai/
    components/
      message.tsx
      thread.tsx
    lib/
      models.ts
      react.ts
    index.ts
    keys.ts
    package.json
    tsconfig.json
  analytics/
    posthog/
      client.tsx
      server.ts
    google.ts
    index.tsx
    keys.ts
    package.json
    tsconfig.json
    vercel.ts
  auth/
    components/
      sign-in.tsx
      sign-up.tsx
    client.ts
    keys.ts
    middleware.ts
    package.json
    provider.tsx
    server.ts
    tsconfig.json
  cms/
    components/
      body.tsx
      code-block.tsx
      feed.tsx
      image.tsx
      toc.tsx
      toolbar.tsx
    .env.example
    index.ts
    keys.ts
    next-config.ts
    package.json
    tsconfig.json
    typescript-config.json
  collaboration/
    auth.ts
    config.ts
    hooks.ts
    keys.ts
    package.json
    room.tsx
    tsconfig.json
  database/
    __tests__/
      tenant-lookup.test.ts
    neon/
      src/
        client.ts
    src/
      main-app/
        .drizzle/
          meta/
            _journal.json
            0000_snapshot.json
          0000_easy_namora.sql
        hooks/
          index.ts
          use-users.ts
        queries/
          index.ts
          organization-queries.ts
          organizations.ts
          projects.ts
          users-queries.ts
          users.ts
        schema/
          index.ts
          organizations-members-schema.ts
          organizations-schema.ts
          projects-schema.ts
          users-schema.ts
        db.ts
        drizzle.config.ts
        index.ts
      tenant-app/
        __tests__/
          tenant-lookup.test.ts
        queries/
          tenant-lookup.ts
        schema/
          index.ts
          users-schema.ts
        utils/
          tenant-db.ts
        drizzle.config.ts
        provider.tsx
        tenant-connection-db.ts
        types.ts
      types/
        index.ts
    .gitignore
    keys.ts
    package.json
    tsconfig.json
    vitest.config.ts
  design-system/
    components/
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        sonner.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
        use-toast.ts
      mode-toggle.tsx
    hooks/
      use-mobile.tsx
      use-toast.ts
    lib/
      fonts.ts
      utils.ts
    providers/
      theme.tsx
    styles/
      globals.css
    components.json
    index.tsx
    package.json
    postcss.config.mjs
    tsconfig.json
  email/
    templates/
      contact.tsx
    index.ts
    keys.ts
    package.json
    tsconfig.json
  feature-flags/
    components/
      toolbar.tsx
    lib/
      create-flag.ts
      toolbar.ts
    access.ts
    index.ts
    keys.ts
    package.json
    tsconfig.json
  next-config/
    index.ts
    keys.ts
    package.json
    tsconfig.json
  notifications/
    components/
      provider.tsx
      trigger.tsx
    index.ts
    keys.ts
    package.json
    styles.css
    tsconfig.json
  observability/
    status/
      index.tsx
      types.ts
    client.ts
    error.ts
    instrumentation.ts
    keys.ts
    log.ts
    next-config.ts
    package.json
    tsconfig.json
  payments/
    ai.ts
    index.ts
    keys.ts
    package.json
    tsconfig.json
  rate-limit/
    index.ts
    keys.ts
    package.json
  security/
    index.ts
    keys.ts
    middleware.ts
    package.json
    tsconfig.json
  seo/
    json-ld.tsx
    metadata.ts
    package.json
    tsconfig.json
  storage/
    client.ts
    index.ts
    keys.ts
    package.json
    tsconfig.json
  tailwind-config/
    config.ts
    index.ts
    package.json
    tsconfig.json
    typography.config.ts
  testing/
    index.js
    package.json
    tsconfig.json
  typescript-config/
    base.json
    nextjs.json
    package.json
    react-library.json
  webhooks/
    lib/
      svix.ts
    index.ts
    keys.ts
    package.json
    tsconfig.json
scripts/
  index.ts
  initialize.ts
  update.ts
  utils.ts
turbo/
  generators/
    templates/
      package.json.hbs
      tsconfig.json.hbs
    config.ts
    package.json
.cursorrules.example
.gitignore
biome.json
next-env.d.ts
package.json
pnpm-workspace.yaml
README.md
tsconfig.json
tsup.config.ts
turbo.json

================================================================
Files
================================================================

================
File: .cursor/research/login-middleware-database.md
================
## System Architecture Description: Simplified Multi-Tenant Application

This architecture outlines a multi-tenant SaaS application built with Next.js, leveraging subdomains for tenant separation and separate Neon databases for each tenant organization. The focus is on a streamlined user login experience starting from the main domain (lavel.ai) with immediate redirection to the user's default tenant workspace.

Components:

    User Browser: The client-side interface used by users to interact with the application (e.g., Chrome, Firefox, Safari).

    DNS Lookup: The Domain Name System (DNS) resolves domain names (like tenant-a.lavel.ai or lavel.ai) to the IP address of the application server hosted on Vercel. A wildcard CNAME record is configured in DNS for *.lavel.ai pointing to the main application domain (lavel.ai), ensuring all subdomain requests are routed to the same application server.

    Vercel Edge Network:  Vercel's global edge network and serverless functions host and serve the Next.js application.

    Load Balancer/Reverse Proxy:  (Implicit in Vercel) Vercel infrastructure includes load balancing and reverse proxy functionality to distribute incoming requests to application server instances.

    Tenant Middleware (apps/app/middleware.ts):
        Purpose: Identifies the tenant organization based on the incoming request's hostname (subdomain) and sets up the tenant-specific database connection within the request context.
        Logic:
            Receives each incoming request.
            Checks the Host header to determine if it's a root domain request (lavel.ai) or a subdomain request (tenant-a.lavel.ai).
            For Subdomain Requests: Extracts the subdomain, uses the getTenantConnectionUrl utility (leveraging caching and @repo/db queries) to fetch the Neon database connection URL for the tenant from the Main Application Database. Establishes a Drizzle ORM client connected to the tenant's database and stores it in the Next.js Request Context (req.dbClient).
            For Root Domain Requests: Bypasses tenant-specific logic and allows the request to proceed to authentication checks.
        Data Source: Interacts with the Main Application Database to retrieve tenant and project information.

    Authentication Flow (apps/app/app/(authenticated)/layout.tsx & @repo/auth):
        Purpose: Handles user authentication and initial redirection after login.
        Logic:
            AppLayout (for authenticated routes) uses @repo/auth's currentUser() to check if a user is logged in.
            If not logged in, redirects to Clerk's sign-in page.
            After Login (on Main Domain): If the user logs in via the main domain (lavel.ai), AppLayout then fetches the user's default organization (using fetchDefaultOrganizationForUser query from @repo/db). It then immediately redirects the user to the subdomain URL of their default organization (e.g., tenant-a.lavel.ai/dashboard).
            On Subdomain: If the user directly accesses a subdomain URL (or is redirected to a subdomain after login), AppLayout proceeds to render the authenticated application layout.

    Auth Middleware (@repo/auth/middleware):
        Purpose: Enforces authentication for protected routes using Clerk.
        Execution: Runs after Tenant Middleware.
        Logic: Standard Clerk authentication middleware to verify user sessions.

    Security Headers Middleware (@repo/security/middleware):
        Purpose: Sets HTTP security headers for enhanced security (using Nosecone).
        Execution: Runs after Auth Middleware.
        Logic: Applies predefined security headers to all responses.

    Application Route Handlers (apps/app/app/api, apps/app/app/(authenticated)):
        Purpose: Handle specific application logic for different routes (API endpoints, UI pages, server actions).
        Data Access: Access tenant-specific databases using the getTenantDbClient(req) helper function (from apps/app/utils/tenant-db.ts), which retrieves the tenant database client from the Request Context set up by Tenant Middleware.

    Tenant Database (Neon - per tenant):
        Purpose: Separate Neon PostgreSQL databases, one for each tenant organization.
        Data Isolation: Ensures complete data isolation between tenants.
        Scalability: Allows for independent scaling and resource management for each tenant database.

    Main Application Database (Neon):
        Purpose: A central Neon PostgreSQL database that stores application-level data, including:
            organizations table: Stores organization metadata (name, slug, subdomainSlug, etc.) and, importantly, the connection URLs for each tenant database (in the projects table, linked to organizations).
            users (or potentially Clerk user IDs linked to internal user records for role management across tenants if needed): User accounts and potentially relationships between users and organizations (e.g., organizationMembers table).
        Management: This database is managed by the platform provider and accessed by the Tenant Middleware and potentially other backend services for global application management.

    Code Packages (@repo/db, @repo/auth, @repo/security, apps/app):
        @repo/db Package: Encapsulates all database-related logic:
            Drizzle ORM schema definitions (schema).
            Database connection setup for the Main Application Database (db).
            Query functions in src/queries (e.g., organizationQueries.getConnectionUrlForSubdomain, organizationQueries.fetchDefaultOrganizationForUser).
        @repo/auth Package: Contains authentication logic, likely built using Clerk SDKs (e.g., authMiddleware, currentUser, redirectToSignIn).
        @repo/security Package: Provides security-related middleware and utilities (e.g., noseconeMiddleware).
        apps/app: The Next.js application itself:
            middleware.ts: Contains the Tenant Middleware, and wraps Auth Middleware and Security Headers Middleware.
            utils/tenant-db.ts: Utility functions for tenant database connection management and caching.
            app directory: Contains route handlers, pages, layouts, and components for the application UI and API endpoints.

User Login Workflow:

    User visits lavel.ai.
    Clicks "Login".
    Is redirected to Clerk's sign-in page on the main domain.
    Logs in successfully via Clerk.
    AppLayout on lavel.ai runs after login.
    AppLayout fetches the user's default organization and its subdomainSlug.
    AppLayout redirects the user to https://<subdomainSlug>.lavel.ai/dashboard.
    On subdomain, Tenant Middleware sets up the tenant database connection.
    User accesses the application within their tenant workspace.

Organization Switching (Optional - via Org Switcher Component):

    Users can use an "Organization Switcher" component within the application UI (e.g., in the sidebar).
    The switcher fetches the list of organizations the user belongs to.
    When a user selects an organization, the switcher navigates them to the corresponding subdomain URL.

## Revised System Flow: Multi-Tenant Login Implementation

### Current System Components:
1. Clerk Authentication (`@repo/auth/middleware.ts`):
   - Simple wrapper around Clerk's middleware
   - Handles session verification

2. Security Headers (`@repo/security/middleware.ts`):
   - Nosecone middleware for security headers
   - Applied after auth checks

3. App Layout Chain:
   - Root Layout (`apps/app/app/layout.tsx`): 
     - Wraps everything in DesignSystemProvider
   - Design System Provider (`packages/design-system/index.tsx`):
     - Wraps app in AuthProvider, AnalyticsProvider
   - Auth Provider (`packages/auth/provider.tsx`):
     - Configures Clerk UI/theming
   - Authenticated Layout (`apps/app/app/(authenticated)/layout.tsx`):
     - Handles authenticated routes
     - Currently just checks if user is logged in

### Revised Authentication & Tenant Flow:

1. **Initial Auth (Main Domain - lavel.ai)**
   - User visits protected route
   - Clerk middleware redirects to login
   - User logs in via Clerk UI
   - Clerk creates session & redirects back

2. **Tenant Middleware (Before Clerk Auth)**
   ```typescript
   // 1. Check if request is for main domain or subdomain
   // 2. If subdomain:
   //    - Extract tenant slug
   //    - Query connection URL from main DB
   //    - Set up tenant DB connection
   // 3. If main domain:
   //    - Let request continue to Clerk auth
   ```

3. **Auth Middleware (After Tenant Check)**
   ```typescript
   // 1. Verify Clerk session
   // 2. If valid:
   //    - Add user object to request
   //    - Continue to route
   // 3. If invalid:
   //    - Redirect to login
   ```

4. **Post-Login Organization Check**
   ```typescript
   // In authenticated layout:
   // 1. Get user from Clerk
   // 2. Query main DB for user's organizations
   // 3. If has organization:
   //    - Redirect to tenant subdomain
   // 4. If no organization:
   //    - Redirect to onboarding
   ```

### Implementation Order:

1. **Step 1: Organization Query**
   - We already have `fetchDefaultOrganizationForUser` in `organization-queries.ts`
   - Returns organization with subdomain slug

2. **Step 2: Tenant Middleware**
   - New middleware to run before Clerk auth
   - Handles subdomain detection & DB setup
   - Uses `getTenantConnectionUrl` from `tenant-lookup.ts`

3. **Step 3: Middleware Chain**
   - Modify `apps/app/middleware.ts` to:
     ```typescript
     export default chain([
       tenantMiddleware,
       authMiddleware,
       securityHeaders
     ]);
     ```

4. **Step 4: Post-Login Redirect**
   - Modify authenticated layout to:
     - Check if on main domain
     - Query user's organization
     - Redirect to subdomain

### Key Differences from Original Plan:

1. **Middleware Order**
   - Tenant middleware must run first
   - Then auth middleware
   - Finally security headers

2. **Database Access**
   - Main DB queries happen in authenticated layout
   - Tenant DB connection happens in middleware

3. **Session Flow**
   - Keep Clerk's session management
   - Add tenant context to request
   - Use both for route protection

### Security Considerations:

1. **Subdomain Access**
   - Must verify user has access to tenant
   - Check organization membership

2. **Database Connections**
   - Cache connection strings
   - Handle connection errors
   - Proper cleanup

3. **Redirects**
   - Validate subdomain before redirect
   - Handle invalid/missing organizations

This revised flow better integrates with our existing Clerk authentication while adding the tenant-specific functionality we need.

================
File: .cursor/research/login-middleware-plan.md
================
## Implementation Plan: Multi-Tenant Login Middleware

This plan outlines the steps to implement a multi-tenant login middleware for a Next.js application, as described in `login-middleware-database.md`.

**Goal**: Implement middleware to identify tenants based on subdomains, establish tenant-specific database connections, and manage user redirection after login.

**Components to Modify:**

-   `apps/app/middleware.ts`: Implement Tenant Middleware and integrate with existing middleware.
-   `@repo/database/src/tenant-app/tenant-db.ts`: Implement `getTenantConnectionUrl` utility function.
-   `@repo/database/src/main-app/queries/organization-queries.ts`: Implement `fetchDefaultOrganizationForUser` query.
-   `apps/app/app/(authenticated)/layout.tsx`: Modify authentication layout for redirection logic.
-   `apps/app/utils/tenant-db.ts`: Create utility file to access tenant DB client from request context.
-   Potentially: `@repo/database/package.json`, `@repo/database/keys.ts`, `@repo/database/index.ts` (if adjustments are needed for tenant DB setup).

**Step-by-Step Plan:**

**Step 1: Set up Tenant Database Connection Utility (`@repo/database/src/tenant-app/tenant-lookup.ts`)**

    *   **Implement `getTenantConnectionUrl(subdomain: string)` function:**
        *   This function will take the subdomain as input.
        *   It will query the **Main Application Database** (using `@repo/database/db` - main app client) to find the organization based on the subdomain (`organizations` table).
        *   If the organization is found, it will retrieve the associated tenant database connection URL from the `projects` table (linked to the organization).
        *   Implement caching (e.g., using `Map`) to store connection URLs for subsequent requests to the same subdomain.
        *   Return the connection URL or `null` if not found.
    *   **Implement `getTenantDbClient(req: NextRequest)` helper function:**
        *   This function will retrieve the tenant database client from the Next.js Request Context (`req.dbClient`), which will be set by the Tenant Middleware.
        *   Throw an error if `req.dbClient` is not initialized, indicating that the middleware was not applied.

**Step 2: Implement Tenant Identification Middleware (`apps/app/middleware.ts`)**

    *   **Create `tenantMiddleware(req: NextRequest)` function:**
        *   Extract the hostname from the `req.headers.get('host')`.
        *   Determine if it's a subdomain request or the root domain.
        *   **For Subdomain Requests:**
            *   Extract the subdomain.
            *   Call `getTenantConnectionUrl(subdomain)` to get the database connection URL.
            *   If no connection URL is found (tenant not found), return a `404` or redirect to a default page.
            *   Establish a Drizzle ORM client using `@neondatabase/serverless` and the retrieved connection URL.
            *   Store the Drizzle client in the Next.js Request Context: `req.dbClient = tenantDbClient;`.
            *   Handle potential database connection errors gracefully (return `500` error).
        *   **For Root Domain Requests (e.g., `lavel.ai`):**
            *   Bypass tenant-specific logic. The middleware should just proceed without setting `req.dbClient`.
    *   **Integrate `tenantMiddleware` into the main middleware:**
        *   In `apps/app/middleware.ts`, ensure `tenantMiddleware` is executed **first**, before `authMiddleware` and `securityHeaders`.
        *   Modify the default middleware export to chain `tenantMiddleware` with the existing middleware functions.
        *   Conditionally apply `securityHeaders` and `authMiddleware` only if `tenantMiddleware` successfully establishes a tenant database connection (check if `req.dbClient` is set). This is crucial to avoid errors on the main domain or for requests that don't require a tenant DB.

**Step 3: Implement Default Organization Fetch Query (`@repo/database/src/main-app/queries/organization-queries.ts`)**

    *   **Create `fetchDefaultOrganizationForUser(userId: string)` function:**
        *   This function will query the **Main Application Database** to find the default organization for a given user ID.
        *   It should query the `organization_members` table to find organizations the user is a member of.
        *   For now, it can simply return the **first** organization the user is a member of.  *(In a real application, you might have logic to determine a "default" organization, e.g., based on user settings or roles)*.
        *   Return an object containing the `id` and `subdomainSlug` of the default organization, or `null` if the user is not a member of any organization.

**Step 4: Modify Authentication Layout for Redirection (`apps/app/app/(authenticated)/layout.tsx`)**

    *   **Post-Login Redirection Logic:**
        *   In the `AppLayout` component (for authenticated routes), after successful authentication (user login on the main domain `lavel.ai`).
        *   Call `fetchDefaultOrganizationForUser(user.id)` (from `@repo/database/queries/organization-queries.ts`) to get the user's default organization.
        *   If a default organization is found (and has a `subdomainSlug`), **redirect** the user to the subdomain URL of their default organization (e.g., `https://<subdomainSlug>.lavel.ai/dashboard`).
        *   If no default organization is found, the user might remain on the main domain or be redirected to a default application page on the main domain (depending on desired behavior).
    *   **Subdomain Access:**
        *   If the user directly accesses a subdomain URL (e.g., `tenant-a.lavel.ai/dashboard`) or is redirected to a subdomain after login, `AppLayout` should proceed to render the authenticated application layout as usual, relying on the Tenant Middleware to have set up the `req.dbClient`.

**Step 5: Create Utility File to Access Tenant DB Client (`apps/app/utils/tenant-db.ts`)**

    *   Create a new file `apps/app/utils/tenant-db.ts`.
    *   Move the `getTenantDbClient(req: NextRequest)` function (initially defined in `apps/app/middleware.ts`) into this utility file.
    *   Update imports in `apps/app/middleware.ts` and any route handlers that need to access the tenant DB client to import `getTenantDbClient` from this utility file.

**Step 6: Testing**

    *   **Unit Tests (for utility functions):**
        *   Test `getTenantConnectionUrl` function in isolation: mock database queries to simulate different scenarios (organization found, organization not found, project with connection URL, project without, database errors).
    *   **Integration Tests (for middleware):**
        *   Set up test subdomains (e.g., using `localhost` and different ports or hostnames in a test environment).
        *   Test middleware behavior for:
            *   Valid subdomain requests: Verify that `req.dbClient` is correctly set up with a valid database connection.
            *   Invalid subdomain requests: Verify that the middleware returns a `404` or appropriate error response.
            *   Root domain requests: Verify that tenant middleware is bypassed and no errors occur.
            *   Database connection errors: Simulate database connection failures and verify that the middleware handles them gracefully (returns `500` error).
    *   **End-to-End Tests (for login redirection):**
        *   Test the complete login flow:
            *   Log in on the main domain (`lavel.ai`).
            *   Verify redirection to the correct subdomain URL based on the user's default organization.
            *   Access application pages on the subdomain and verify data is being fetched from the correct tenant database (you'll need to set up test data in tenant databases).

**Step 7: Documentation and Code Cleanup**

    *   Add comments to the code to explain the logic of the Tenant Middleware and related functions.
    *   Update any relevant documentation (like `login-middleware-database.md` or other architecture documents) to reflect the implementation details.
    *   Review and refactor code for clarity and maintainability.


**Rollback Plan:**

    *   If issues arise during implementation, revert changes to `apps/app/middleware.ts`, `@repo/database/src/tenant-app/tenant-db.ts`, `@repo/database/src/main-app/queries/organization-queries.ts`, and `apps/app/app/(authenticated)/layout.tsx` to their previous states.
    *   Remove the newly created `apps/app/utils/tenant-db.ts` file.
    *   Thoroughly test the application after rollback to ensure stability.

This plan provides a structured approach to implementing the multi-tenant login middleware. Each step should be implemented and tested incrementally to ensure a smooth integration.

================
File: .github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**next-forge version**
I am using version ...

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. MacOS]
 - Browser [e.g. chrome v130, safari]

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: enhancement
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

================
File: .github/CODE_OF_CONDUCT.md
================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
haydenbleasel.com/contact.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

================
File: .github/copilot-instructions.md.example
================
# Copilot Guidelines

This project <PROJECT_NAME> uses <TECH_STACK>.

## Project Structure
Structure of how project files are setup. Making changes to files should be in their respected file.
```
| App       | Description                                                                 |
|-----------|-----------------------------------------------------------------------------|
| api       | Contains serverless functions designed to run separately from the main app e.g. webhooks and cron jobs. |
| app       | The main application, featuring a shadcn/ui template.                      |
| docs      | The documentation, which contains the documentation for the app e.g. guides and tutorials. |
| email     | The email preview server from react.email.                                 |
| storybook | The storybook, which contains the storybook for the app.                   |
| studio    | Prisma Studio, which is a graphical editor for the database.              |
| web       | The website, featuring a twblocks template.                                |
```

## Nesting
- Avoid deeply nested code. Break down logic into smaller functions.
- Opening curly braces should be on the same line as the statement.

## Error Handling
- Always catch a specific error instead of a generic one.
- Log the error message and stack trace.

================
File: .github/dependabot.yml
================
version: 2
updates:

  # Maintain dependencies for GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/"
    open-pull-requests-limit: 10
    schedule:
      interval: "monthly"

  # Maintain dependencies for npm
  - package-ecosystem: "npm"
    directory: "/"
    open-pull-requests-limit: 10
    schedule:
      interval: "monthly"

================
File: .github/pull_request_template.md
================
## Description

Please provide a brief description of the changes introduced in this pull request.

## Related Issues

Closes #<issue_number>

## Checklist

- [ ] My code follows the code style of this project.
- [ ] I have performed a self-review of my code.
- [ ] I have commented my code, particularly in hard-to-understand areas.
- [ ] I have updated the documentation, if necessary.
- [ ] I have added tests that prove my fix is effective or my feature works.
- [ ] New and existing tests pass locally with my changes.

## Screenshots (if applicable)

<!-- Add screenshots to help explain your changes, especially if this is a UI-related PR. -->

## Additional Notes

<!-- Add any additional information or context about the pull request here. -->

================
File: .specstory/history/.what-is-this.md
================
# SpecStory Artifacts Directory
    
This directory is automatically created and maintained by the SpecStory extension to preserve your Cursor composer and chat history.
    
## What's Here?
    
- `.specstory/history`: Contains markdown files of your AI coding sessions
- Each file represents a separate chat or composer session
- Files are automatically updated as you work

## Valuable Uses
    
- Capture: Keep your context window up-to-date when starting new Chat/Composer sessions via @ references
- Search: For previous prompts and code snippets 
- Learn: Meta-analyze your patterns and learn from your past experiences
    
## Version Control
    
We recommend keeping this directory under version control to maintain a history of your AI interactions. However, if you prefer not to version these files, you can exclude them by adding this to your `.gitignore`:
    
```
.specstory/**
```
    
## Searching Your Codebase
    
When searching your codebase in Cursor, search results may include your previous AI coding interactions. To focus solely on your actual code files, you can exclude the AI interaction history from search results.
    
To exclude AI interaction history:
    
1. Open the "Find in Files" search in Cursor (Cmd/Ctrl + Shift + F)
2. Navigate to the "files to exclude" section
3. Add the following pattern:
    
```
.specstory/*
```
    
This will ensure your searches only return results from your working codebase files.

## Notes

- Auto-save only works when Cursor/sqlite flushes data to disk. This results in a small delay after the AI response is complete before SpecStory can save the history.
- Auto-save does not yet work on remote WSL workspaces.

## Settings
    
You can control auto-saving behavior in Cursor:
    
1. Open Cursor → Settings → VS Code Settings (Cmd/Ctrl + ,)
2. Search for "SpecStory"
3. Find "Auto Save" setting to enable/disable
    
Auto-save occurs when changes are detected in Cursor's sqlite database, or every 2 minutes as a safety net.

================
File: .specstory/history/debugging-clerk-authentication-middleware-issues.md
================
## SpecStory

## Debugging Clerk Authentication Middleware Issues (2/8/2025, 3:04:06 PM)

_**User**_

wwe have designed our sign-in system but currently is failinf at a determined point @log-in.mdx.mdspecifically in our @layout.tsx 

here are all the components of our system and ones i think we need to take into account
- @middleware.ts @middleware.ts @middleware.ts @middleware.ts @tenant-db.ts @tenant-lookup.ts @tenant-connection-db.ts @layout.tsx 

something i think we have not considered and perhaps could also be affecting is: 
- @index.tsx here we set the @provider.tsx 

the error is very clear: 

[ Server ] Error: Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware(). Please ensure the following:
-  clerkMiddleware() is used in your Next.js Middleware.
- Your Middleware matcher is configured to match this route or page.
- If you are using the src directory, make sure the Middleware file is inside of it.

For more details, see https://clerk.com/docs/quickstarts/nextjs
Source

apps/app/app/(authenticated)/layout.tsx (19:40) @ async AppLayout

  17 |
  18 | const AppLayout = async ({ children }: AppLayoutProperties) => {
> 19 |   const { userId, redirectToSignIn } = await auth();
     |                                        ^
  20 |
  21 |   if (!userId) {
  22 |     return redirectToSignIn();
we are calling auth before even it is initialized, we need to review the steps we are doing in our code. 

Lets think this step by step and debug our problem 

---

_**Assistant**_

The error message you are seeing indicates that Clerk's `auth()` function is being called outside of the context that `clerkMiddleware()` is supposed to establish.  Based on the files you've provided, the middleware setup *seems* correct at first glance, but let's try a simplified approach to isolate the issue.

My suspicion is that while `clerkMiddleware` is present, something in your custom middleware chain might be preventing it from correctly setting up the authentication context before `auth()` is called in your layout.

Let's try simplifying your `apps/app/app/middleware.ts` file to include *only* the `authMiddleware`. This will help us determine if the issue lies within the interaction of `authMiddleware` with `tenantMiddleware` or `securityHeaders`.

Here's how you can modify `apps/app/app/middleware.ts`:

{{ Simplify middleware to isolate Clerk auth }}
````language:apps/app/app/middleware.ts
// apps/app/app/middleware.ts
import { authMiddleware } from '@repo/auth/middleware';
// import { tenantMiddleware } from './middleware/tenant-middleware'; // {{ Comment out tenantMiddleware }}
// import { NextResponse } from 'next/server'; // {{ Comment out NextResponse }}
// import {                                     // {{ Comment out security middleware }}
//   noseconeMiddleware,
//   noseconeOptions,
//   noseconeOptionsWithToolbar,
// } from '@repo/security/middleware';
// import { env } from '@/env';

// const securityHeaders = env.FLAGS_SECRET             // {{ Comment out security headers }}
//   ? noseconeMiddleware(noseconeOptionsWithToolbar)
//   : noseconeMiddleware(noseconeOptions);

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
    '/(api|trpc)(.*)',
  ],
};

export default authMiddleware(
  // async (auth, request) => {                      // {{ Comment out the async function }}
  // Determine the hostname.                           // {{ Comment out tenant middleware logic }}
  //   const hostname = request.headers.get('host') || '';
  //   // Check if the request is on the main domain.
  //   const mainDomain = env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  //   const isMainDomain = hostname === mainDomain;

  //   // Only run tenantMiddleware if we're NOT on the main domain.
  //   if (!isMainDomain) {
  //     const tenantResponse = await tenantMiddleware(request);
  //     if (tenantResponse instanceof NextResponse) {
  //       return tenantResponse;
  //     }
  //   }

  //   // Finally, add the security headers.
  //   return securityHeaders();
  // }
);
````

**Explanation of the changes:**

1.  **Commented out `tenantMiddleware` and `securityHeaders`:** We are temporarily removing these from the middleware chain to see if they are interfering with Clerk.
2.  **Simplified `authMiddleware` export:** We are directly exporting `authMiddleware` without wrapping it in the asynchronous function that was previously handling tenant and security middleware.

**After making these changes:**

1.  **Restart your development server.**
2.  **Test your application again.** Try to access a route that should be protected by authentication (within the `(authenticated)` route group).

**If the error disappears after these changes:**

This would indicate that the issue is likely related to how `tenantMiddleware` or `securityHeaders` are interacting with `authMiddleware`. We can then re-introduce them one by one to pinpoint the exact cause.

**If the error persists even after these changes:**

If the error *still* occurs with this simplified middleware, it would suggest a more fundamental problem. In that case, we should double-check:

*   **Clerk Environment Variables:** Ensure your Clerk API keys and other environment variables are correctly configured in your `.env` files and are being loaded properly by your application.
*   **`AuthProvider` Placement:** Verify that the `AuthProvider` is correctly wrapping your application in `packages/design-system/index.tsx` and that `DesignSystemProvider` is used in your root layout (`apps/app/app/layout.tsx`).
*   **Clerk Documentation:** Re-read the Clerk Next.js documentation to ensure all setup steps have been followed correctly, especially regarding middleware configuration.

Let me know the results after you try simplifying the middleware! This will help us narrow down the source of the problem.

---

_**User**_

ok the error is pessisting the .env is working properly is not about the api key 

---

_**Assistant**_

Okay, the error persists even with the simplified middleware. This is quite helpful, as it rules out the middleware chain interaction as the primary cause.

Since the error message is specifically about `auth()` not detecting `clerkMiddleware()`, and we've confirmed `clerkMiddleware()` is indeed present (even in a simplified form), let's shift our focus to the component tree and provider setup.

It's possible that the `ClerkProvider` (via `AuthProvider`) is not correctly wrapping the part of the application where `auth()` is being called. Let's add a quick test to the root layout (`apps/app/app/layout.tsx`) to check if the Clerk context is available there.

We'll create a very simple client component that uses `useUser` from `@clerk/nextjs`. If this component fails to render or throws an error in the root layout, it will indicate that the `ClerkProvider` context is not being properly established at the root level, even before we get to the authenticated layout.

First, create a new file for this test component:

{{ Create a test component to check Clerk context }}
````language:apps/app/app/components/ClerkContextTest.tsx
'use client';

import { useUser } from '@clerk/nextjs';

export const ClerkContextTest = () => {
  const { user, isSignedIn, isLoading } = useUser();

  if (isLoading) {
    return <p>Loading Clerk context...</p>;
  }

  if (isSignedIn) {
    return <p>Clerk context is working in root layout. User ID: {user?.id}</p>;
  }

  return <p>Clerk context is working in root layout, but user is not signed in (as expected here).</p>;
};
```

Now, import and include this `ClerkContextTest` component in your root layout (`apps/app/app/layout.tsx`):

{{ Import and use ClerkContextTest in root layout }}
````language:apps/app/app/layout.tsx
import '@repo/design-system/styles/globals.css';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';
import { ClerkContextTest } from './components/ClerkContextTest'; // {{ Import the test component }}

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en" className={fonts} suppressHydrationWarning>
    <body>
      <DesignSystemProvider>
        <ClerkContextTest /> {/* Render the test component */}
        {children}
      </DesignSystemProvider>
      <Toolbar />
    </body>
  </html>
);

export default RootLayout;
```

**After adding `ClerkContextTest` to the root layout:**

1.  **Restart your development server.**
2.  **Reload your application.**

**Observe the output of the `ClerkContextTest` component in the root layout.**

*   **If you see "Clerk context is working..."**: This means `ClerkProvider` is correctly set up at the root level, and the issue might be somewhere else (perhaps in the authenticated layout specifically, or a subtle middleware problem we've missed).
*   **If you see an error or "Loading Clerk context..." persists indefinitely**: This strongly suggests that `ClerkProvider` is *not* correctly providing the context at the root level. In this case, we need to re-examine `packages/design-system/index.tsx` and `packages/auth/provider.tsx` to ensure `ClerkProvider` is correctly configured and wrapping the application. We should also double-check that the `DesignSystemProvider` is correctly used in the root layout.

Let me know what you see after adding the `ClerkContextTest` component to your root layout. This will give us a clearer direction for debugging.

---

_**User**_

where should i save this component? 

---

_**Assistant**_

You are right to ask for clarification!  It's best to be precise about file locations.

You should save the `ClerkContextTest.tsx` component in this directory:

```
apps/app/app/components/ClerkContextTest.tsx
```

This is within your `apps/app` directory, inside the `app` router directory, and then in a `components` folder for organization.  This is a standard place to put React components in a Next.js application, and it keeps things tidy.

The file path in my previous instructions was indeed:

````language:apps/app/app/components/ClerkContextTest.tsx
'use client';

import { useUser } from '@clerk/nextjs';

export const ClerkContextTest = () => {
  const { user, isSignedIn, isLoading } = useUser();

  if (isLoading) {
    return <p>Loading Clerk context...</p>;
  }

  if (isSignedIn) {
    return <p>Clerk context is working in root layout. User ID: {user?.id}</p>;
  }

  return <p>Clerk context is working in root layout, but user is not signed in (as expected here).</p>;
};
````

Let me know if you have any trouble creating the file or placing the code in it!  Once you've done that and updated `apps/app/app/layout.tsx` to include `<ClerkContextTest />`, restart your dev server and let me know what you see in the browser.

---

_**User**_

is this the right way to add it to the layout ? @layout.tsx 

---

_**Assistant**_

Yes, you have added the `ClerkContextTest` component to `apps/app/app/layout.tsx` correctly!

```typescript:apps/app/app/layout.tsx
import '@repo/design-system/styles/globals.css';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';
import { ClerkContextTest } from './components/ClerkContextTest';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en" className={fonts} suppressHydrationWarning>
    <body>
      <ClerkContextTest></ClerkContextTest> {{--  ✅ Component is rendered here --}}
      <DesignSystemProvider>{children}</DesignSystemProvider>
      <Toolbar />
    </body>
  </html>
);

export default RootLayout;
```

You've imported it at the top:

```typescript
import { ClerkContextTest } from './components/ClerkContextTest';
```

And you've rendered it within the `<body>` of your `RootLayout` component:

```typescript
<body>
  <ClerkContextTest></ClerkContextTest>
  <DesignSystemProvider>{children}</DesignSystemProvider>
  <Toolbar />
</body>
```

This is exactly how you should include it to test if the Clerk context is available in the root layout.

**Now, could you please tell me what you see in the browser when you load your application?**

Are you seeing:

1.  **"Loading Clerk context..."**  persistently?
2.  **"Clerk context is working in root layout..."** with or without the user ID?
3.  An **error message**?
4.  Something else?

Your observation in the browser will give us the next clue to solve this!

---

_**User**_

we get the same error but now iwht the test 

Error: useUser can only be used within the <ClerkProvider /> component.

Possible fixes:
1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.
2. Check for multiple versions of the `@clerk/shared` package in your project. Use a tool like `npm ls @clerk/shared` to identify multiple versions, and update your dependencies to only rely on one.

Learn more: https://clerk.com/docs/components/clerk-provider

---

_**Assistant**_

OK, the new error message " `useUser can only be used within the <ClerkProvider /> component.`" with the `ClerkContextTest` component is extremely telling. It confirms that the `ClerkProvider` is **not** properly wrapping your application, even at the root layout level.

Let's systematically investigate the provider setup, starting from the `DesignSystemProvider` in `packages/design-system/index.tsx`.

**1. Inspect `DesignSystemProvider` (`packages/design-system/index.tsx`)**

Please show me the contents of your `packages/design-system/index.tsx` file again to re-examine it. We need to make sure it's correctly structured to include the `AuthProvider`.

It should look something like this (based on what you've provided before, but let's double-check):

````typescript:packages/design-system/index.tsx
import { AnalyticsProvider } from '@repo/analytics';
import { AuthProvider } from '@repo/auth/provider';
import type { ThemeProviderProps } from 'next-themes';
import { Toaster } from './components/ui/sonner';
import { TooltipProvider } from './components/ui/tooltip';
import { ThemeProvider } from './providers/theme';

type DesignSystemProviderProperties = ThemeProviderProps;

export const DesignSystemProvider = ({
  children,
  ...properties
}: DesignSystemProviderProperties) => (
  <ThemeProvider {...properties}>
    <AuthProvider>
      <AnalyticsProvider>
        <TooltipProvider>{children}</TooltipProvider>
        <Toaster />
      </AnalyticsProvider>
    </AuthProvider>
  </ThemeProvider>
);
````

Specifically, we need to verify:

*   **`AuthProvider` import:**  Is `AuthProvider` correctly imported from `@repo/auth/provider`?
*   **`AuthProvider` wrapping:** Is `<AuthProvider>` correctly wrapping `<AnalyticsProvider>` and its children?
*   **`children` prop:** Is the `children` prop being passed down correctly within the component structure?

**2. Inspect `AuthProvider` (`packages/auth/provider.tsx`)**

Next, let's re-examine your `AuthProvider` in `packages/auth/provider.tsx`. Please show me its contents again as well. We need to confirm that it's correctly rendering the `ClerkProvider` from `@clerk/nextjs`.

It should look similar to this:

````typescript:packages/auth/provider.tsx
'use client';

import { ClerkProvider } from '@clerk/nextjs';
import { dark } from '@clerk/themes';
import type { Theme } from '@clerk/types';
import { tailwind } from '@repo/tailwind-config';
import { useTheme } from 'next-themes';
import type { ComponentProps } from 'react';

export const AuthProvider = (
  properties: ComponentProps<typeof ClerkProvider>
) => {
  const { resolvedTheme } = useTheme();
  const isDark = resolvedTheme === 'dark';
  const baseTheme = isDark ? dark : undefined;
  const variables: Theme['variables'] = {
    // Core
    fontFamily: tailwind.theme.fontFamily.sans.join(', '),
    fontFamilyButtons: tailwind.theme.fontFamily.sans.join(', '),
    fontSize: tailwind.theme.fontSize.sm[0],
    fontWeight: {
      bold: tailwind.theme.fontWeight.bold,
      normal: tailwind.theme.fontWeight.normal,
      medium: tailwind.theme.fontWeight.medium,
    },
    spacingUnit: tailwind.theme.spacing[4],
  };

  const elements: Theme['elements'] = {
    dividerLine: 'bg-border',
    socialButtonsIconButton: 'bg-card',
    navbarButton: 'text-foreground',
    organizationSwitcherTrigger__open: 'bg-background',
    organizationPreviewMainIdentifier: 'text-foreground',
    organizationSwitcherTriggerIcon: 'text-muted-foreground',
    organizationPreview__organizationSwitcherTrigger: 'gap-2',
    organizationPreviewAvatarContainer: 'shrink-0',
  };

  return (
    <ClerkProvider
      {...properties}
      appearance={{ baseTheme, variables, elements }}
    />
  );
};
````

Here, we need to check:

*   **`ClerkProvider` import:** Is `ClerkProvider` correctly imported from `@clerk/nextjs`?
*   **`ClerkProvider` rendering:** Is `<ClerkProvider>` being rendered and returning the component?
*   **`properties` prop:** Are the `properties` being correctly spread onto the `ClerkProvider`? This is important for passing down any necessary Clerk configuration.

**Please provide the contents of both `packages/design-system/index.tsx` and `packages/auth/provider.tsx` so we can verify these points.**  Once we confirm these look correct, we'll move on to the `package.json` checks.

---

_**User**_

here is the @index.tsx and the auth provider @provider.tsx 

---

_**Assistant**_

Okay, let's continue debugging this step-by-step.

You've confirmed that `packages/design-system/index.tsx` and `packages/auth/provider.tsx` look correct.  That's good.

Now, let's re-examine how you are using `DesignSystemProvider` in your root layout (`apps/app/app/layout.tsx`). Please provide the content of your `apps/app/app/layout.tsx` file again, just to be absolutely sure there isn't a subtle issue there.

Specifically, I want to double-check:

1.  **Import statement:** Is `DesignSystemProvider` imported correctly from `@repo/design-system`?
    ```typescript
    import { DesignSystemProvider } from '@repo/design-system';
    ```
2.  **Wrapping `children`:** Is `DesignSystemProvider` correctly wrapping the `{children}` prop in your `RootLayout` component?
    ```typescript
    <DesignSystemProvider>{children}</DesignSystemProvider>
    ```
3.  **No typos or extra elements:**  Are there any accidental typos in the component name or any extra, unexpected elements wrapping or interfering with `DesignSystemProvider`?

Once we've visually confirmed that `apps/app/app/layout.tsx` is correctly using `DesignSystemProvider`, we will move on to checking the `package.json` files for dependency issues.

Please paste the content of your `apps/app/app/layout.tsx` file here.

---

_**User**_

@layout.tsx 

---

_**Assistant**_

You're asking me to check `@layout.tsx` again. To be absolutely sure, please paste the content of your `apps/app/app/layout.tsx` file here. I want to visually re-confirm the following in your current file:

1.  **`DesignSystemProvider` import:**
    ```typescript
    import { DesignSystemProvider } from '@repo/design-system';
    ```

2.  **`DesignSystemProvider` wrapping `children`:**
    ```typescript
    <DesignSystemProvider>{children}</DesignSystemProvider>
    ```

3.  **Placement of `ClerkContextTest`:** Is it *inside* the `DesignSystemProvider`? It should be for the test to work correctly.
    ```typescript
    <DesignSystemProvider>
        <ClerkContextTest />
        {children}
    </DesignSystemProvider>
    ```

4.  **No typos or extra elements** around `DesignSystemProvider` that could be causing issues.

Once you paste the content of `apps/app/app/layout.tsx`, I will review it again to make sure everything looks right in how you are using the `DesignSystemProvider` and the `ClerkContextTest` component within it.

---

_**User**_

here it is 

---

_**Assistant**_

OK. Thank you for providing the `apps/app/app/layout.tsx` file again.

After carefully reviewing it, I see **one critical issue** in this file that is likely causing the problem.

Look closely at this part of your `RootLayout` component:

```typescript
<body>
  <ClerkContextTest></ClerkContextTest>
  <DesignSystemProvider>{children}</DesignSystemProvider>
  <Toolbar />
</body>
```

You have placed `<ClerkContextTest>` **outside** of the `<DesignSystemProvider>`.

**The `ClerkContextTest` component, and indeed any component that uses Clerk's `useUser`, `useSession`, `auth`, etc., MUST be rendered as a child (or descendant) of the `<ClerkProvider>`.**

In your current code, `ClerkContextTest` is a sibling to `DesignSystemProvider`, not a child.  Since `DesignSystemProvider` is responsible for rendering the `ClerkProvider` (through `AuthProvider`),  `ClerkContextTest` is not within the Clerk context, and therefore `useUser` fails.

**To fix this, you need to move `<ClerkContextTest>` *inside* the `<DesignSystemProvider>` component, so it becomes a child.**

Here's the corrected `apps/app/app/layout.tsx`:

{{ Move ClerkContextTest inside DesignSystemProvider }}
````language:apps/app/app/layout.tsx
import '@repo/design-system/styles/globals.css';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';
import { ClerkContextTest } from './components/ClerkContextTest';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en" className={fonts} suppressHydrationWarning>
    <body>
      <DesignSystemProvider>
        <ClerkContextTest />  {{--  ✅ Moved inside DesignSystemProvider --}}
        {children}
      </DesignSystemProvider>
      <Toolbar />
    </body>
  </html>
);

export default RootLayout;
````

**Explanation of the change:**

*   I have moved the line `<ClerkContextTest />` to be *inside* the opening and closing tags of `<DesignSystemProvider>`.

**After making this change:**

1.  **Save `apps/app/app/layout.tsx`.**
2.  **Restart your development server** (to ensure changes are picked up).
3.  **Reload your application in the browser.**

**What should you expect to see now?**

With `ClerkContextTest` correctly placed inside `DesignSystemProvider`, it should now be within the Clerk context.

*   You should **no longer see the "useUser can only be used within ClerkProvider" error.**
*   Instead, you should see the output from `ClerkContextTest` itself: either "Loading Clerk context..." briefly, or "Clerk context is working in root layout..." (with or without user ID, depending on your sign-in status).

Please make this change and let me know what you see in the browser after reloading.  This adjustment should hopefully resolve the core issue!

---

_**User**_

Ok i think i know where the error is, i logged out the user from the app and wjen we click the sign in btn now it is working and redirects to @sign-in.tsx so the problem might be in the following part: 

1. when a user is singed-in and has a valid session then it "by-pass" the sign-in component where i guess the aith gets initiated or retrieved since it has a valid session. 
2. since we are trying to access the user this might be breaking something

here is the text with the user loged out 
Clerk context is working in root layout, but user is not signed in (as expected here).

---

_**Assistant**_

Okay, the user is suspecting that the issue might be related to how existing sessions are handled and potentially bypassing some initialization steps when a user is already signed in. This is a good intuition to follow.

The user is currently seeing "Clerk context is working in root layout, but user is not signed in (as expected here)." when logged out, which confirms `ClerkProvider` is working at the root level.

Now, let's re-introduce the `tenantMiddleware` to the middleware chain to see if it's causing interference when a user is signed in. We'll keep `securityHeaders` commented out for now to isolate the interaction between Clerk and tenant middleware.

Here are the edits to `apps/app/app/middleware.ts`:

{{ Re-introduce tenantMiddleware to middleware }}
````language:apps/app/app/middleware.ts
// apps/app/app/middleware.ts
import { authMiddleware } from '@repo/auth/middleware';
import { tenantMiddleware } from './middleware/tenant-middleware'; // {{ Re-introduce tenantMiddleware }}
import { NextResponse } from 'next/server';
// import {
//   noseconeMiddleware,
//   noseconeOptions,
//   noseconeOptionsWithToolbar,
// } from '@repo/security/middleware';
// import { env } from '@/env';

// const securityHeaders = env.FLAGS_SECRET
//   ? noseconeMiddleware(noseconeOptionsWithToolbar)
//   : noseconeMiddleware(noseconeOptions);

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
    '/(api|trpc)(.*)',
  ],
};

export default authMiddleware(async (auth, request) => { // {{ Re-introduce async wrapper }}
  // Determine the hostname.
  const hostname = request.headers.get('host') || '';
  // Check if the request is on the main domain.
  const mainDomain = env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  const isMainDomain = hostname === mainDomain;

  // Only run tenantMiddleware if we're NOT on the main domain.
  if (!isMainDomain) {
    const tenantResponse = await tenantMiddleware(request);
    if (tenantResponse instanceof NextResponse) {
      return tenantResponse;
    }
  }

  // Finally, add the security headers.          // {{ Keep securityHeaders commented out }}
  // return securityHeaders();
});
````

**Explanation of the changes:**

1.  **Uncommented `tenantMiddleware` import and usage.**
2.  **Uncommented the `async` wrapper** around the middleware function, which is necessary to use `tenantMiddleware`.
3.  **`securityHeaders` remains commented out** to isolate the issue.

**After applying these edits:**

1.  **Save the `middleware.ts` file.**
2.  **Restart your Next.js development server.**
3.  **Test the application again, especially when you are already signed in.** Try to access a page within the `(authenticated)` route group.

**Check if the error "auth() was called but Clerk can't detect usage of clerkMiddleware()" reappears when you are signed in.**

Please let me know what happens after you re-introduce `tenantMiddleware`. This will help us determine if `tenantMiddleware` is indeed involved in the issue.

---

_**User**_

ok comment the things we need to comment on the file @middleware.ts 

---

_**Assistant**_

Got it! Let's re-introduce `tenantMiddleware` and comment out `securityHeaders` in `apps/app/app/middleware.ts`.

Here are the edits:

{{ Re-introduce tenantMiddleware and comment out securityHeaders }}
````language:apps/app/app/middleware.ts
// apps/app/app/middleware.ts
import { authMiddleware } from '@repo/auth/middleware';
import { tenantMiddleware } from './middleware/tenant-middleware'; // {{ Uncomment tenantMiddleware }}
import { NextResponse } from 'next/server';
import {
  noseconeMiddleware,
  noseconeOptions,
  noseconeOptionsWithToolbar,
} from '@repo/security/middleware'; // {{ Keep import for noseconeMiddleware }}
import { env } from '@/env';

// const securityHeaders = env.FLAGS_SECRET             // {{ Comment out securityHeaders again }}
//   ? noseconeMiddleware(noseconeOptionsWithToolbar)
//   : noseconeMiddleware(noseconeOptions);

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
    '/(api|trpc)(.*)',
  ],
};

export default authMiddleware(async (auth, request) => {
  // Determine the hostname.
  const hostname = request.headers.get('host') || '';
  // Check if the request is on the main domain.
  const mainDomain = env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  const isMainDomain = hostname === mainDomain;

  // Only run tenantMiddleware if we're NOT on the main domain.
  if (!isMainDomain) {
    const tenantResponse = await tenantMiddleware(request);
    if (tenantResponse instanceof NextResponse) {
      return tenantResponse;
    }
  }

  // Finally, add the security headers.
  // return securityHeaders();                             // {{ Comment out securityHeaders in the return }}
});
````

**Explanation of the changes:**

1.  **Uncommented `tenantMiddleware` import and usage:** We are bringing back the tenant middleware into the chain.
2.  **Commented out `securityHeaders` again:** We are temporarily disabling the security headers to focus on the interaction between Clerk and tenant middleware.  The import for `noseconeMiddleware` is kept in case we need it later.
3.  **`securityHeaders()` is commented out in the `return` statement** of the middleware function.

**After applying these edits:**

1.  **Save the `middleware.ts` file.**
2.  **Restart your Next.js development server.**
3.  **Test your application again, especially when you are signed in.** Try to access a page within the `(authenticated)` route group.

**Please let me know if the error "auth() was called but Clerk can't detect usage of clerkMiddleware()" reappears when you are signed in.**  Your feedback is crucial to pinpoint the source of the problem!

---

_**User**_

the error persists

[ Server ] Error: Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware(). Please ensure the following:
-  clerkMiddleware() is used in your Next.js Middleware.
- Your Middleware matcher is configured to match this route or page.
- If you are using the src directory, make sure the Middleware file is inside of it.

For more details, see https://clerk.com/docs/quickstarts/nextjs

---

_**Assistant**_

Okay, the error persists even with `tenantMiddleware` re-introduced and `securityHeaders` commented out. This is very helpful information.

Since the error remains with `tenantMiddleware` in the chain, let's examine the code of your `tenantMiddleware` to see if anything there could be interfering with Clerk's middleware.

Please provide the content of your `apps/app/app/middleware/tenant-middleware.ts` file. I want to review its logic and see if there's anything that might be causing this conflict with Clerk.

Specifically, I'll be looking for:

1.  **Early returns or `NextResponse`:** Does `tenantMiddleware` potentially return a `NextResponse` or exit early in some way that might prevent `authMiddleware` from fully executing?
2.  **Error handling:** Are there any `try...catch` blocks or error handling within `tenantMiddleware` that could be masking errors or preventing the middleware chain from proceeding correctly?
3.  **Request manipulation:** Does `tenantMiddleware` modify the `request` object in a way that might be incompatible with Clerk's expectations?
4.  **Asynchronous operations:** Are there any long-running asynchronous operations within `tenantMiddleware` that might be causing timing issues or race conditions with Clerk's middleware?

Once you provide the code for `tenantMiddleware`, I will analyze it to see if we can identify any potential points of conflict with Clerk.

---

_**User**_

@tenant-middleware.ts 

---

_**Assistant**_

Okay, I have reviewed the `tenant-middleware.ts` code. It seems generally well-structured for its purpose of establishing tenant database connections. However, based on my analysis, and to further isolate the problem, let's try a diagnostic modification to `tenantMiddleware`.

We will temporarily modify `tenantMiddleware` to **always proceed to the next middleware (`authMiddleware`)**, even if it cannot establish a tenant database connection or if a tenant is not found.  This is purely for debugging purposes to see if the early returns or error handling in `tenantMiddleware` are somehow interfering with Clerk's middleware initialization.

Here are the edits to `apps/app/app/middleware/tenant-middleware.ts`:

{{ Modify tenantMiddleware to always proceed for debugging }}
````language:apps/app/app/middleware/tenant-middleware.ts
// apps/app/middleware/tenant.ts
import { NextResponse, type NextRequest } from 'next/server';
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/queries/tenant-lookup';
import { createTenantConnection } from '@repo/database/src/tenant-app/tenant-connection-db';
import * as schema from '@repo/database/src/tenant-app/schema';  // Import your tenant schema
import { env } from '@/env'; // Your environment variable utility

// Extend NextRequest to store the tenant Drizzle client as "tenantDb"
declare module 'next/server' {
  interface NextRequest {
    tenantDb?: ReturnType<typeof createTenantConnection>;
  }
}

export async function tenantMiddleware(req: NextRequest) {
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  const isMainDomain =
    hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  const isStaticAsset =
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.startsWith('/static');

  if (isMainDomain || isStaticAsset) {
    return NextResponse.next(); // Proceed without tenant DB setup
  }

  // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
  const subdomain = hostname.split('.')[0];
  const connectionUrl = await getTenantConnectionUrl(subdomain); // Uses Redis caching

  if (!connectionUrl) {
    // Tenant not found, redirect to the main domain (or a 404 page)
    // return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL)); // {{ Comment out redirect }}
    console.warn("Tenant not found, proceeding without tenant DB setup for debugging."); // {{ Add a warning log }}
    return NextResponse.next(); // {{ Always proceed to next middleware }}
  }

  try {
    // Use the dedicated connection helper, passing in the tenant schema.
    // Casting schema as any helps resolve type mismatches.
    const tenantDb = createTenantConnection(connectionUrl, schema);
    req.tenantDb = tenantDb; // Attach the client to the request

    return NextResponse.next();
  } catch (error) {
    console.error('Tenant middleware error (DB connection):', error);
    // return new NextResponse('Internal Server Error', { status: 500 }); // {{ Comment out 500 error response }}
    console.warn("DB connection error, proceeding without tenant DB setup for debugging.", error); // {{ Add a warning log }}
    return NextResponse.next(); // {{ Always proceed to next middleware }}
  }
}
````

**Explanation of the changes:**

1.  **Commented out `redirect` on `!connectionUrl`:**  Instead of redirecting when a tenant is not found, we now log a warning and proceed.
    ```diff
    -   return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL)); // {{ Comment out redirect }}
    +   console.warn("Tenant not found, proceeding without tenant DB setup for debugging."); // {{ Add a warning log }}
    +   return NextResponse.next(); // {{ Always proceed to next middleware }}
    ```
2.  **Commented out `500 error response` in `catch` block:** Instead of returning a 500 error on database connection failure, we now log a warning and proceed.
    ```diff
    -   return new NextResponse('Internal Server Error', { status: 500 }); // {{ Comment out 500 error response }}
    +   console.warn("DB connection error, proceeding without tenant DB setup for debugging.", error); // {{ Add a warning log }}
    +   return NextResponse.next(); // {{ Always proceed to next middleware }}
    ```
3.  **Added `console.warn` messages:**  We've added `console.warn` messages in both cases where we used to return early. This will help us see in the server logs if these conditions are being triggered during testing.
4.  **Ensured `NextResponse.next()` is always returned:** In both the `if (!connectionUrl)` block and the `catch` block, we now explicitly return `NextResponse.next()` to ensure the middleware chain always proceeds to the next middleware (`authMiddleware`).

**After applying these edits:**

1.  **Save `tenant-middleware.ts`.**
2.  **Restart your Next.js development server.**
3.  **Test your application again, especially when you are signed in.** Try to access a page within the `(authenticated)` route group.

**Observe the behavior:**

*   **Does the "Clerk: auth() was called but..." error still occur?**
*   **Check your server console logs.** Do you see the "Tenant not found..." or "DB connection error..." warning messages from `tenantMiddleware`?

Let me know the results of this test. If the Clerk error disappears after these changes, it will strongly indicate that the issue is related to how `tenantMiddleware` was previously handling tenant lookup failures or database connection errors. If the error persists, we'll need to look elsewhere.

---

_**User**_

still the error persists 

 ⨯ Error: Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware(). Please ensure the following:
-  clerkMiddleware() is used in your Next.js Middleware.
- Your Middleware matcher is configured to match this route or page.
- If you are using the src directory, make sure the Middleware file is inside of it.

For more details, see https://clerk.com/docs/quickstarts/nextjs

    at async App (apps/app/app/(authenticated)/page.tsx:25:20)
  23 |
  24 | const App = async () => {
> 25 |   const { orgId } = await auth();
     |                    ^
  26 |
  27 |   if (!orgId) {
  28 |     notFound(); {
  digest: '2692622763'
}
 GET / 500 in 71ms

app-router.ts:52 Error: Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware(). Please ensure the following:
-  clerkMiddleware() is used in your Next.js Middleware.
- Your Middleware matcher is configured to match this route or page.
- If you are using the src directory, make sure the Middleware file is inside of it.

For more details, see https://clerk.com/docs/quickstarts/nextjs

    at async AppLayout (layout.tsx:19:40)


The above error occurred in the <AppLayout> component. It was handled by the <ReactDevOverlay> error boundary.

hot-reloader-client.tsx:364 [Fast Refresh] rebuilding
clerk.browser.js:12 Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview
clerk.browser.js:12 Clerk: The prop "afterSignInUrl" is deprecated and should be replaced with the new "fallbackRedirectUrl" or "forceRedirectUrl" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props

The resource http://localhost:3000/_next/static/chunks/%5Bproject%5D__932cc9._.css was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally.

---

_**Assistant**_

Okay, the error persists even after modifying `tenant-middleware.ts`.  Let's go through the action plan step-by-step.

**Step 1: Verify `middleware.ts` placement**

Please visually confirm in your file explorer that the `middleware.ts` file is located at:

`apps/app/app/middleware.ts`

It should be directly inside the `app` directory, which is inside another `app` directory within the `apps` folder.  Double-check the directory structure to ensure there are no typos or misplacements.

**Step 2: Search for conflicting `middleware.ts` files**

Use your IDE's search functionality (e.g., "Find in Files" in VS Code) and search for the filename:

`middleware.ts`

Check if there are any other files with this name in your entire project, especially within the `apps/` directory or any nested `app/` directories.  If you find any other `middleware.ts` files, please list their paths here.  Having multiple middleware files could cause conflicts.

**Step 3: Check dependency versions**

Open your terminal, navigate to the `apps/app` directory, and run the following commands:

```bash
npm ls @clerk/nextjs
npm ls @clerk/shared
```

Please paste the *complete output* of these commands here. This will show us the installed versions of `@clerk/nextjs` and `@clerk/shared` and help us identify any potential version mismatches or conflicts.

**Step 4: Clear Next.js build cache**

In your terminal, still in the `apps/app` directory, delete the `.next` directory:

```bash
rm -rf .next
```

Then, restart your Next.js development server:

```bash
npm run dev
```

After restarting, test your application again and see if the error persists.

**Step 5: Simplify `matcher`**

Edit your `apps/app/app/middleware.ts` file and change the `matcher` configuration to the most basic possible:

````language:apps/app/app/middleware.ts
export const config = {
  matcher: ['/((.*))'], // Simplest matcher - apply to all routes
};
````

Save the file, and restart your dev server again. Test if the error is still present.

**After completing each step, please report back:**

*   **Step 1:** Confirm the correct placement of `middleware.ts`.
*   **Step 2:** List any other `middleware.ts` files found (if any).
*   **Step 3:** Paste the complete output of `npm ls @clerk/nextjs` and `npm ls @clerk/shared`.
*   **Step 4:** Did clearing the cache and restarting help?
*   **Step 5:** Did simplifying the matcher help?

Your detailed feedback after each step will be crucial for diagnosing the problem further. Let's tackle this systematically!

---

_**User**_

ok i followed the steps i have verified that the middleware is actually in the apps/app/app root directory. 

- the tenant middleware is at apps/app/app/middleware/tenant-middleware.ts
- for middleware files we have @middleware.ts @middleware.ts @middleware.ts @middleware.ts 
4 and 5 nothing was different. 

---

_**Assistant**_

Okay, thank you for verifying the `middleware.ts` placement and trying steps 4 and 5.

It's important to clarify about the `middleware.ts` files you listed.  When I asked about *conflicting* `middleware.ts` files, I was looking for scenarios where you might have *multiple* files that Next.js could be trying to interpret as the middleware for `apps/app/app`.

Based on your list:

*   `apps/app/app/middleware.ts`: This is the correct middleware file for your `apps/app` application.
*   `apps/web/middleware.ts`: This middleware is for your `apps/web` application and should not directly interfere with `apps/app`.  Unless there's some unusual cross-application routing or configuration, this is likely not the cause of the issue in `apps/app`.
*   `packages/auth/middleware.ts` and `packages/security/middleware.ts`: These are *not* Next.js middleware files themselves. They are modules within your packages that *export* middleware functions (`authMiddleware` and `noseconeMiddleware`).  These are intended to be *imported and used* in your actual middleware files (like `apps/app/app/middleware.ts` and `apps/web/middleware.ts`), but they are not middleware files themselves that Next.js would execute directly.

**The most critical next step is to get the output of the `npm ls` commands.**  This is essential to check for potential version conflicts in your Clerk dependencies, which is a very common cause of the error you are seeing.

**Please run these commands in your terminal, from the `apps/app` directory, and provide the *complete output* for both:**

````bash
npm ls @clerk/nextjs
npm ls @clerk/shared
````

The output will look something like a tree structure showing the installed versions and dependencies.  This will help us identify if there are multiple versions of `@clerk/nextjs` or `@clerk/shared` in your project, which can lead to the "Clerk: auth() was called but..." error.

**Example of what the output might look like (this is just an example, please provide your actual output):**

```
npm ls @clerk/nextjs
your-project@1.0.0 /path/to/your/apps/app
└── @clerk/nextjs@5.0.0

npm ls @clerk/shared
your-project@1.0.0 /path/to/your/apps/app
└── @clerk/nextjs@5.0.0
    └── @clerk/shared@1.2.3
```

Once you provide this output, we can analyze it and determine if version conflicts are the issue. If they are, I can guide you on how to resolve them. If not, we'll continue to investigate other potential causes.

Looking forward to your `npm ls` output!

---

_**User**_

pnpm ls @clerk/nextjs

Legend: production dependency, optional only, dev only

app /Users/dmgpro/Desktop/lavel-t/apps/app (PRIVATE)

dependencies:
@clerk/nextjs 6.9.15

pnpm ls @clerk/shared


---

_**Assistant**_

It seems like you only provided the output for `pnpm ls @clerk/nextjs`.  To properly check for version conflicts, we **absolutely need the output of** `pnpm ls @clerk/shared` as well.

Please run this command in your terminal, from the `apps/app` directory, and paste the **complete output**:

```bash
pnpm ls @clerk/shared
```

It's important to see the output of *both* commands to understand your Clerk dependency situation.

Once you provide the output of `pnpm ls @clerk/shared`, we can analyze it together and determine if version conflicts are the cause of the error.

Looking forward to seeing the output of `pnpm ls @clerk/shared`!

---

_**User**_

there is no output of clerkshared

---

_**Assistant**_

That "no output" for `pnpm ls @clerk/shared` from within `apps/app` is indeed very interesting and potentially a key clue.

**It strongly suggests that `@clerk/shared` is not being correctly resolved or installed as a dependency of `@clerk/nextjs` *within your `apps/app` package*.**

However, in a monorepo setup with `pnpm`, it's crucial to check the dependency resolution at the **root level**.  `pnpm` often hoists dependencies to the root to optimize and deduplicate them across packages.

**Therefore, the ABSOLUTELY ESSENTIAL next step is to run `pnpm ls @clerk/shared` from the ROOT of your monorepo.**

**Please do the following immediately:**

1.  **Open your terminal.**
2.  **Navigate to the *root directory* of your `lavel-t` monorepo project** (the directory that contains the `apps`, `packages`, `pnpm-lock.yaml`, `turbo.json` etc.).
3.  **Run the command:**
    ```bash
    pnpm ls @clerk/shared
    ```
4.  **Copy and paste the *complete output* of this command here.**

**Why is this root-level check so important?**

*   **Monorepo Dependency Hoisting:** In a `pnpm` monorepo, dependencies are often hoisted to the root `node_modules` directory. This means that even if `apps/app/node_modules` doesn't explicitly list `@clerk/shared`, it might be resolved and available from the root `node_modules`.
*   **Root `pnpm-lock.yaml` is King:** The `pnpm-lock.yaml` file at the root of your monorepo dictates the *single source of truth* for all dependency versions across all packages. We need to see how `@clerk/shared` is resolved at the root level.
*   **Potential Version Conflicts Across Packages:** It's possible that other packages in your monorepo (e.g., in `packages/`) might be declaring dependencies that are causing a version conflict or incompatibility with the version of `@clerk/shared` expected by `@clerk/nextjs`.

**We need to see the output of `pnpm ls @clerk/shared` run from the ROOT to understand the complete dependency picture.**  This is the most critical piece of information to proceed with debugging.

Awaiting your output from the root-level `pnpm ls @clerk/shared` command!

---

_**User**_

there is no output 

---

_**Assistant**_

That "no output" from `pnpm ls @clerk/shared` run at the root is extremely concerning. It really suggests that `@clerk/shared` is not being recognized by `pnpm` in your monorepo setup.

Let's try a few more checks to confirm this and potentially fix it.

**First, please double-check:**

1.  **Are you *absolutely certain* you are running `pnpm ls @clerk/shared` from the *root directory* of your `lavel-t` project?**  The root directory is the one that contains `pnpm-lock.yaml`, `turbo.json`, `apps/`, `packages/`, etc.  Please `cd` to that directory in your terminal before running the command.  Sometimes it's easy to be one level off.

2.  **Open your `pnpm-lock.yaml` file (in the root of your project) and search for the text `@clerk/shared`.**  Does `@clerk/shared` appear anywhere in this file?  `pnpm-lock.yaml` is the definitive record of what `pnpm` has resolved and installed.

**If `@clerk/shared` is *not* in `pnpm-lock.yaml`:**

This means `pnpm` has not installed `@clerk/shared` at all, which is a serious problem. Let's try to force a re-installation:

3.  **Run `pnpm install` in the root directory of your `lavel-t` project.** This command will force `pnpm` to re-read your `package.json` files and `pnpm-lock.yaml` and re-install dependencies.

4.  **After `pnpm install` completes, run `pnpm ls @clerk/shared` again from the root.**  Does it give any output *this time*?  Please paste the output.

5.  **Also, after `pnpm install`, check `pnpm-lock.yaml` again.** Does `@clerk/shared` now appear in the file?

**If `@clerk/shared` *is* in `pnpm-lock.yaml`:**

It's still strange that `pnpm ls @clerk/shared` gives no output.  In this case, let's try:

6.  **Run `pnpm update @clerk/nextjs` in the root directory.** This will try to update `@clerk/nextjs` and its dependencies, which might force `pnpm` to re-evaluate `@clerk/shared`.

7.  **After `pnpm update`, run `pnpm ls @clerk/shared` again from the root.**  Any output now? Paste the output.

8.  **Check `pnpm-lock.yaml` again after `pnpm update`.** Has anything changed related to `@clerk/shared`?

**If none of the above works:**

If you still get no output from `pnpm ls @clerk/shared` from the root, and `@clerk/shared` is still not in `pnpm-lock.yaml` even after `pnpm install` and `pnpm update`, we might need to try a more forceful dependency reset:

9.  **(Drastic measure - try this only if the above steps fail):** Delete your `node_modules` folder and `pnpm-lock.yaml` file in the root directory:
    ```bash
    rm -rf node_modules pnpm-lock.yaml
    ```
    Then, run `pnpm install` again from the root.  This will force `pnpm` to completely re-resolve and re-install all dependencies from scratch.

10. **After this full re-install, run `pnpm ls @clerk/shared` from the root *again*.**  Any output now? And check `pnpm-lock.yaml`.

Please go through these steps systematically and let me know the results after each step, especially the output of `pnpm ls @clerk/shared` and whether `@clerk/shared` appears in `pnpm-lock.yaml` at each stage.  This will help us understand if we can get `pnpm` to recognize and install `@clerk/shared` correctly.

---

_**User**_

give me a clear explanation of what the problem might be 

---

_**Assistant**_

Okay, I understand you'd like a clearer explanation of the potential problem before proceeding with more steps. Let's break down what's likely happening.

**The Core Issue: Clerk Context Not Being Established**

The error message `Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware()` is very specific. It means that when you are calling `auth()` in your `layout.tsx` (and potentially other components), Clerk's authentication system hasn't been properly initialized for that request.

**Why is Clerk Not Initialized? Middleware's Role**

In Next.js with Clerk, `clerkMiddleware()` is crucial. It's the piece of code that runs at the beginning of each request and sets up the necessary context for Clerk to work. This context includes things like:

*   Reading and verifying user sessions (if a user is logged in).
*   Making authentication information available to your application.

If `clerkMiddleware()` is not running correctly *before* `auth()` is called, then `auth()` won't find the context it needs and will throw the error.

**Possible Reasons for Middleware Failure (Despite Seeming Setup)**

Even though you have `clerkMiddleware()` in your `middleware.ts`, there are reasons why it might not be working as expected:

1.  **Dependency Issues (Most Likely):**  Clerk, like most software, relies on other pieces of code (dependencies).  Specifically, `@clerk/nextjs` depends on `@clerk/shared`. If these dependencies are not correctly installed or if there are version conflicts, `clerkMiddleware()` itself might be broken internally and fail to initialize properly.  This is why we are focusing on dependency checks.

2.  **Middleware Execution Problems (Less Likely Now):** Initially, we suspected issues with how your `tenantMiddleware` or `securityHeaders` middleware might be interacting with `clerkMiddleware`. However, we've simplified your middleware chain, and the error persists. This makes it less likely that the *order* or *logic* of your middleware is the primary problem *at this moment*.

3.  **Incorrect `middleware.ts` Placement (Already Checked):** We've confirmed your `middleware.ts` is in the right directory (`apps/app/app/middleware.ts`).

4.  **Caching or Build Issues (Tried Clearing Cache):** We tried clearing the Next.js build cache, which sometimes resolves strange issues, but it didn't help in this case.

**Why We Suspect `@clerk/shared` Dependency Problem**

The fact that `pnpm ls @clerk/shared` gives *no output* is a **major red flag**. It suggests that `@clerk/shared`, a core dependency of Clerk, is not being properly recognized or installed in your project's dependency tree.  If `@clerk/shared` is missing or corrupted, it would directly explain why `clerkMiddleware()` is failing and why `auth()` is throwing errors.

**The Troubleshooting Steps Are Designed to Fix Dependency Issues**

The steps I outlined (running `pnpm install`, `pnpm update`, deleting `node_modules` and `pnpm-lock.yaml`) are all aimed at forcing `pnpm` (your package manager) to:

*   **Re-examine your `package.json` files:** To ensure all dependencies, including `@clerk/nextjs` and its dependencies like `@clerk/shared`, are correctly declared.
*   **Re-resolve dependency versions:** To fix potential version conflicts or inconsistencies in your dependency tree.
*   **Re-install dependencies:** To ensure all necessary packages, including `@clerk/shared`, are actually present in your `node_modules` directory and are not corrupted.
*   **Rebuild `pnpm-lock.yaml`:** To create a fresh, consistent lock file that accurately reflects the resolved dependency versions.

**In short, the most probable explanation for your error is a broken or incomplete installation of Clerk's dependencies, specifically `@clerk/shared`. The next steps are designed to thoroughly clean and rebuild your project's dependencies to rule out this possibility.**

Please let me know if this explanation makes sense.  If it does, please proceed with the dependency troubleshooting steps I provided earlier, starting with re-running `pnpm ls @clerk/shared` from the root to double-check, and then systematically going through `pnpm install`, `pnpm update`, and the more drastic `node_modules` deletion if needed.  Providing the outputs of those commands is crucial for me to help you further.

---

_**User**_

ok this is not it, since we have centralized clerk in the package @auth not sure why we would have that issue. 

lets instead review what is our layout doing, step by step

@layout.tsx 

---

_**Assistant**_

Okay, let's review your `apps/app/app/layout.tsx` file step-by-step to understand what it's doing.

Here is the code again for reference:

```typescript:apps/app/app/layout.tsx
import '@repo/design-system/styles/globals.css';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en" className={fonts} suppressHydrationWarning>
    <body>
      <DesignSystemProvider>{children}</DesignSystemProvider>
      <Toolbar />
    </body>
  </html>
);

export default RootLayout;
```

**Step-by-Step Analysis of `apps/app/app/layout.tsx` (Root Layout):**

1.  **Imports:**
    *   `import '@repo/design-system/styles/globals.css';`:  Imports global styles for your design system. This is likely setting up base CSS for your application.  **Looks correct.**
    *   `import { DesignSystemProvider } from '@repo/design-system';`: Imports the `DesignSystemProvider` component from your `@repo/design-system` package.  As we've discussed, this provider is crucial as it wraps your application with `ThemeProvider`, `AuthProvider`, `AnalyticsProvider`, etc., including the `ClerkProvider`. **This import is essential and looks correct.**
    *   `import { fonts } from '@repo/design-system/lib/fonts';`: Imports font styles, likely to apply custom fonts to your application. **Looks correct and related to styling.**
    *   `import { Toolbar } from '@repo/feature-flags/components/toolbar';`: Imports a `Toolbar` component, probably for feature flag management or debugging. This is likely a non-essential UI element. **Seems okay, not directly related to authentication.**
    *   `import type { ReactNode } from 'react';`: Imports `ReactNode` type for defining the `children` prop. **Standard React type import, looks correct.**

2.  **`RootLayoutProperties` Type:**
    ```typescript
    type RootLayoutProperties = {
      readonly children: ReactNode;
    };
    ```
    Defines the type for the `RootLayout` component's props, expecting a `children` prop of type `ReactNode`. **Standard Next.js layout prop definition, looks correct.**

3.  **`RootLayout` Component:**
    ```typescript
    const RootLayout = ({ children }: RootLayoutProperties) => (
      <html lang="en" className={fonts} suppressHydrationWarning>
        <body>
          <DesignSystemProvider>{children}</DesignSystemProvider>
          <Toolbar />
        </body>
      </html>
    );
    ```
    *   This is a functional component that takes `children` as a prop.
    *   It renders the basic HTML structure (`html`, `body`).
    *   `<html lang="en" className={fonts} suppressHydrationWarning>`: Sets language, applies fonts as CSS classes, and suppresses hydration warnings (common in Next.js, often okay to suppress). **Looks standard.**
    *   `<body>...</body>`:  The main content of your page goes inside the `body`.
    *   `<DesignSystemProvider>{children}</DesignSystemProvider>`: **Crucially, it wraps the `{children}` prop with `DesignSystemProvider`. This is the correct and expected way to provide the design system context (including Clerk's `ClerkProvider`) to the rest of your application.**
    *   `<Toolbar />`: Renders the `Toolbar` component *outside* of the `DesignSystemProvider`, which is fine as it likely doesn't depend on the Clerk context.

4.  **`export default RootLayout;`**: Exports the `RootLayout` component as the default export, making it the root layout for your `apps/app` application. **Correct export.**

**Overall Assessment of `apps/app/app/layout.tsx`:**

Based on this step-by-step analysis, the `apps/app/app/layout.tsx` file itself **looks generally correct**.  It correctly imports and uses `DesignSystemProvider` to wrap the application's children, which *should* establish the Clerk context at the root level.

**Possible Issues (Despite `layout.tsx` looking okay):**

*   **Problem within `DesignSystemProvider` or `AuthProvider`:**  Even if `layout.tsx` is correct, there could still be an issue *inside* the `DesignSystemProvider` component (in `packages/design-system/index.tsx`) or the `AuthProvider` component (in `packages/auth/provider.tsx`). We've reviewed these before, but it's always worth re-checking very carefully.
*   **Middleware Still Not Running:** Despite our checks, there might still be a subtle issue preventing `middleware.ts` from running correctly *before* the layout is rendered. This is less likely now, but we can't completely rule it out.
*   **Dependency Problem Persists:** If `@clerk/shared` is truly missing or corrupted, even a correctly structured layout and middleware setup won't fix the fundamental dependency issue.

**Next Steps:**

1.  **Let's re-examine `apps/app/app/(authenticated)/layout.tsx`**.  We need to analyze the authenticated layout as well, as that's where you are calling `auth()` and encountering the error.
2.  **Re-run the dependency troubleshooting steps** (especially `pnpm install` and checking `pnpm ls @clerk/shared` from the root) to be absolutely certain about the dependency situation.

Let's move on to analyzing `apps/app/app/(authenticated)/layout.tsx` next. Please provide the content of that file again so we can do a similar step-by-step analysis.

---

_**User**_

ok lets review our other layout @layout.tsx step by step 

---

_**Assistant**_

Okay, let's do a step-by-step review of your `apps/app/app/(authenticated)/layout.tsx` file. This is where the error " `auth() was called but Clerk can't detect usage of clerkMiddleware()`" is happening, so a detailed analysis is crucial.

Here is the code again for reference:

````typescript:apps/app/app/(authenticated)/layout.tsx
// apps/app/app/(authenticated)/layout.tsx
import { currentUser, auth } from '@repo/auth/server';
import { fetchDefaultOrganizationForUser } from '@repo/database/src/main-app/queries/organization-queries';
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';
import { env } from '@/env';
import { SidebarProvider } from '@repo/design-system/components/ui/sidebar';
import { showBetaFeature } from '@repo/feature-flags';
import { NotificationsProvider } from '@repo/notifications/components/provider';
import { PostHogIdentifier } from './components/posthog-identifier';
import { GlobalSidebar } from './components/sidebar';
import type { ReactNode } from 'react';

type AppLayoutProperties = {
  readonly children: ReactNode;
};

const AppLayout = async ({ children }: AppLayoutProperties) => {
  const { userId, redirectToSignIn } = await auth();

  if (!userId) {
    return redirectToSignIn();
  }

  const user = await currentUser();
  if (!user) {
    return redirectToSignIn();
  }

  // Get hostname to determine if we're on main domain
  const headersList = await headers();
  const hostname = headersList.get('host') || '';
  const isMainDomain = hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');

  if (isMainDomain) {
    // On the main domain, fetch the user's default organization and redirect to the tenant subdomain.
    const defaultOrg = await fetchDefaultOrganizationForUser(userId);
    if (defaultOrg?.subdomainSlug) {
      const tenantUrl = `https://${defaultOrg.subdomainSlug}.${env.NEXT_PUBLIC_APP_URL?.replace('https://', '')}`;
      redirect(tenantUrl);
    }
    // If no organization is found, redirect to onboarding.
    redirect('/onboarding');
  }

  const betaFeature = await showBetaFeature();
  return (
    <NotificationsProvider userId={user.id}>
      <SidebarProvider>
        <GlobalSidebar>
          {betaFeature && (
            <div className="m-4 rounded-full bg-success p-1.5 text-center text-sm text-success-foreground">
              Beta feature now available
            </div>
          )}
          {children}
        </GlobalSidebar>
        <PostHogIdentifier />
      </SidebarProvider>
    </NotificationsProvider>
  );
};

export default AppLayout;
````

**Step-by-Step Analysis of `apps/app/app/(authenticated)/layout.tsx` (Authenticated Layout):**

1.  **Top Comment:** `// apps/app/app/(authenticated)/layout.tsx` - Correctly identifies the file path. **Looks good.**

2.  **Imports:**
    *   `import { currentUser, auth } from '@repo/auth/server';`: Imports `currentUser` and `auth` functions from your `@repo/auth/server` package.  These are Clerk's server-side authentication utilities. **Correct and essential for authentication logic.**
    *   `import { fetchDefaultOrganizationForUser } from '@repo/database/src/main-app/queries/organization-queries';`: Imports a function to fetch the default organization for a user from your database. This is related to your multi-tenant logic. **Looks correct for your application's needs.**
    *   `import { redirect } from 'next/navigation';`: Imports `redirect` from `next/navigation` for server-side redirects. **Standard Next.js redirect utility, looks correct.**
    *   `import { headers } from 'next/headers';`: Imports `headers` from `next/headers` to access request headers. **Standard Next.js utility, used for hostname detection, looks correct.**
    *   `import { env } from '@/env';`: Imports your environment variable utility. **Correct for accessing environment variables like `NEXT_PUBLIC_APP_URL`.**
    *   `import { SidebarProvider } from '@repo/design-system/components/ui/sidebar';`: Imports `SidebarProvider` from your design system, likely for UI layout. **UI component, seems okay.**
    *   `import { showBetaFeature } from '@repo/feature-flags';`: Imports `showBetaFeature` for feature flag logic. **Feature flag logic, seems okay.**
    *   `import { NotificationsProvider } from '@repo/notifications/components/provider';`: Imports `NotificationsProvider`, likely for in-app notifications. **Notification provider, seems okay.**
    *   `import { PostHogIdentifier } from './components/posthog-identifier';`: Imports `PostHogIdentifier`, probably for analytics integration. **Analytics component, seems okay.**
    *   `import { GlobalSidebar } from './components/sidebar';`: Imports `GlobalSidebar`, likely the actual sidebar UI component. **UI component, seems okay.**
    *   `import type { ReactNode } from 'react';`: Imports `ReactNode` type. **Standard React type import, looks correct.**

3.  **`AppLayoutProperties` Type:**
    ```typescript
    type AppLayoutProperties = {
      readonly children: ReactNode;
    };
    ```
    Defines the type for `AppLayout` props, expecting `children`. **Standard layout prop definition, looks correct.**

4.  **`AppLayout` Component (Async Server Component):**
    ```typescript
    const AppLayout = async ({ children }: AppLayoutProperties) => {
      const { userId, redirectToSignIn } = await auth();

      if (!userId) {
        return redirectToSignIn();
      }

      const user = await currentUser();
      if (!user) {
        return redirectToSignIn();
      }

      // Get hostname to determine if we're on main domain
      const headersList = await headers();
      const hostname = headersList.get('host') || '';
      const isMainDomain = hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');

      if (isMainDomain) {
        // On the main domain, fetch the user's default organization and redirect to the tenant subdomain.
        const defaultOrg = await fetchDefaultOrganizationForUser(userId);
        if (defaultOrg?.subdomainSlug) {
          const tenantUrl = `https://${defaultOrg.subdomainSlug}.${env.NEXT_PUBLIC_APP_URL?.replace('https://', '')}`;
          redirect(tenantUrl);
        }
        // If no organization is found, redirect to onboarding.
        redirect('/onboarding');
      }

      const betaFeature = await showBetaFeature();
      return (
        <NotificationsProvider userId={user.id}>
          <SidebarProvider>
            <GlobalSidebar>
              {betaFeature && (
                <div className="m-4 rounded-full bg-success p-1.5 text-center text-sm text-success-foreground">
                  Beta feature now available
                </div>
              )}
              {children}
            </GlobalSidebar>
            <PostHogIdentifier />
          </SidebarProvider>
        </NotificationsProvider>
      );
    };
    ```
    *   `const { userId, redirectToSignIn } = await auth();`: **This is where you call `auth()` and where the error originates.** It's trying to get `userId` and `redirectToSignIn` from Clerk's authentication context.  If `clerkMiddleware` hasn't run, this will fail.
    *   `if (!userId) { return redirectToSignIn(); }`: If `userId` is not found (user not authenticated), it redirects to the sign-in page. **Standard authentication check.**
    *   `const user = await currentUser(); if (!user) { return redirectToSignIn(); }`: Fetches the full user object using `currentUser()`. If no user is found, redirects to sign-in. **Double-checks user presence.**
    *   **Hostname and Main Domain Check:** The code then gets the hostname and checks if it's the main domain (`lavel.ai`).
    *   **Main Domain Redirection Logic:** If it's the main domain, it fetches the user's default organization and redirects to the tenant subdomain if found, or to onboarding if not. **This is your multi-tenant routing logic.**
    *   **Beta Feature and UI Rendering:**  Finally, it renders the UI: `NotificationsProvider`, `SidebarProvider`, `GlobalSidebar`, beta feature banner, `children`, and `PostHogIdentifier`.

5.  **`export default AppLayout;`**: Exports `AppLayout` as the default export. **Correct export.**

**Overall Assessment of `apps/app/app/(authenticated)/layout.tsx`:**

This layout file's logic seems **generally sound** for its purpose:

*   It correctly uses `auth()` to check authentication.
*   It handles redirection to sign-in if not authenticated.
*   It implements your main domain vs. subdomain redirection logic.
*   It sets up UI providers and renders the children.

**Potential Issues (Despite `(authenticated)/layout.tsx` looking okay):**

*   **Timing/Race Condition? (Less Likely):**  Could there be a subtle timing issue where `auth()` is called *before* `clerkMiddleware` has fully set up the context, even though middleware *should* run first? This is less likely in Next.js middleware, but not impossible in complex scenarios.
*   **Dependency Problem Still Dominant:**  The most persistent and likely explanation remains a problem with dependencies, especially `@clerk/shared`. If `clerkMiddleware` itself is broken due to missing or conflicting dependencies, then `auth()` will inevitably fail.

**Next Steps:**

1.  **Re-run Dependency Troubleshooting (Again, Systematically):**  Let's go through the dependency troubleshooting steps *one more time*, very carefully and systematically:
    *   Run `pnpm install` in the root.
    *   Run `pnpm update @clerk/nextjs` in the root.
    *   If still no luck, try the drastic step: delete `node_modules` and `pnpm-lock.yaml` and then `pnpm install` in the root.
    *   **After *each* of these steps, immediately run `pnpm ls @clerk/shared` from the root and paste the output.**  Also, check if `@clerk/shared` appears in `pnpm-lock.yaml`. We need to definitively confirm if `pnpm` is recognizing and installing `@clerk/shared`.

2.  **If Dependency Steps Fail:** If, after all dependency troubleshooting, `pnpm ls @clerk/shared` still gives no output from the root, and the error persists, we might need to consider more unusual possibilities, like a deeper configuration issue in your monorepo setup or a potential bug in a specific version of Clerk or `pnpm`. But let's exhaust the dependency angle first.

Let's focus on re-running those dependency steps meticulously and getting the output of `pnpm ls @clerk/shared` from the root after each attempt.  This is the most critical next step.

---

_**User**_

i finally found the issue it was my bad we had to have the @middleware.ts at the root level of the app 

now we get this error

[Upstash Redis] The 'url' property is missing or undefined in your Redis config.
[Upstash Redis] The 'token' property is missing or undefined in your Redis config.
[Upstash Redis] Redis client was initialized without url or token. Failed to execute command.
Error with redis: Error: Failed to parse URL from /pipeline
    at context.fetch (/Users/dmgpro/Desktop/lavel-t/node_modules/.pnpm/next@15.1.6_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/server/web/sandbox/context.js:303:38)
    at HttpClient.request (/Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/1ec1a_@upstash_redis_160412._.js:114:29)
    at async Pipeline.exec (/Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/1ec1a_@upstash_redis_160412._.js:2632:21)
    at async AutoPipelineExecutor.withAutoPipeline (/Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/1ec1a_@upstash_redis_160412._.js:3365:25)
    at async getTenantConnectionUrl (/Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/[root of the server]__9c936e._.js:448:27)
    at async tenantMiddleware (/Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/[root of the server]__9c936e._.js:969:27)
    at async /Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/[root of the server]__9c936e._.js:1059:32
    at async /Users/dmgpro/Desktop/lavel-t/apps/app/.next/server/edge/chunks/a3bca_@clerk_nextjs_dist_esm_9ddc54._.js:1154:47

i understand that this is because we dont have configured upstash. 

From what i get of the documentation of next forge we have the upstash in the @security package, lets follow the documentation for what we need to do here @Nextforge 


---

_**Assistant**_

Great! I'm really glad to hear that moving `middleware.ts` to the root of the `apps/app/app` directory resolved the Clerk middleware issue. It's often the seemingly small details like file placement that can cause these kinds of errors in Next.js.

Now, let's tackle this new Upstash Redis error. You're right, the error message clearly indicates that the Redis connection is failing because the `url` and `token` are missing in the configuration.

**It's important to clarify that Upstash Redis configuration is generally NOT located in the `@security` package.** The `@security` package is for security-related middleware (like `noseconeMiddleware` and `secure` functions), not for database or cache connections.

**Upstash Redis configuration is typically handled in your environment variables and accessed where you initialize the Redis client.**  Based on your project structure, the Redis client is likely being used in your `@repo/rate-limit` package or within your `@repo/database` package, specifically in the tenant database connection logic, as the error message mentions `getTenantConnectionUrl` and `tenantMiddleware`.

Let's follow these steps to resolve the Upstash Redis issue:

**1. Check your `.env.local` files for Upstash Redis variables:**

You need to ensure you have the necessary Upstash Redis environment variables defined in your `.env.local` file.  **The most likely place to put these variables is in the `.env.local` file in the `apps/app` directory.**

Open your `apps/app/.env.local` file and look for the following environment variables:

*   `UPSTASH_REDIS_URL`
*   `UPSTASH_REDIS_TOKEN`

**Make sure these variables are present and have the correct values for your Upstash Redis database.** You can find these credentials in your Upstash console for your Redis database.

If you don't have these variables in your `.env.local` file, you need to add them, like this (replace with your actual Upstash URL and token):

```
UPSTASH_REDIS_URL="your_upstash_redis_url"
UPSTASH_REDIS_TOKEN="your_upstash_redis_token"
```

**2. Locate the Redis client initialization code:**

We need to find where the Redis client is being initialized in your codebase to confirm how it's reading these environment variables.

Based on the file paths you've provided, the Redis client initialization is likely in one of these locations:

*   **`packages/rate-limit/index.ts` (or similar file in `@repo/rate-limit`):** If you have a dedicated rate-limiting package, the Redis client might be initialized there.
*   **`packages/database/src/tenant-app/queries/tenant-lookup.ts`:** This file is involved in `getTenantConnectionUrl`, which is mentioned in the error. It's highly probable that the Redis client is initialized or used in this file for caching tenant connection URLs.
*   **`packages/database/src/main-app/db.ts` or similar:**  It's also possible the Redis client is initialized in a general database setup file within your `@repo/database` package.

**Please examine these files and look for code that initializes a Redis client.** It will likely use a library like `ioredis` or `@upstash/redis` and will read the `UPSTASH_REDIS_URL` and `UPSTASH_REDIS_TOKEN` environment variables.

**Example of Redis client initialization (using `@upstash/redis`):**

```typescript
import { Redis } from '@upstash/redis';
import { env } from '@/env'; // Your env utility

export const redis = new Redis({
  url: env.UPSTASH_REDIS_URL,
  token: env.UPSTASH_REDIS_TOKEN,
});
```

**3. Verify environment variable access:**

Once you find the Redis client initialization code, ensure it's correctly using your environment variable utility (likely ` '@/env'`) to access `UPSTASH_REDIS_URL` and `UPSTASH_REDIS_TOKEN`.

**4. Restart your development server:**

After you've added the Upstash Redis environment variables to your `.env.local` file and verified the Redis client initialization code, **restart your Next.js development server** to ensure the new environment variables are loaded.

**5. Test your application again:**

Try accessing your application again and see if the Upstash Redis error is resolved.

**If you are still encountering the error after these steps, please provide the following information so I can help you further:**

*   **Confirm that you have added `UPSTASH_REDIS_URL` and `UPSTASH_REDIS_TOKEN` to your `apps/app/.env.local` file (or the correct `.env.local` file for your setup).**
*   **Show me the code where you initialize the Redis client.** (From `packages/rate-limit`, `packages/database/src/tenant-app/queries/tenant-lookup.ts`, or wherever it is located).
*   **If you have any specific documentation from Next-Forge that you are referring to regarding Upstash configuration, please share the relevant sections or links.**

Let's get your Redis connection working!

---

_**User**_

ok we are finally working more or less right. 

we get this error 
Cache MISS for subdomain: localhost:3000

and on our website we get this error 

The page isn’t redirecting properly

Firefox has detected that the server is redirecting the request for this address in a way that will never complete.

    This problem can sometimes be caused by disabling or refusing to accept cookies.

---

_**Assistant**_

It's excellent that you're making progress and are "more or less right"! Let's tackle this "Page isn't redirecting properly" error and the "Cache MISS for subdomain: localhost:3000" message. These are related and point to a redirection loop issue, likely in your tenant subdomain logic, especially when running on `localhost`.

Let's systematically debug this:

**1. Analyze the "Page isn't redirecting properly" error:**

This error, especially in Firefox, strongly indicates a **redirection loop**. The browser detects that it's being redirected repeatedly to the same or a related URL, creating an infinite loop.

**2. Analyze "Cache MISS for subdomain: localhost:3000":**

This log message from your server is also very informative. It means that when your application is running on `localhost:3000`, the `getTenantConnectionUrl` function is being called with the subdomain `localhost:3000`. This is happening because your `tenantMiddleware` is likely extracting the subdomain based on splitting the hostname by `.`.  For `localhost:3000`, this split might be resulting in "localhost:3000" being treated as the subdomain.

**3. Pinpoint the Redirection Logic - `apps/app/app/(authenticated)/layout.tsx`:**

Let's re-examine the redirection logic in your `apps/app/app/(authenticated)/layout.tsx` file, as this is the most likely place for a redirection loop, especially related to tenant subdomains.

Here's the relevant code block from your layout:

````typescript
  // Get hostname to determine if we're on main domain
  const headersList = await headers();
  const hostname = headersList.get('host') || '';
  const isMainDomain = hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');

  if (isMainDomain) {
    // On the main domain, fetch the user's default organization and redirect to the tenant subdomain.
    const defaultOrg = await fetchDefaultOrganizationForUser(userId);
    if (defaultOrg?.subdomainSlug) {
      const tenantUrl = `https://${defaultOrg.subdomainSlug}.${env.NEXT_PUBLIC_APP_URL?.replace('https://', '')}`;
      redirect(tenantUrl);
    }
    // If no organization is found, redirect to onboarding.
    redirect('/onboarding');
  }
````

**Potential Loop Scenario:**

*   **`isMainDomain` is `true` on `localhost`:**  If `env.NEXT_PUBLIC_APP_URL` is set to something like `https://lavel.ai` (your production URL) and you are running on `localhost:3000`, then `hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '')` will likely be `false`.  **However, let's double-check how `env.NEXT_PUBLIC_APP_URL` is configured and what `hostname` is on localhost.**
*   **Always redirecting to `/onboarding` or tenant URL:** If `isMainDomain` is incorrectly evaluated as `true` on `localhost`, and if `defaultOrg` is not found or doesn't have a `subdomainSlug`, you might be getting repeatedly redirected to `/onboarding` or a tenant URL that then redirects back to the main domain check, creating a loop.

**4. Debugging Steps:**

Let's add some logging to `apps/app/app/(authenticated)/layout.tsx` to understand what's happening with the hostname and redirection logic on `localhost`.

**Edit `apps/app/app/(authenticated)/layout.tsx` to add console logs:**

{{ Add console logs to authenticated layout for debugging redirection loop }}
````language:apps/app/app/(authenticated)/layout.tsx
// apps/app/app/(authenticated)/layout.tsx
import { currentUser, auth } from '@repo/auth/server';
import { fetchDefaultOrganizationForUser } from '@repo/database/src/main-app/queries/organization-queries';
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';
import { env } from '@/env';
import { SidebarProvider } from '@repo/design-system/components/ui/sidebar';
import { showBetaFeature } from '@repo/feature-flags';
import { NotificationsProvider } from '@repo/notifications/components/provider';
import { PostHogIdentifier } from './components/posthog-identifier';
import { GlobalSidebar } from './components/sidebar';
import type { ReactNode } from 'react';

type AppLayoutProperties = {
  readonly children: ReactNode;
};

const AppLayout = async ({ children }: AppLayoutProperties) => {
  const { userId, redirectToSignIn } = await auth();

  if (!userId) {
    return redirectToSignIn();
  }

  const user = await currentUser();
  if (!user) {
    return redirectToSignIn();
  }

  // Get hostname to determine if we're on main domain
  const headersList = await headers();
  const hostname = headersList.get('host') || '';
  const isMainDomain = hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');

  console.log("Hostname:", hostname); // Log hostname
  console.log("NEXT_PUBLIC_APP_URL:", env.NEXT_PUBLIC_APP_URL); // Log env var
  console.log("isMainDomain:", isMainDomain); // Log isMainDomain

  if (isMainDomain) {
    console.log("Inside isMainDomain block"); // Log when inside isMainDomain block
    // On the main domain, fetch the user's default organization and redirect to the tenant subdomain.
    const defaultOrg = await fetchDefaultOrganizationForUser(userId);
    console.log("defaultOrg:", defaultOrg); // Log defaultOrg
    if (defaultOrg?.subdomainSlug) {
      const tenantUrl = `https://${defaultOrg.subdomainSlug}.${env.NEXT_PUBLIC_APP_URL?.replace('https://', '')}`;
      console.log("Redirecting to tenantUrl:", tenantUrl); // Log tenantUrl
      redirect(tenantUrl);
    }
    // If no organization is found, redirect to onboarding.
    console.log("Redirecting to /onboarding"); // Log onboarding redirect
    redirect('/onboarding');
  } else {
    console.log("NOT on main domain"); // Log when NOT on main domain
  }

  const betaFeature = await showBetaFeature();
  return (
    <NotificationsProvider userId={user.id}>
      <SidebarProvider>
        <GlobalSidebar>
          {betaFeature && (
            <div className="m-4 rounded-full bg-success p-1.5 text-center text-sm text-success-foreground">
              Beta feature now available
            </div>
          )}
          {children}
        </GlobalSidebar>
        <PostHogIdentifier />
      </SidebarProvider>
    </NotificationsProvider>
  );
};

export default AppLayout;
````

**Explanation of Logs Added:**

*   `console.log("Hostname:", hostname);`
*   `console.log("NEXT_PUBLIC_APP_URL:", env.NEXT_PUBLIC_APP_URL);`
*   `console.log("isMainDomain:", isMainDomain);`
*   `console.log("Inside isMainDomain block");`
*   `console.log("defaultOrg:", defaultOrg);`
*   `console.log("Redirecting to tenantUrl:", tenantUrl);`
*   `console.log("Redirecting to /onboarding");`
*   `console.log("NOT on main domain");`

**After adding these logs:**

1.  **Save `apps/app/app/(authenticated)/layout.tsx`.**
2.  **Restart your development server.**
3.  **Access your application on `localhost:3000` and observe the server console logs.**

**Analyze the Server Console Logs:**

Examine the output in your server console. Look for the values of:

*   `Hostname:` - What is the hostname being detected on `localhost:3000`?
*   `NEXT_PUBLIC_APP_URL:` - What is your `NEXT_PUBLIC_APP_URL` environment variable set to?
*   `isMainDomain:` - Is `isMainDomain` being evaluated as `true` or `false` on `localhost:3000`?
*   `Inside isMainDomain block` - Is the code entering the `isMainDomain` block unexpectedly on `localhost`?
*   `defaultOrg:` - Is `defaultOrg` being fetched correctly?
*   `Redirecting to tenantUrl:` or `Redirecting to /onboarding` - Which redirect is being triggered, if any?
*   `NOT on main domain` - Is this log message ever shown?

By analyzing these logs, we can understand exactly how the redirection logic is behaving on `localhost:3000` and pinpoint the cause of the redirection loop.

Share the server console output after running with these logs, and we can then determine the next steps to fix the redirection issue!

---

_**User**_

Ok perfect now here is what i did to test and what is working and what is not, and not sure if this is because we are in dev and we run local host that might be the problem. but i found the following: 

1. when i acess directly the marketing site local host 3000 everything works fine 
2. if im not signed in we do not get redirected to the sign-in page  when clicking in the sign in btn and we get the Cache MISS for subdomain: localhost:3000
3. if i give a valid subdomain for example mg.localhost:3000 it first redirects me to the sign-in and once i login in subsecuent attempts to get to the page it does redirects me correctly 

for what i understand is that our tenant middleware is not working properly, or not sure if this is likely due to the dev mode, but my logic is the following: 
1. since we are first lookin up for the host name we break our logic here, if the user doesnt have signed in or has expired the session or goes through the marketing site this isnt working properly 

---

_**Assistant**_

Okay, let's dive into these issues step-by-step. Based on your description, it seems the core problem lies in how your application distinguishes between main domain requests and tenant subdomain requests, especially in your local development environment (`localhost:3000`).

Let's start by examining your `tenantMiddleware` again, focusing on how it determines if a request is for the main domain or a tenant subdomain.

Please provide the content of your `apps/app/app/middleware/tenant-middleware.ts` file one more time. I want to specifically look at the logic that extracts the subdomain and checks `isMainDomain`.

Specifically, I'm interested in this part of your `tenantMiddleware`:

````typescript
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  const isMainDomain =
    hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  const isStaticAsset =
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.startsWith('/static');

  if (isMainDomain || isStaticAsset) {
    return NextResponse.next(); // Proceed without tenant DB setup
  }

  // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
  const subdomain = hostname.split('.')[0];
  // ... rest of tenant middleware logic
````

I want to analyze:

1.  **`hostname` extraction:** How are you getting the `hostname` from the request headers? (`req.headers.get('host')`) - This seems standard.
2.  **`isMainDomain` check:**  `hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '')` - This is where we need to be careful, especially with `localhost`. Let's see how `env.NEXT_PUBLIC_APP_URL` is configured in your `.env.local` file. **Please provide the content of your `apps/app/.env.local` file.**
3.  **Subdomain extraction:** `hostname.split('.')[0]` - This works well for domains like `tenant-a.lavel.ai`, but it might not be ideal for `localhost` or `localhost:3000`. For `localhost:3000`, `split('.')` will result in `["localhost:3000"]`, and `[0]` will be `"localhost:3000"`. This is likely why you are getting "Cache MISS for subdomain: localhost:3000".

Once you provide the `tenantMiddleware.ts` and `.env.local` content, we can refine the `isMainDomain` check and subdomain extraction logic to handle `localhost` correctly and prevent the redirection loop and cache miss issues on your main marketing site.

---

_**User**_

here are both 

---

_**Assistant**_

OK, thank you for providing the `tenantMiddleware.ts` and `.env.local` files.

After analyzing them, I've pinpointed the issue and have a solution for you!

**The Problem:**

As suspected, the issue lies in the `isMainDomain` check and subdomain extraction within your `tenantMiddleware`, specifically how they handle `localhost:3000`.

1.  **Incorrect `isMainDomain` Check:**
    *   Your current code: `hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '')`
    *   When `NEXT_PUBLIC_APP_URL` is `"http://localhost:3000"` and `hostname` is `"localhost:3000"`, the `replace('https://', '')` part **does not remove** `"http://"` from `NEXT_PUBLIC_APP_URL`. It only replaces `"https://"` if it's present.
    *   Therefore, you are comparing `"localhost:3000"` with `"http://localhost:3000"`, which are **not equal**.  `isMainDomain` becomes `false` even on `localhost:3000` when it should be `true`.

2.  **Incorrect Subdomain Extraction for `localhost`:**
    *   Your current code: `const subdomain = hostname.split('.')[0];`
    *   For `hostname = "localhost:3000"`, `hostname.split('.')` results in `["localhost:3000"]`.
    *   `subdomain` becomes `"localhost:3000"`, which is not a valid tenant subdomain and leads to the "Cache MISS" error.

**The Solution:**

We need to modify `tenantMiddleware.ts` to:

1.  **Correctly check `isMainDomain`:** Use a regular expression to remove the protocol (`http://` or `https://`) from `NEXT_PUBLIC_APP_URL` for accurate comparison.
2.  **Handle `localhost` as the main domain:**  Specifically check if the `hostname` is exactly `localhost:3000` and treat it as the main domain, bypassing subdomain extraction.

Here are the updated edits for `apps/app/app/middleware/tenant-middleware.ts`:

{{ Fix tenantMiddleware for localhost and isMainDomain check }}
````language:apps/app/app/middleware/tenant-middleware.ts
// apps/app/middleware/tenant.ts
import { NextResponse, type NextRequest } from 'next/server';
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/queries/tenant-lookup';
import { createTenantConnection } from '@repo/database/src/tenant-app/tenant-connection-db';
import * as schema from '@repo/database/src/tenant-app/schema';  // Import your tenant schema
import { env } from '@/env'; // Your environment variable utility

// Extend NextRequest to store the tenant Drizzle client as "tenantDb"
declare module 'next/server' {
  interface NextRequest {
    tenantDb?: ReturnType<typeof createTenantConnection>;
  }
}

export async function tenantMiddleware(req: NextRequest) {
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  // Correctly remove protocol (http:// or https://) for comparison
  const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
  // Check if it's the main domain (including localhost:3000)
  const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000'; // {{ Added localhost:3000 check }}


  const isStaticAsset =
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.startsWith('/static');

  if (isMainDomain || isStaticAsset) {
    return NextResponse.next(); // Proceed without tenant DB setup
  }

  // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
  let subdomain = '';
  if (hostname !== 'localhost:3000') { // {{ Skip split for localhost:3000 }}
    subdomain = hostname.split('.')[0];
  }


  const connectionUrl = await getTenantConnectionUrl(subdomain); // Uses Redis caching

  if (!connectionUrl) {
    // Tenant not found, redirect to the main domain (or a 404 page)
    return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL));
  }

  try {
    // Use the dedicated connection helper, passing in the tenant schema.
    // Casting schema as any helps resolve type mismatches.
    const tenantDb = createTenantConnection(connectionUrl, schema);
    req.tenantDb = tenantDb; // Attach the client to the request

    return NextResponse.next();
  } catch (error) {
    console.error('Tenant middleware error (DB connection):', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
````

**Explanation of Edits:**

1.  **Improved `isMainDomain` Check:**
    ```diff
    - const isMainDomain =
    -   hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
    + // Correctly remove protocol (http:// or https://) for comparison
    + const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
    + // Check if it's the main domain (including localhost:3000)
    + const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000'; // {{ Added localhost:3000 check }}
    ```
    *   We now use `env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '')` to correctly remove both `http://` and `https://` protocols using a regular expression (`/^https?:\/\//`).
    *   We added `|| hostname === 'localhost:3000'` to explicitly treat `localhost:3000` as the main domain.

2.  **Conditional Subdomain Extraction:**
    ```diff
    - // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
    - const subdomain = hostname.split('.')[0];
    + // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
    + let subdomain = '';
    + if (hostname !== 'localhost:3000') { // {{ Skip split for localhost:3000 }}
    +   subdomain = hostname.split('.')[0];
    + }
    ```
    *   We now only extract the subdomain using `hostname.split('.')[0]` **if the hostname is not `localhost:3000`**.
    *   For `localhost:3000`, `subdomain` will remain an empty string `''`, which should be treated as the main application context in your `getTenantConnectionUrl` logic (or you might need to adjust `getTenantConnectionUrl` to handle empty subdomains as main domain requests).

**After applying these edits:**

1.  **Save `apps/app/app/middleware/tenant-middleware.ts`.**
2.  **Restart your development server.**
3.  **Test your application thoroughly:**
    *   **Access `http://localhost:3000` (main marketing site):** Verify that it loads correctly without redirection loops and without "Cache MISS" errors. Sign-in/Sign-up on the main site should work.
    *   **Access a tenant subdomain like `http://mg.localhost:3000`:** Verify that it redirects you to the sign-in page (if not signed in), and after sign-in, it correctly loads the tenant application. Subsequent accesses to `mg.localhost:3000` should also work correctly.

Let me know if these changes resolve the redirection loop and "Cache MISS" errors on `localhost:3000` and if tenant subdomains are now working as expected in your local development environment!

---

_**User**_

ok not sure if this changes broke our middleware but its actually not working and here is why: 

1. i have 1 user that acutally has a project in the db, with a real project and database, it has a slug of mg, so it would actually be mg.localhost:3000
2. the changes we made right now did in fact allowed all urls to work but this is in a way breaking our middleware, once i returned to the sign-in i was able to create a new user in clerk once created i loged in and was able to access the app, this user doesnt have a project or database neither a slug, there fore it wouldnt in theory to be able to access, so our middleware is actually not working. 

we are not checking in the db and retrieving the url connection to the db for the specific database. 

please review my logic and tell me if im wrong or right and what we need to make to solve it or if this is the right approach 

---

_**Assistant**_

You are absolutely right in your logic!  It seems that while the previous changes fixed the redirection loop and "Cache MISS" errors, they might have inadvertently weakened the tenant middleware logic, causing it to bypass the tenant database connection check.

Your observation that a new user without a project can access the app on a tenant subdomain (like `mg.localhost:3000`) confirms that the middleware is not properly enforcing the tenant database lookup.

Let's add more detailed logging to `tenantMiddleware.ts` to understand exactly how the `isMainDomain` check and subdomain extraction are behaving for different hostnames. This will help us pinpoint why the middleware is not working as expected.

**Edit `apps/app/app/middleware/tenant-middleware.ts` to add detailed console logs:**

{{ Add detailed console logs to tenantMiddleware for debugging }}
````language:apps/app/app/middleware/tenant-middleware.ts
// apps/app/middleware/tenant.ts
import { NextResponse, type NextRequest } from 'next/server';
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/queries/tenant-lookup';
import { createTenantConnection } from '@repo/database/src/tenant-app/tenant-connection-db';
import * as schema from '@repo/database/src/tenant-app/schema';  // Import your tenant schema
import { env } from '@/env'; // Your environment variable utility

// Extend NextRequest to store the tenant Drizzle client as "tenantDb"
declare module 'next/server' {
  interface NextRequest {
    tenantDb?: ReturnType<typeof createTenantConnection>;
  }
}

export async function tenantMiddleware(req: NextRequest) {
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  // Correctly remove protocol (http:// or https://) for comparison
  const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
  // Check if it's the main domain (including localhost:3000)
  const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000';

  console.log("Tenant Middleware - Hostname:", hostname); // Log hostname
  console.log("Tenant Middleware - NEXT_PUBLIC_APP_URL (without protocol):", appUrlWithoutProtocol); // Log appUrlWithoutProtocol
  console.log("Tenant Middleware - isMainDomain:", isMainDomain); // Log isMainDomain


  const isStaticAsset =
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.startsWith('/static');

  if (isMainDomain || isStaticAsset) {
    console.log("Tenant Middleware - isMainDomain is true or isStaticAsset is true - bypassing tenant DB check"); // Log bypass message
    return NextResponse.next(); // Proceed without tenant DB setup
  }

  // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
  let subdomain = '';
  if (hostname !== 'localhost:3000') {
    subdomain = hostname.split('.')[0];
  }
  console.log("Tenant Middleware - Extracted Subdomain:", subdomain); // Log subdomain

  const connectionUrl = await getTenantConnectionUrl(subdomain); // Uses Redis caching
  console.log("Tenant Middleware - Connection URL from Redis:", connectionUrl); // Log connectionUrl

  if (!connectionUrl) {
    console.log("Tenant Middleware - No connection URL found - Redirecting to main domain"); // Log no connection URL
    // Tenant not found, redirect to the main domain (or a 404 page)
    return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL));
  } else {
    console.log("Tenant Middleware - Connection URL found - Proceeding to connect to tenant DB"); // Log connection URL found
  }


  try {
    // Use the dedicated connection helper, passing in the tenant schema.
    // Casting schema as any helps resolve type mismatches.
    const tenantDb = createTenantConnection(connectionUrl, schema);
    req.tenantDb = tenantDb; // Attach the client to the request
    console.log("Tenant Middleware - Tenant DB connection established"); // Log DB connection success

    return NextResponse.next();
  } catch (error) {
    console.error('Tenant middleware error (DB connection):', error);
    console.log("Tenant Middleware - Tenant DB connection error - Returning 500"); // Log DB connection error
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
````

**Explanation of Logs Added:**

We've added `console.log` statements at various points in the `tenantMiddleware` to track:

*   `Hostname:` - The raw hostname from the request.
*   `NEXT_PUBLIC_APP_URL (without protocol):` - The `NEXT_PUBLIC_APP_URL` after removing the protocol.
*   `isMainDomain:` - The result of the `isMainDomain` check.
*   Messages indicating when the middleware bypasses the tenant DB check (`isMainDomain is true...`), when a subdomain is extracted, when a connection URL is retrieved from Redis, and whether the tenant DB connection succeeds or fails.

**Testing Steps:**

1.  **Save `apps/app/app/middleware/tenant-middleware.ts`.**
2.  **Restart your development server.**
3.  **Test the following scenarios and carefully examine the server console logs for each:**
    *   **Access `http://localhost:3000` (main marketing site):** Check logs for `Hostname`, `isMainDomain`, and the "bypassing tenant DB check" message.
    *   **Access `http://mg.localhost:3000` (valid tenant subdomain - for your existing project):** Check logs for `Hostname`, `isMainDomain`, `Extracted Subdomain`, `Connection URL from Redis`, and "Connection URL found" or "No connection URL found" messages.
    *   **Access `http://random-subdomain.localhost:3000` (invalid tenant subdomain):** Check the same logs as above.
    *   **Access `http://your-production-domain.com` (if you have a production domain set up in `.env.local`):** Check logs to ensure it's correctly identified as the main domain.

**Analyzing the Logs:**

After testing each scenario, please provide the server console output for each one.  Pay close attention to the values of `isMainDomain` and `Connection URL from Redis`.  This will give us a clear picture of why the middleware is behaving the way it is and where the logic is going wrong.

Once we have these detailed logs, we can accurately diagnose the issue and refine the `tenantMiddleware` logic to correctly handle main domains, valid tenant subdomains, and invalid tenant subdomains in both `localhost` and production environments.

---

_**User**_

here are the logs 
 Server  Hostname: localhost:3000
layout.tsx:36  Server  NEXT_PUBLIC_APP_URL: http://localhost:3000
layout.tsx:37  Server  isMainDomain: false
layout.tsx:53  Server  NOT on main domain

---

_**Assistant**_

Okay, the logs for `http://localhost:3000` indicate that `isMainDomain` is incorrectly evaluated as `false`. Let's simplify the `isMainDomain` check and add more basic logging as discussed.

Here are the edits to `apps/app/app/middleware/tenant-middleware.ts`:

{{ Simplify isMainDomain check and add basic logs for localhost debugging }}
````language:apps/app/app/middleware/tenant-middleware.ts
// apps/app/middleware/tenant.ts
import { NextResponse, type NextRequest } from 'next/server';
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/queries/tenant-lookup';
import { createTenantConnection } from '@repo/database/src/tenant-app/tenant-connection-db';
import * as schema from '@repo/database/src/tenant-app/schema';  // Import your tenant schema
import { env } from '@/env'; // Your environment variable utility

// Extend NextRequest to store the tenant Drizzle client as "tenantDb"
declare module 'next/server' {
  interface NextRequest {
    tenantDb?: ReturnType<typeof createTenantConnection>;
  }
}

export async function tenantMiddleware(req: NextRequest) {
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  // --- Simplified isMainDomain check for debugging ---
  console.log("Tenant Middleware - Hostname (before check):", hostname); // Log hostname before check
  console.log("Tenant Middleware - String 'localhost:3000' (before check):", 'localhost:3000'); // Log string literal
  const isMainDomain = hostname === 'localhost:3000'; // Simplified check
  console.log("Tenant Middleware - isMainDomain (simplified):", isMainDomain); // Log simplified isMainDomain

  // --- Original isMainDomain check (commented out) ---
  // const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
  // const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000';


  const isStaticAsset =
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.startsWith('/static');

  if (isMainDomain || isStaticAsset) {
    console.log("Tenant Middleware - isMainDomain (simplified) is true or isStaticAsset is true - bypassing tenant DB check"); // Log bypass message
    return NextResponse.next(); // Proceed without tenant DB setup
  }

  // Extract the subdomain from the hostname (e.g. "tenant-a" from "tenant-a.lavel.ai")
  let subdomain = '';
  if (hostname !== 'localhost:3000') {
    subdomain = hostname.split('.')[0];
  }
  console.log("Tenant Middleware - Extracted Subdomain:", subdomain); // Log subdomain

  const connectionUrl = await getTenantConnectionUrl(subdomain); // Uses Redis caching
  console.log("Tenant Middleware - Connection URL from Redis:", connectionUrl); // Log connectionUrl

  if (!connectionUrl) {
    console.log("Tenant Middleware - No connection URL found - Redirecting to main domain"); // Log no connection URL
    // Tenant not found, redirect to the main domain (or a 404 page)
    return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL));
  } else {
    console.log("Tenant Middleware - Connection URL found - Proceeding to connect to tenant DB"); // Log connection URL found
  }


  try {
    // Use the dedicated connection helper, passing in the tenant schema.
    // Casting schema as any helps resolve type mismatches.
    const tenantDb = createTenantConnection(connectionUrl, schema);
    req.tenantDb = tenantDb; // Attach the client to the request
    console.log("Tenant Middleware - Tenant DB connection established"); // Log DB connection success

    return NextResponse.next();
  } catch (error) {
    console.error('Tenant middleware error (DB connection):', error);
    console.log("Tenant Middleware - Tenant DB connection error - Returning 500"); // Log DB connection error
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
````

**Explanation of Edits:**

1.  **Simplified `isMainDomain` check:**
    ```diff
    - const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
    - const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000';
    + // --- Simplified isMainDomain check for debugging ---
    + console.log("Tenant Middleware - Hostname (before check):", hostname); // Log hostname before check
    + console.log("Tenant Middleware - String 'localhost:3000' (before check):", 'localhost:3000'); // Log string literal
    + const isMainDomain = hostname === 'localhost:3000'; // Simplified check
    + console.log("Tenant Middleware - isMainDomain (simplified):", isMainDomain); // Log simplified isMainDomain
    ```
    *   We've commented out the original `isMainDomain` check.
    *   The new `isMainDomain` check is simply `hostname === 'localhost:3000'`.
    *   We've added `console.log` statements immediately before and after this simplified check to inspect the values.

**Testing Steps:**

1.  **Save `apps/app/app/middleware/tenant-middleware.ts`.**
2.  **Restart your development server.**
3.  **Access `http://localhost:3000` again and carefully examine the server console logs.**

**Analyze the New Server Console Logs:**

After accessing `http://localhost:3000`, please provide the *complete* server console output, especially the lines related to:

*   `Tenant Middleware - Hostname (before check):`
*   `Tenant Middleware - String 'localhost:3000' (before check):`
*   `Tenant Middleware - isMainDomain (simplified):`

With these logs, we should be able to see the exact values being compared and finally understand why `isMainDomain` is not behaving as expected for `localhost:3000`. Let's get to the bottom of this!

---

_**User**_

i think we are still in the wrong if our middleware was supposdley working we would do a search of the user in our db @tenant-lookup.ts 
we are not getting an url connection cause we are assuming that the users will always use the subdomain to login when thats not really the case. 

a user most of the times will go trhough the sign-in btn and then input credentials, for that reason instead of doing sub domain we need to do the clerk id. from what i read in our @tenant-middleware.ts we are retrieving the subdomain to look for the tenant connedction 

Server  Hostname: localhost:3000
layout.tsx:36  Server  NEXT_PUBLIC_APP_URL: http://localhost:3000
layout.tsx:37  Server  isMainDomain: false
layout.tsx:53  Server  NOT on main domain

---

_**Assistant**_



---



---

================
File: .specstory/history/multi-database-approach-analysis-and-testing.md
================
## SpecStory

## Multi-Database Approach Analysis and Testing (2/7/2025, 10:49:13 AM)

_**User**_

we have been working in an approach where we have a multi database approach. 

here is a plan we came up with and want to make an analysis of each of the components. in another repo we tested this implementation but was failing and want to go one by one so that we actually do it right. 

lets first take a look at the step 1. 

and lets test that it actually wroks

@tenant-lookup.ts here is the file we have created

---

_**Assistant**_

Okay, let's break down Step 1 and analyze the `getTenantConnectionUrl` function in `@repo/database/src/tenant-app/tenant-lookup.ts`.

**Analysis of `getTenantConnectionUrl`**

The function `getTenantConnectionUrl` is designed to retrieve a tenant's database connection URL based on the subdomain. Here's a breakdown of its logic:

1.  **Cache Check:** It first checks an in-memory cache (`tenantConnectionCache`) to see if the connection URL for the given subdomain is already stored. If found, it returns the cached URL directly. This is a good optimization to avoid redundant database queries.

2.  **Database Lookup (Organization):** If the connection URL is not in the cache, it queries the `organizations` table in the **main application database** (using `db` which is assumed to be the main app DB client). It searches for an organization with a `slug` that matches the provided `subdomain`.

3.  **Organization Check:** If no organization is found for the given subdomain, it returns `null`, indicating that the tenant could not be identified.

4.  **Database Lookup (Project):** If an organization is found, it then queries the `projects` table, again in the **main application database**. It looks for a project associated with the found `organization.id`. It specifically selects the `connectionUrl` from the `projects` table.

5.  **Connection URL Retrieval:** It extracts the `connectionUrl` from the found project (if a project is found). If no project is found or the project doesn't have a `connectionUrl`, `connectionUrl` will be `null`.

6.  **Cache Update:** If a `connectionUrl` is successfully retrieved (and is not null), it's stored in the `tenantConnectionCache` for future lookups using the same subdomain.

7.  **Return Connection URL:** Finally, it returns the retrieved `connectionUrl` (which might be `null` if no tenant was found or no connection URL was associated).

8.  **Error Handling:** The entire process is wrapped in a `try...catch` block to handle potential errors during database queries. If an error occurs, it logs the error to the console and returns `null`.

**Potential Issues and Considerations**

*   **Cache Invalidation:** The current cache is a simple in-memory cache.  If the connection URL for a tenant changes in the database, the cache will not be automatically invalidated. You'll need to manually clear the cache using `clearTenantConnectionCache` or `clearAllTenantConnectionCaches`. This might be acceptable depending on how frequently connection URLs are expected to change.
*   **Error Handling Granularity:** The `catch` block is quite generic. For debugging purposes, it might be helpful to log more specific error information (e.g., the type of error, the subdomain being looked up).
*   **Case Sensitivity:**  Database queries might be case-sensitive depending on your database setup. If subdomains are intended to be case-insensitive, you might need to ensure that the `slug` comparison is also case-insensitive (either in the database schema or in the query itself).
*   **Assumptions:** The code assumes:
    *   `db` is correctly initialized and connected to the main application database.
    *   The `organizations` and `projects` tables exist in the main application database with the expected columns (`slug`, `id`, `organizationId`, `connectionUrl`).
    *   There's a one-to-many relationship between `organizations` and `projects` (or at least one project per organization that holds the connection URL).

**Testing Strategy for Step 1**

To ensure `getTenantConnectionUrl` works correctly, we should implement unit tests that cover various scenarios. Here are some test cases to consider:

1.  **Successful Lookup (Cache Miss then Cache Hit):**
    *   **Scenario:**  Test retrieving a connection URL for a valid subdomain that is not initially in the cache. Then, test retrieving it again to verify the cache hit.
    *   **Mock:** Mock the database queries to return:
        *   For the first call: an organization and a project with a valid `connectionUrl`.
        *   For the second call:  Ensure no database queries are made (or if they are, they are mocked to return the same result).
    *   **Verify:**
        *   The first call returns the correct `connectionUrl`.
        *   The `tenantConnectionCache` is populated after the first call.
        *   The second call returns the same `connectionUrl` and is faster (if you can measure performance) or doesn't trigger database queries.

2.  **Organization Not Found:**
    *   **Scenario:** Test with a subdomain that does not correspond to any organization in the database.
    *   **Mock:** Mock the database query for `organizations.findFirst` to return `undefined` or `null`.
    *   **Verify:** The function returns `null`.

3.  **Project Not Found (or Project without `connectionUrl`):**
    *   **Scenario:** Test with a valid subdomain (organization exists) but no associated project or the project exists but has a `null` or empty `connectionUrl`.
    *   **Mock:** Mock the database queries to return:
        *   Organization found.
        *   For `projects.findFirst`: return `undefined`, `null`, or a project object with `connectionUrl: null`.
    *   **Verify:** The function returns `null`.

4.  **Database Error during Organization Lookup:**
    *   **Scenario:** Simulate a database error when querying the `organizations` table.
    *   **Mock:** Mock `db.query.organizations.findFirst` to throw an error.
    *   **Verify:** The function catches the error, logs it (you can verify the log output), and returns `null`.

5.  **Database Error during Project Lookup:**
    *   **Scenario:** Simulate a database error when querying the `projects` table (after successfully finding an organization).
    *   **Mock:** Mock `db.query.projects.findFirst` to throw an error.
    *   **Verify:** The function catches the error, logs it, and returns `null`.

6.  **Cache Clearing:**
    *   **Scenario:** Test `clearTenantConnectionCache` and `clearAllTenantConnectionCaches`.
    *   **Setup:**
        *   Call `getTenantConnectionUrl` for a subdomain to populate the cache.
        *   Verify the connection URL is cached.
        *   Call `clearTenantConnectionCache` for that subdomain or `clearAllTenantConnectionCaches`.
    *   **Verify:**
        *   After clearing, calling `getTenantConnectionUrl` again for the same subdomain results in a cache miss (it should perform database queries again).

**Next Steps**

To proceed with testing Step 1, you would need to:

1.  **Set up a testing environment:**  This might involve using a testing framework like Jest (if you are using JavaScript/TypeScript) and a mocking library to mock database interactions.
2.  **Write unit tests:** Implement the test cases outlined above, mocking the `db.query.organizations.findFirst` and `db.query.projects.findFirst` functions to simulate different scenarios and verify the behavior of `getTenantConnectionUrl`.

Would you like me to help you outline the structure of these unit tests or perhaps provide example code snippets for mocking and testing in a specific testing framework? Let me know what would be most helpful!

---

_**User**_

for the tests we can follow the documentation in @Nextforge for our mono repo they have an specific package for tests, i think we need to add vitest to the package 

---

_**Assistant**_

Okay, let's get started with setting up unit tests for `getTenantConnectionUrl` using Vitest, following the Next-Forge approach.

**Step 1: Install Vitest and Testing Library in `@repo/database`**

First, we need to add Vitest and Testing Library (if needed for your tests, though for backend utility functions like `getTenantConnectionUrl`, you might primarily need Vitest itself for assertions and mocking) as development dependencies to your `@repo/database` package.

{{ Install Vitest and testing libraries }}
```language:terminal
pnpm add -D vitest @testing-library/react @testing-library/dom --filter @repo/database
```
*(Note: `@testing-library/react` and `@testing-library/dom` are often used for React component testing. For backend utility functions, you might only strictly need `vitest`. However, including them now is harmless and might be useful if you decide to add tests for React components within your database package later, or if you use utilities from these libraries for DOM manipulation in your tests.)*

**Step 2: Configure Vitest in `@repo/database`**

Create a `vitest.config.ts` file in the root of your `@repo/database` package.  According to the Next-Forge documentation, you can leverage a shared testing configuration. Let's assume you have a shared testing config in `@repo/testing`. If you don't have `@repo/testing` set up yet, you can create a basic Vitest configuration directly in `@repo/database` for now and refactor later if needed.

**If you have `@repo/testing` (like Next-Forge):**

{{ Create `vitest.config.ts` in `@repo/database` using shared config }}
```language:packages/database/vitest.config.ts
export { default } from '@repo/testing';
```

**If you don't have `@repo/testing` yet (basic config for now):**

{{ Create `vitest.config.ts` in `@repo/database` with basic config }}
```language:packages/database/vitest.config.ts
import { defineConfig } from 'vitest'

export default defineConfig({
  test: {
    environment: 'node', // Or 'jsdom' if you are testing code that uses DOM APIs
  },
})
```

**Step 3: Add a `test` script to `@repo/database/package.json`**

Open `packages/database/package.json` and add a `test` script to the `scripts` section:

{{ Add test script to `package.json` }}
```language:packages/database/package.json
{
  "name": "@repo/database",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./*": "./src/*.ts"
  },
  "dependencies": {
    "@neondatabase/serverless": "^0.6.0",
    "@repo/env": "workspace:*",
    "drizzle-orm": "^0.29.3"
  },
  "devDependencies": {
    "@repo/testing": "workspace:*",
    "@testing-library/dom": "^10.1.0",
    "@testing-library/react": "^14.2.1",
    "@types/node": "^20.11.16",
    "drizzle-kit": "^0.20.14",
    "typescript": "^5.3.3",
    "vitest": "^1.2.2"
  },
  "scripts": {
    "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist",
    "lint": "eslint . --ext .ts --fix",
    "test": "vitest"  {{ Add this line }}
  },
  "eslintConfig": {
    "root": true,
    "extends": [
      "@repo/eslint-config/base"
    ],
    "parserOptions": {
      "project": "./tsconfig.json"
    }
  }
}
```

**Step 4: Create a test file and write unit tests**

1.  **Create `__tests__` directory:** Inside `packages/database/src/tenant-app`, create a directory named `__tests__`.
2.  **Create test file:** Inside `__tests__`, create a file named `tenant-lookup.test.ts` (or `.tsx` if you are testing React components).
3.  **Write tests:**  Now, you can write your unit tests in `tenant-lookup.test.ts`. Here's an example of how you might structure your tests using Vitest and mocking (using `vi.mock` and `vi.fn` from Vitest):

{{ Example test file `tenant-lookup.test.ts` }}
```language:packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts
import { getTenantConnectionUrl, clearTenantConnectionCache, clearAllTenantConnectionCaches } from '../tenant-lookup';
import { db } from '../../main-app/db'; // Assuming this is where your main db client is

// Mock the database client to control its behavior in tests
vi.mock('../../main-app/db', () => {
    const mockDb = {
        query: {
            organizations: {
                findFirst: vi.fn(),
            },
            projects: {
                findFirst: vi.fn(),
            },
        },
    };
    return { db: mockDb };
});

describe('getTenantConnectionUrl', () => {
    afterEach(() => {
        vi.clearAllMocks(); // Reset mocks after each test
        clearAllTenantConnectionCaches(); // Clear cache after each test
    });

    it('should return connection URL from cache on second call', async () => {
        const subdomain = 'test-tenant';
        const mockConnectionUrl = 'test-connection-url';

        // Mock database to return a connection URL for the first call
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });

        // First call - should fetch from DB and cache
        const url1 = await getTenantConnectionUrl(subdomain);
        expect(url1).toBe(mockConnectionUrl);
        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(1);
        expect(db.query.projects.findFirst).toHaveBeenCalledTimes(1);

        // Reset mock call counts
        vi.clearAllMocks();

        // Second call - should fetch from cache
        const url2 = await getTenantConnectionUrl(subdomain);
        expect(url2).toBe(mockConnectionUrl);
        // Database should NOT be called again
        expect(db.query.organizations.findFirst).not.toHaveBeenCalled();
        expect(db.query.projects.findFirst).not.toHaveBeenCalled();
    });

    it('should return connection URL if found in database and cache it', async () => {
        const subdomain = 'test-tenant';
        const mockConnectionUrl = 'test-connection-url';

        // Mock database to return organization and project
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBe(mockConnectionUrl);
        expect(db.query.organizations.findFirst).toHaveBeenCalledWith(expect.objectContaining({
            where: expect.any(Function), // You can be more specific if needed
            columns: { id: true }
        }));
        expect(db.query.projects.findFirst).toHaveBeenCalledWith(expect.objectContaining({
            where: expect.any(Function),
            columns: { connectionUrl: true }
        }));
    });

    it('should return null if organization is not found', async () => {
        const subdomain = 'non-existent-tenant';

        // Mock database to return no organization
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce(undefined);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(db.query.projects.findFirst).not.toHaveBeenCalled(); // Project query should not be called
    });

    it('should return null if project is not found', async () => {
        const subdomain = 'tenant-without-project';

        // Mock database to return organization but no project
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce(undefined);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(db.query.projects.findFirst).toHaveBeenCalled();
    });

    it('should return null and log error if database query fails', async () => {
        const subdomain = 'error-tenant';
        const mockError = new Error('Database error');
        const consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {}); // Spy on console.error

        // Mock database to throw an error
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockRejectedValueOnce(mockError);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(console.errorSpy).toHaveBeenCalledWith("Error looking up tenant connection URL:", mockError);

        consoleErrorSpy.mockRestore(); // Restore console.error
    });

    it('should clear cache for a specific subdomain', async () => {
        const subdomain = 'tenant-to-clear';
        const mockConnectionUrl = 'cached-connection-url';

        // Populate the cache
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });
        await getTenantConnectionUrl(subdomain);

        // Clear cache for the subdomain
        clearTenantConnectionCache(subdomain);

        // Next call should be a cache miss and fetch from DB again
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-connection-url' }); // Different URL

        const urlAfterClear = await getTenantConnectionUrl(subdomain);
        expect(urlAfterClear).toBe('new-connection-url'); // Should get the new URL from DB
        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(1); // DB should be queried again
    });

    it('should clear all tenant connection caches', async () => {
        const subdomain1 = 'tenant-1';
        const subdomain2 = 'tenant-2';
        const mockConnectionUrl1 = 'cached-url-1';
        const mockConnectionUrl2 = 'cached-url-2';

        // Populate cache for two subdomains
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-1' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl1 });
        await getTenantConnectionUrl(subdomain1);
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-2' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl2 });
        await getTenantConnectionUrl(subdomain2);


        // Clear all caches
        clearAllTenantConnectionCaches();

        // Next calls should be cache misses
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-1' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-url-1' });
        await getTenantConnectionUrl(subdomain1);
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-2' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-url-2' });
        await getTenantConnectionUrl(subdomain2);


        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(2); // DB should be queried again for both
    });
});
```

**Step 5: Run the tests**

You can run the tests from the root of your monorepo using:

```language:terminal
pnpm test --filter @repo/database
```

Or, you can navigate to the `@repo/database` package directory in your terminal and run:

```language:terminal
pnpm test
```

Vitest will run the tests defined in your `tenant-lookup.test.ts` file and report the results.

Let me know if you encounter any issues or have further questions as you set up these tests!

---

_**User**_

ok i had to miove it to the root of the package the tests here are the sesults of  running it 

@tenant-lookup.ts @vitest.config.ts 
pnpm test --filter @repo/database

> next-forge@3.2.20 test /Users/dmgpro/Desktop/lavel-ai
> turbo test --filter \@repo/database

turbo 2.4.0

• Packages in scope: @repo/database
• Running test in 1 packages
• Remote caching disabled

No tasks were executed as part of this run.

 Tasks:    0 successful, 0 total
Cached:    0 cached, 0 total
  Time:    99ms 


---

_**Assistant**_

It seems like Vitest is not finding your tests. This could be due to a few reasons. Let's try to diagnose and fix it step-by-step.

**1. Verify `vitest.config.ts` in `@repo/database`**

You mentioned you are using `@repo/testing`. Let's ensure your `vitest.config.ts` in `@repo/database` is correctly set up to use it.

{{ Ensure correct `vitest.config.ts` in `@repo/database` }}
```typescript:packages/database/vitest.config.ts
export { default } from '@repo/testing';
```

This looks correct based on what you've shown.  However, it's possible the issue lies within the `@repo/testing` package itself.

**2. Check `@repo/testing` Configuration (If Accessible)**

If you have access to the code in `@repo/testing` (or `@repo/testing/index.ts` if that's the entry point), please check its contents.  We need to see how it configures Vitest.  Specifically, look for:

*   **`testDir`**:  Does it specify where Vitest should look for tests? If it's set to a specific directory that doesn't include `packages/database/src`, that could be the problem.
*   **`include` / `exclude`**: Are there any `include` or `exclude` patterns that might be preventing Vitest from finding your tests in `@repo/database/src`?
*   **`root`**:  The `root` configuration option in Vitest can affect how paths are resolved.

If you can share the contents of your `@repo/testing` config, that would be helpful.

**3. Explicitly Set `testDir` in `@repo/database/vitest.config.ts` (If `@repo/testing` is the issue)**

If we suspect `@repo/testing` is not correctly configured for your project structure, we can try overriding its configuration by explicitly setting `testDir` in your `@repo/database/vitest.config.ts`.

{{ Modify `vitest.config.ts` in `@repo/database` to explicitly set `testDir` }}
```typescript:packages/database/vitest.config.ts
import { defineConfig } from 'vitest'
import sharedConfig from '@repo/testing'; // Assuming `@repo/testing` exports a default config

export default defineConfig({
  ...sharedConfig, // Inherit configurations from `@repo/testing`
  test: {
    ...sharedConfig.test, // Inherit test options as well
    testDir: './src', // Explicitly tell Vitest to look for tests in the 'src' directory
  },
})
```

**Explanation:**

*   We import the shared config from `@repo/testing`.
*   We use `defineConfig` and spread the `sharedConfig` to inherit its settings.
*   We then specifically set `test.testDir: './src'` to tell Vitest to look for tests within the `src` directory of the `@repo/database` package. This should ensure it finds your `__tests__` directory within `src/tenant-app`.

**4. Verify Test File Location and Naming (Again)**

Double-check that your test file is indeed located at:

`packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts`

And that the file name ends with `.test.ts` or a similar recognized test extension (like `.spec.ts`, `.test.tsx`, `.spec.tsx`, etc.).

**5. Run Tests Again**

After making these adjustments to your `vitest.config.ts` (if needed), try running the tests again:

```bash
pnpm test --filter @repo/database
```

or from within the `@repo/database` directory:

```bash
pnpm test
```

**If it still doesn't work, please provide the following information:**

*   **Content of `@repo/testing/index.ts` (or relevant config files in `@repo/testing`)**: This will help us understand how the shared testing configuration is set up.
*   **Output of `pnpm test --filter @repo/database` (again)**:  Even if it says "No tasks were executed", paste the full output in case there are any subtle error messages we missed.
*   **File structure of your `@repo/database` package**: A tree view or a list of files and directories within `@repo/database` would be helpful to confirm the test file location.

With more information, we can further diagnose why Vitest is not discovering your tests. Let's start by trying to explicitly set `testDir` in `vitest.config.ts` as shown in step 3 and see if that resolves the issue.

---

_**User**_

For the code present, we get this error:
```
Module '"vitest"' has no exported member 'defineConfig'.
```
How can I resolve this? If you propose a fix, please make it concise.

---

_**Assistant**_

You are right, the error `Module '"vitest"' has no exported member 'defineConfig'` indicates an issue with how `defineConfig` is being imported from `vitest`.

**Concise Fix:**

Ensure you are importing `defineConfig` correctly from the `vitest` package. The standard import is a named import:

{{ Correct the import in `vitest.config.ts` }}
```typescript:packages/database/vitest.config.ts
import { defineConfig } from 'vitest'; // <-- Correct import

import sharedConfig from '@repo/testing';

export default defineConfig({
  ...sharedConfig,
  test: {
    ...sharedConfig.test,
    testDir: './src',
  },
});
```

**Explanation:**

The error message directly points to the import statement.  By using `{ defineConfig }` in the `import` statement, you are specifically importing the `defineConfig` *named export* from the `vitest` module.

If you had previously tried a default import like `import defineConfig from 'vitest'`, that would be incorrect because `defineConfig` is a named export, not a default export of the `vitest` package.

Make this correction in your `packages/database/vitest.config.ts` and the TypeScript error should be resolved. After this, try running your tests again with `pnpm test --filter @repo/database`.

---

_**User**_

For the code present, we get this error:
```
No overload matches this call.
  The last overload gave the following error.
    Object literal may only specify known properties, and 'testDir' does not exist in type 'InlineConfig'.
```
How can I resolve this? If you propose a fix, please make it concise.

---

_**Assistant**_

The error "Object literal may only specify known properties, and 'testDir' does not exist in type 'InlineConfig'" means that the `defineConfig` function from `vitest/config` is expecting a configuration object (`InlineConfig`) that does not include the `testDir` property directly under the `test` key.

**Concise Fix:**

Move `testDir` to be directly under the root configuration object, not nested within `test`.

{{ Move `testDir` to the root of `defineConfig` }}
```typescript:packages/database/vitest.config.ts
import { defineConfig } from 'vitest/config';
import sharedConfig from '@repo/testing';

export default defineConfig({
  ...sharedConfig,
  testDir: './src', // testDir moved to the root level
  test: {
    ...sharedConfig.test, // Keep other test configurations
  },
});
```

**Explanation:**

In Vitest's configuration, `testDir` is a top-level configuration option, not a property nested inside the `test` object. By moving `testDir: './src'` outside the `test: { ... }` block, you are placing it in the correct location within the `defineConfig` structure, which should resolve the TypeScript error.

After making this change, try running your tests again. If the error persists, or if you encounter new errors, please provide the content of your `@repo/testing` configuration file for further diagnosis.

---

_**User**_

For the code present, we get this error:
```
No inputs were found in config file '/Users/dmgpro/Desktop/lavel-t/packages/testing/tsconfig.json'. Specified 'include' paths were '["./src/*.tsx"]' and 'exclude' paths were '["node_modules"]'.
```
How can I resolve this? If you propose a fix, please make it concise.

---

_**Assistant**_

The error message "No inputs were found..." in `packages/testing/tsconfig.json` means the TypeScript compiler can't find any files matching the `include` paths you've specified.

**Concise Fix:**

Remove the `include` and `exclude` lines from `packages/testing/tsconfig.json`. If `@repo/testing` is meant to provide shared configurations, it might not need to compile any `.tsx` files itself.

{{ Remove `include` and `exclude` from `tsconfig.json` }}
```json:packages/testing/tsconfig.json
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  }
  {{ REMOVE these lines: }}
  // "include": ["./src/*.tsx"],
  // "exclude": ["node_modules"]
}
```

**Explanation:**

By removing `include` and `exclude`, you let TypeScript use its default file inclusion behavior, which might be sufficient for a configuration package like `@repo/testing`. If `@repo/testing` *is* supposed to compile specific files, you'll need to adjust the `include` path to correctly point to those files. However, if it's just for shared config, removing these lines is the simplest and likely correct fix.

---

_**User**_

ok lets start checking our results, dont go ahead and start making changes first lets make an analysis of what was the test about and where did it failed and why 

---

_**Assistant**_

Okay, let's analyze the test failure.

**Error Breakdown:**

The key part of the error message is:

```
Error: This module cannot be imported from a Client Component module. It should only be used from a Server Component.
Error: This module cannot be imported from a Client Component module. It should only be used from a Server Component.
 ❯ Object.<anonymous> ../../node_modules/.pnpm/server-only@0.0.1/node_modules/server-only/index.js:1:7
```

This error is explicitly thrown by the `server-only` package.  It's designed to prevent server-side code from being accidentally bundled into client-side JavaScript in Next.js applications.

**Why is `server-only` being triggered in a Vitest test?**

Even though Vitest is running in a Node.js environment, the `server-only` package seems to be detecting a context it considers invalid. Here's why this might be happening and how to investigate:

1.  **`server-only` Usage in Dependencies:**  The most probable cause is that one of the modules your test code imports (directly or indirectly) is using `server-only`. Let's trace the imports:

    *   **`packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts`**:
        ```typescript
        import { getTenantConnectionUrl, clearTenantConnectionCache, clearAllTenantConnectionCaches } from '../tenant-lookup';
        import { db } from '../../main-app/db'; // Mocked in the test
        ```
        Imports `getTenantConnectionUrl` from `../tenant-lookup` and `db` from `../../main-app/db` (which is mocked).

    *   **`packages/database/src/tenant-app/tenant-lookup.ts`**:
        ```typescript
        import { db } from '../main-app/db';
        // ... rest of the file
        ```
        Imports `db` from `../main-app/db`.

    *   **`packages/database/src/main-app/db.ts`**:  *(We need to examine this file)* This is likely where the `server-only` import is happening, or in one of *its* dependencies.

2.  **`db` Client Initialization:**  The `db` client in `packages/database/src/main-app/db.ts` is likely where you initialize your Drizzle ORM client and connect to the database. Database clients and connection logic are inherently server-side. It's possible that the `server-only` package is being used (or should be used) within this `db.ts` file to ensure it's not accidentally used in client components.

**Let's examine `packages/database/src/main-app/db.ts`:**

Please open and share the contents of `packages/database/src/main-app/db.ts`.  We need to look for:

*   **`import "server-only"`**: Is `server-only` directly imported in this file?
*   **Imports of other modules**: What other modules are imported in `db.ts`?  One of *those* modules might be using `server-only`.
*   **Database Client Initialization Code**: How is the Drizzle client initialized? Are there any configurations or dependencies used in the initialization that might be related to server-side contexts?

Once we see the contents of `packages/database/src/main-app/db.ts`, we can pinpoint where `server-only` is being used (or should be used) and understand why it's causing an issue in your tests.

**Example Scenario:**

Let's imagine `packages/database/src/main-app/db.ts` looks something like this:

```typescript
// packages/database/src/main-app/db.ts
import "server-only"; // <--- Hypothetical server-only import

import { drizzle } from 'drizzle-orm/neon-http';
import { neon, neonConfig } from '@neondatabase/serverless';

neonConfig.fetchConnectionCache = true;

const client = neon(process.env.DATABASE_URL!); // Accessing environment variables (server-side)
export const db = drizzle(client);
```

In this hypothetical example, if `server-only` is imported in `db.ts`, and your test environment is somehow not being recognized as a server environment by `server-only` (though Vitest *should* be Node.js), then you would get the error you are seeing when you import `db` in your test file.

Let's take a look at your `db.ts` file to confirm if this is the case or to find the actual source of the `server-only` trigger.

---

_**User**_

ok perfect now here it is the @db.ts and the @keys.ts @index.ts @index.ts 

---

_**Assistant**_

Okay, after reviewing the code, especially `db.ts` and `keys.ts`, and considering the error message, the most likely cause is indeed related to `@t3-oss/env-nextjs` and its potential internal use of `server-only`.

**The Problem:**

`@t3-oss/env-nextjs` is designed to be used in Next.js environments, and it might have dependencies or internal checks that rely on server-side context. When Vitest runs, even though it's Node.js, it might not fully replicate the Next.js server environment that `@t3-oss/env-nextjs` expects, leading to the `server-only` error being triggered.

**The Solution: Mock `keys()` module in tests**

The most effective and targeted solution is to mock the `keys()` module in your test file (`packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts`). This will prevent the actual `keys()` function from running during your tests and bypass any code within `@t3-oss/env-nextjs` that might be triggering the `server-only` error.

Here's how you can modify your test file to mock the `keys` module:

{{ Mock `keys` module in `tenant-lookup.test.ts` }}
```typescript:packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts
import { getTenantConnectionUrl, clearTenantConnectionCache, clearAllTenantConnectionCaches } from '../tenant-lookup';
import { db } from '../../main-app/db'; // Still mock the db client itself

// Mock the keys module
vi.mock('../../keys', () => {
    return {
        keys: vi.fn(() => ({ // Mock the keys function
            DATABASE_URL: 'test_db_url', // Provide dummy values
            NEON_API_KEY: 'test_neon_api_key',
        })),
    };
});


// Mock the database client (as before)
vi.mock('../../main-app/db', () => {
    const mockDb = {
        query: {
            organizations: {
                findFirst: vi.fn(),
            },
            projects: {
                findFirst: vi.fn(),
            },
        },
    };
    return { db: mockDb };
});

describe('getTenantConnectionUrl', () => {
    afterEach(() => {
        vi.clearAllMocks();
        clearAllTenantConnectionCaches();
    });

    // ... your test cases ...
    it('should return connection URL from cache on second call', async () => { /* ... */ });
    it('should return connection URL if found in database and cache it', async () => { /* ... */ });
    it('should return null if organization is not found', async () => { /* ... */ });
    it('should return null if project is not found', async () => { /* ... */ });
    it('should return null and log error if database query fails', async () => { /* ... */ });
    it('should clear cache for a specific subdomain', async () => { /* ... */ });
    it('should clear all tenant connection caches', async () => { /* ... */ });
});
```

**Explanation of the Mock:**

*   **`vi.mock('../../keys', ...)`**: This line uses Vitest's `vi.mock` function to replace the actual `../../keys` module with a mock implementation.
*   **`return { keys: ... }`**: We are mocking the *module* `../../keys`, so we need to return an object that has the same exports as the original module. In this case, the original module exports a function named `keys`, so we provide a mock function for `keys`.
*   **`vi.fn(() => ({ ... }))`**: We use `vi.fn` to create a mock function for `keys()`. This mock function, when called, will return an object that simulates the expected output of the real `keys()` function.
*   **Dummy Environment Variables**: Inside the mock `keys()` function, we return an object with dummy values for `DATABASE_URL` and `NEON_API_KEY`. These dummy values are enough to allow `db.ts` to initialize without actually needing real environment variables or triggering the `server-only` error.

**After applying this change:**

Run your tests again:

```bash
pnpm test --filter @repo/database
```

This should resolve the `server-only` error and allow your unit tests for `getTenantConnectionUrl` to run successfully. Let me know if you still encounter issues after applying this mock!

---

_**User**_

ok instead of doing tests lets try it in a page in this @test.tsx no need to write the tests but how would we use this functions in a real case scenario 

---

_**Assistant**_

Okay, let's try using the `getTenantConnectionUrl` function in a Next.js page component (`test.tsx`). This will simulate a more realistic usage scenario.

Here's how you can modify `apps/web/app/(home)/components/test.tsx` to test `getTenantConnectionUrl`:

{{ Modify `test.tsx` to use `getTenantConnectionUrl` }}
```typescript:apps/web/app/(home)/components/test.tsx
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/tenant-lookup';
import { useEffect, useState } from 'react';

export default function TestTenantLookup() {
    const [connectionUrl, setConnectionUrl] = useState<string | null>(null);
    const [error, setError] = useState<any>(null);
    const testSubdomain = 'your-test-subdomain'; // Replace with a test subdomain in your database

    useEffect(() => {
        const fetchConnection = async () => {
            try {
                const url = await getTenantConnectionUrl(testSubdomain);
                setConnectionUrl(url);
            } catch (e) {
                setError(e);
                console.error("Error fetching connection URL:", e);
            }
        };

        fetchConnection();
    }, [testSubdomain]);

    return (
        <div>
            <h1>Test Tenant Lookup</h1>
            <p>Testing subdomain: <strong>{testSubdomain}</strong></p>
            {error ? (
                <div style={{ color: 'red' }}>
                    <p>Error:</p>
                    <pre>{JSON.stringify(error, null, 2)}</pre>
                </div>
            ) : (
                <div>
                    <p>Connection URL:</p>
                    <pre>{connectionUrl || 'Not found'}</pre>
                </div>
            )}
        </div>
    );
}
```

**Explanation of the changes:**

1.  **Import `getTenantConnectionUrl`**: We import the function from your `@repo/database` package.
2.  **`useState` for result and error**: We use React's `useState` hook to store the fetched connection URL and any potential errors.
3.  **`testSubdomain`**:  **Important:**  Replace `'your-test-subdomain'` with an actual subdomain that you have configured in your main application database (in the `organizations` table) for testing purposes. If you don't have a test subdomain set up yet, you'll need to create one in your database.
4.  **`useEffect` to fetch data**: We use `useEffect` to call `getTenantConnectionUrl` when the component mounts. This simulates fetching the connection URL on the server when the page is requested.
5.  **Error Handling**: We use a `try...catch` block to handle potential errors during the `getTenantConnectionUrl` call and display error information if something goes wrong.
6.  **Display Results**: We display the `connectionUrl` or "Not found" if the URL is null. If there's an error, we display the error details in red.

**To test this page:**

1.  **Run your Next.js development server**: If it's not already running, start it using `pnpm dev` from the root of your monorepo or from the `apps/web` directory.
2.  **Access the test page in your browser**: Navigate to the URL where this component is rendered.  If `apps/web/app/(home)/components/test.tsx` is directly in the `app/(home)` directory, you might be able to access it at `http://localhost:3000/test`. Check your Next.js routing setup to confirm the correct URL.
3.  **Observe the output**:
    *   **If the subdomain exists and is configured correctly**: You should see the database connection URL displayed on the page.
    *   **If the subdomain does not exist**: You should see "Not found" displayed as the connection URL.
    *   **If there's an error**: You'll see the error message displayed in red. Check the browser's console for more detailed error information.

This test in a Next.js page will give you a more practical view of how `getTenantConnectionUrl` works in a real application context. Remember to replace `'your-test-subdomain'` with a valid test subdomain in your database. Let me know what results you see!

---

_**User**_

ok here is where we need to take a close look to our approach @login-middleware-plan.md where are we gonna be using our @tenant-lookup.ts functions since this can cause errors for the server and client side. 

As of now the test we are trying to do is failing due to the Error: ❌ Attempted to access a server-side environment variable on the client

Lets analyze what we need to do first 

---

_**Assistant**_

You're right. Let's analyze where and how `tenant-lookup.ts` should be used according to the implementation plan, focusing on the server/client boundary.

**Analysis of `tenant-lookup.ts` Usage Based on Plan:**

1. **Where it SHOULD be used (Server-side only):**

   - **Middleware (`apps/app/middleware.ts`)**:
     ```typescript
     // This is server-side code
     export async function middleware(req: NextRequest) {
         const subdomain = // ... extract subdomain
         const connectionUrl = await getTenantConnectionUrl(subdomain);
         // ... setup tenant DB client
     }
     ```

   - **Server Components/Actions**:
     - API Routes
     - Server Components
     - Server Actions
     - Route Handlers

2. **Where it SHOULD NOT be used:**

   - **Client Components** (where we just tried to use it):
     - React Components with 'use client'
     - Event handlers
     - useEffect/useState hooks

3. **Current Issue in Our Test Approach:**
   ```typescript
   // apps/web/app/(home)/components/test.tsx
   // This is a client component trying to use server-only code
   export default function TestTenantLookup() {
       useEffect(() => {
           // ❌ This fails because getTenantConnectionUrl uses server-only env vars
           const url = await getTenantConnectionUrl(testSubdomain);
       }, []);
   }
   ```

**Correct Implementation Pattern:**

1. **Server Component for Tenant Data:**
```typescript:apps/web/app/(home)/components/tenant-info.tsx
// Server Component
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/tenant-lookup';

export async function TenantInfo({ subdomain }: { subdomain: string }) {
    const connectionUrl = await getTenantConnectionUrl(subdomain);
    
    // Pass only necessary data to client components
    return <TenantDisplay connectionStatus={!!connectionUrl} />;
}
```

2. **Client Component for Display:**
```typescript:apps/web/app/(home)/components/tenant-display.tsx
'use client';

export function TenantDisplay({ connectionStatus }: { connectionStatus: boolean }) {
    return (
        <div>
            <h1>Tenant Status</h1>
            <p>Connection: {connectionStatus ? 'Active' : 'Not Found'}</p>
        </div>
    );
}
```

3. **Page Component:**
```typescript:apps/web/app/(home)/tenant/page.tsx
import { TenantInfo } from '../components/tenant-info';

export default async function TenantPage({
    params: { subdomain }
}: {
    params: { subdomain: string }
}) {
    return (
        <div>
            <TenantInfo subdomain={subdomain} />
        </div>
    );
}
```

**Key Points from Analysis:**

1. `getTenantConnectionUrl` should ONLY be used in:
   - Middleware (for initial tenant identification)
   - Server Components
   - API Routes
   - Server Actions

2. The client should never directly access tenant connection information. Instead:
   - Server components should fetch tenant data
   - Pass only necessary, non-sensitive information to client components
   - Use server actions for any client-initiated operations that need tenant data

3. For testing:
   - Unit tests should mock environment variables and database calls
   - Integration tests should run in a server environment
   - E2E tests should use test databases and environments

Would you like me to provide more specific examples of any of these patterns or help modify the current implementation to follow this server-first approach?

---

_**User**_

this is great, now lets understand what we actaully want to test, dont rush in doing things lets analyze step by step. in our db we do have 1 record to test our use case, from what i understand our middleware would provide the parameters to search for right? 

so we need in order to do our simple test give the parameters perhaps the clerk user id. 

lets analayze this 

---

_**Assistant**_



You're right. Let's analyze what we're actually trying to test and what data we need.

**Current Database State:**
- We have 1 record in our database for testing
- This record should have:
  - An organization with a `slug` (subdomain)
  - A project associated with that organization containing a `connectionUrl`

**Flow Analysis from Plan:**

1. **Middleware Flow** (where `getTenantConnectionUrl` will be used):
```mermaid
graph LR
    A[Request] --> B[Extract Subdomain]
    B --> C[getTenantConnectionUrl]
    C --> D[DB Lookup]
    D --> E[Return Connection URL]
```

2. **Data Flow for Testing:**
```typescript
// What we have in DB:
{
  organizations: {
    id: string;
    slug: string;  // This is what we need for getTenantConnectionUrl
    // ...other fields
  }
  projects: {
    id: string;
    organizationId: string;
    connectionUrl: string;  // This is what getTenantConnectionUrl returns
    // ...other fields
  }
}
```

**What We Need to Test:**

1. **Basic Function Test:**
   ```typescript
   // Given: a subdomain that exists in our DB
   const subdomain = "existing-org-slug";
   
   // When: we call getTenantConnectionUrl
   const result = await getTenantConnectionUrl(subdomain);
   
   // Then: it should return the connection URL
   expect(result).toBe("expected-connection-url");
   ```

2. **Cache Test:**
   ```typescript
   // Given: same subdomain called twice
   const subdomain = "existing-org-slug";
   
   // When: we call getTenantConnectionUrl twice
   const result1 = await getTenantConnectionUrl(subdomain);
   const result2 = await getTenantConnectionUrl(subdomain);
   
   // Then: second call should use cache
   expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(1);
   ```

**Questions to Answer:**

1. Can you share what test data you have in your database? Specifically:
   - The `slug` of your test organization
   - The associated `connectionUrl` in the projects table

2. Do you want to:
   - Test against real database (integration test)
   - Or mock the database calls (unit test)

Based on your response, we can proceed with either:
1. Unit tests with mocked DB calls (safer, faster, more isolated)
2. Integration tests using your actual test data (more realistic but needs careful data management)

Which approach would you prefer to start with?

---

_**User**_

i want to test against real database, the slug that we habe is mg 

---

_**Assistant**_



Perfect, let's test against the real database with the "mg" slug. First, let's modify our test file to use the real database connection instead of mocks.

{{ Update test file to use real database }}
```typescript:packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts
import { describe, it, expect, beforeAll } from 'vitest';
import { getTenantConnectionUrl, clearTenantConnectionCache } from '../tenant-lookup';

describe('getTenantConnectionUrl Integration Tests', () => {
    const testSlug = 'mg';

    // Clear cache before tests
    beforeAll(() => {
        clearTenantConnectionCache(testSlug);
    });

    it('should find connection URL for existing tenant "mg"', async () => {
        const connectionUrl = await getTenantConnectionUrl(testSlug);
        
        // We expect a non-null result since 'mg' exists
        expect(connectionUrl).not.toBeNull();
        
        // Log the URL (for debugging, remove in production)
        console.log('Found connection URL:', connectionUrl);
        
        // Basic URL validation
        expect(typeof connectionUrl).toBe('string');
        expect(connectionUrl).toContain('postgres://');
    });

    it('should use cache on second call', async () => {
        // First call
        const firstCall = await getTenantConnectionUrl(testSlug);
        
        // Second call should be from cache
        const secondCall = await getTenantConnectionUrl(testSlug);
        
        // Both calls should return the same URL
        expect(secondCall).toBe(firstCall);
    });

    it('should return null for non-existent tenant', async () => {
        const nonExistentSlug = 'non-existent-tenant';
        const connectionUrl = await getTenantConnectionUrl(nonExistentSlug);
        
        expect(connectionUrl).toBeNull();
    });
});
```

**Key Points about this Test:**

1. **Real Database Connection:**
   - We're not mocking the database anymore
   - Using actual "mg" slug that exists in your database
   - Will test the real database queries

2. **Test Cases:**
   - Test existing tenant ("mg")
   - Test caching behavior
   - Test non-existent tenant

3. **Environment Variables:**
   - Make sure your test environment has access to the necessary environment variables (DATABASE_URL)

To run this test:

```bash
pnpm test --filter @repo/database
```

**Important Notes:**

1. **Environment Setup:**
   - Ensure your `.env` file in `packages/database` has the correct DATABASE_URL
   - The database user needs read access to both organizations and projects tables

2. **Security:**
   - The test logs the connection URL for debugging
   - Remove the console.log in production code
   - Make sure you're not exposing sensitive information in logs

Would you like to try running this test? We can then analyze the results and make any necessary adjustments based on what we see.

Also, it would be helpful to know:
1. Do you want to see the actual connection URL in the test output?
2. Should we add more specific validations for the connection URL format?
3. Would you like to add any other test cases specific to your use case?

---

_**User**_

ok we created the @page.tsx so that we actually make the test "online" 

---

_**Assistant**_



Yes, we have two different testing approaches now:

1. **Integration Tests** (new tests we just added):
   - Tests against real database with real "mg" slug
   - No mocking
   - Tests actual database queries and caching behavior

2. **Unit Tests** (existing tests with mocks):
   - Uses mocked database client
   - Tests function behavior in isolation
   - Useful for edge cases and error scenarios

However, before running the integration tests, we need to ensure:

1. **Environment Variables**: The test needs access to the main database. Let's create a `.env.test` file:

```typescript:packages/database/.env.test
DATABASE_URL=your_actual_database_url
```

2. **Test Setup**: We should modify the Vitest config to load these environment variables:

```typescript:packages/database/vitest.config.ts
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    env: {
      DATABASE_URL: process.env.DATABASE_URL,
    },
  },
});
```

3. **Data Prerequisites**: Let's verify the data we expect exists:
   ```sql
   -- Expected data in main database
   SELECT o.slug, p.connection_url 
   FROM organizations o
   JOIN projects p ON p.organization_id = o.id
   WHERE o.slug = 'mg';
   ```

Would you like me to:
1. Help set up the environment variables for testing?
2. Add logging to verify the database connection in the test?
3. Or should we first verify the data exists in the database?

Let me know which path you'd like to take first!

---

_**User**_

when i mean test i want to see it working in the page not running tests, with vitestet

---

_**Assistant**_



Ah, I understand now! You want to test the actual implementation in the Next.js page we created. Let's focus on that instead of the Vitest tests.

Let's review our page implementation and make sure it's set up correctly:

1. **Page Route Setup**
First, we need to ensure our page is accessible via a subdomain route. We should modify the page path:

```typescript:apps/web/app/[subdomain]/page.tsx
import { TenantInfo } from '../components/tenant-info';

// This page will be accessible at: http://mg.localhost:3000
export default async function TenantPage({
    params: { subdomain }
}: {
    params: { subdomain: string }
}) {
    console.log('Subdomain:', subdomain); // For debugging
    
    return (
        <div className="p-4">
            <h1 className="text-xl mb-4">Tenant Page: {subdomain}</h1>
            <TenantInfo subdomain={subdomain} />
        </div>
    );
}
```

2. **Update TenantInfo Component**
```typescript:apps/web/app/components/tenant-info.tsx
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/tenant-lookup';
import { TenantDisplay } from './tenant-display';

export async function TenantInfo({ subdomain }: { subdomain: string }) {
    console.log('Looking up tenant:', subdomain); // For debugging
    
    const connectionUrl = await getTenantConnectionUrl(subdomain);
    console.log('Connection found:', !!connectionUrl); // For debugging (don't log actual URL)
    
    return <TenantDisplay connectionStatus={!!connectionUrl} />;
}
```

3. **Test Steps:**

   a. Start your development server:
   ```bash
   pnpm dev
   ```

   b. Access the test URL:
   ```
   http://mg.localhost:3000
   ```

   c. Check the server console for the debug logs

4. **Debugging Tips:**
   - Watch the terminal for any server-side errors
   - Use the browser's developer tools to check for client-side errors
   - Check the Network tab in dev tools to see the page request
   - Look at the server logs for the debug messages we added

Would you like me to:
1. Add more detailed error handling to help debug issues?
2. Add more debugging logs?
3. Help set up local subdomain testing (like updating hosts file if needed)?

Let me know what you'd like to focus on first!

---



---

================
File: .specstory/history/multitenant-login-middleware-implementation-plan.md
================
## SpecStory

## Multitenant Login Middleware Implementation Plan (2/7/2025, 3:15:59 PM)

_**User**_

@login-middleware-plan.md we are working on our implementation plan for multitenant login. 

- we have done @tenant-lookup.ts and now we need to move to the next step, we will go step by step in order to get this done. 
- in step 2 we need to make modifications to the middleware, this is critical since this might break everyghting and we need to pay close attention to it. 

## Additional considerations
- we have @middleware.ts in our auth package this is just a wrapper of clerk middleware @clerkMiddleware.d.ts we do not want to modify this middleware since this comes from clerk directly. 
- @middleware.ts we have another middleware for the main website the marketing one, where users log in
- we also in the app have authenticated routes that follow this layout @layout.tsx 
and the root layout @layout.tsx 
- the design system provider has @index.tsx has an @provider.tsx from auth 

this are all the considerations not sure what we need to take into account. 



---

_**Assistant**_

I'll help you implement Step 2 of the plan - the Tenant Middleware implementation. Given the additional context, we need to be careful to:

1. Not modify the Clerk auth middleware directly
2. Properly integrate with the existing middleware chain
3. Ensure the tenant middleware runs before auth checks

Let's create the tenant middleware implementation:

First, let's create a new file for the tenant middleware:

```typescript:apps/app/middleware/tenant.ts
import { NextResponse, type NextRequest } from 'next/server';
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/tenant-lookup';
import { createClient } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import * as schema from '@repo/database/src/tenant-app/schema';

// Extend the NextRequest type to include our custom properties
declare module 'next/server' {
  interface NextRequest {
    tenantDb?: ReturnType<typeof drizzle>;
  }
}

export async function tenantMiddleware(req: NextRequest) {
  const hostname = req.headers.get('host');
  if (!hostname) {
    return new NextResponse('No hostname found', { status: 400 });
  }

  // Skip tenant check for main domain and static assets
  const isMainDomain = hostname === process.env.NEXT_PUBLIC_APP_URL?.replace('https://', '');
  const isStaticAsset = req.nextUrl.pathname.startsWith('/_next') || 
                        req.nextUrl.pathname.startsWith('/static');
  
  if (isMainDomain || isStaticAsset) {
    return NextResponse.next();
  }

  // Extract subdomain
  const subdomain = hostname.split('.')[0];
  
  try {
    const connectionUrl = await getTenantConnectionUrl(subdomain);
    
    if (!connectionUrl) {
      // Tenant not found - redirect to main domain or show error
      return NextResponse.redirect(new URL('/', process.env.NEXT_PUBLIC_APP_URL));
    }

    // Create tenant database client
    const sql = createClient({ connectionString: connectionUrl });
    const tenantDb = drizzle(sql, { schema });

    // Extend the request object with the tenant database client
    req.tenantDb = tenantDb;

    return NextResponse.next();
  } catch (error) {
    console.error('Tenant middleware error:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
```

Now, let's modify the main middleware file to incorporate the tenant middleware:

```typescript:apps/app/middleware.ts
import { env } from '@/env';
import { authMiddleware } from '@repo/auth/middleware';
import { parseError } from '@repo/observability/error';
import { secure } from '@repo/security';
import {
  noseconeMiddleware,
  noseconeOptions,
  noseconeOptionsWithToolbar,
} from '@repo/security/middleware';
import { NextResponse } from 'next/server';
import { tenantMiddleware } from './middleware/tenant';

export const config = {
  matcher: ['/((?!_next/static|_next/image|ingest|favicon.ico).*)'],
};

const securityHeaders = env.FLAGS_SECRET
  ? noseconeMiddleware(noseconeOptionsWithToolbar)
  : noseconeMiddleware(noseconeOptions);

// Compose middleware functions
export default authMiddleware(async (auth, request) => {
  // First, run tenant middleware
  const tenantResponse = await tenantMiddleware(request);
  
  // If tenant middleware returns a response (error/redirect), return it
  if (tenantResponse instanceof NextResponse) {
    return tenantResponse;
  }

  // Continue with security checks
  if (!env.ARCJET_KEY) {
    return securityHeaders();
  }

  try {
    await secure(
      [
        'CATEGORY:SEARCH_ENGINE',
        'CATEGORY:PREVIEW',
        'CATEGORY:MONITOR',
      ],
      request
    );

    return securityHeaders();
  } catch (error) {
    const message = parseError(error);
    return NextResponse.json({ error: message }, { status: 403 });
  }
});
```

Let's also create a utility to access the tenant database client:

```typescript:apps/app/utils/tenant-db.ts
import { NextRequest } from 'next/server';

export function getTenantDb(req: NextRequest) {
  if (!req.tenantDb) {
    throw new Error('Tenant database client not initialized. Make sure tenant middleware is running.');
  }
  return req.tenantDb;
}
```

This implementation:

1. Creates a dedicated tenant middleware that:
   - Checks the hostname and extracts the subdomain
   - Skips tenant checks for the main domain and static assets
   - Establishes a database connection for valid tenants
   - Attaches the tenant database client to the request object

2. Integrates with the existing middleware chain by:
   - Running before the auth middleware
   - Preserving the existing security and auth checks
   - Properly handling errors and redirects

3. Provides a utility function to safely access the tenant database client

Key considerations in this implementation:

- We're not modifying the Clerk auth middleware directly
- We maintain the existing security features
- We handle both main domain and subdomain scenarios
- We provide proper error handling and type safety
- We keep the middleware chain intact while adding tenant functionality

To use this in your application:

1. The tenant database client can be accessed in route handlers using the utility:
```typescript
import { getTenantDb } from '@/utils/tenant-db';

export async function GET(req: NextRequest) {
  const tenantDb = getTenantDb(req);
  // Use tenantDb to query the tenant's database
}
```

2. The middleware will automatically handle redirects for invalid tenants and ensure proper database connections for valid ones.

Would you like me to explain any part of this implementation in more detail?

---

_**User**_

ok i think we need to take a step back and reconsider, lets plan again, from what i get we are determining and calling the db upon the slug of the user, but we are not currently setting this anywhere.

As of now we have a simple login-flow, where the user logs in using clerk auth and gets redirected to the app. 

so the fact that we determine the queries to the db to get the url string from the slug doesnt actually make any sense, does it? 

---

_**Assistant**_

You make a very good point. Let's analyze the flow:

Current Flow:
1. User goes to main domain (e.g. lavel.ai)
2. User logs in through Clerk
3. User gets redirected to the app layout

What we want:
1. User goes to main domain (e.g. lavel.ai)
2. User logs in through Clerk
3. We look up their default organization
4. We redirect them to their tenant subdomain (e.g. tenant-a.lavel.ai)
5. Then tenant middleware kicks in to set up the correct database connection

You're right - trying to determine the tenant DB from the subdomain first doesn't make sense because:
1. Users initially log in on the main domain
2. We need to know where to redirect them after login
3. Only after redirection should we use the subdomain to set up the tenant DB connection

Let's modify our approach. We should first implement:

1. The organization lookup query in the main DB:

```typescript:packages/database/src/main-app/queries/organization-queries.ts
import { db } from '../db';
import { eq } from 'drizzle-orm';
import { organizationMembers, organizations } from '../schema';

export async function fetchDefaultOrganizationForUser(userId: string) {
    // Find the first organization this user is a member of
    // In the future, you might want to add logic for "default" organization
    const result = await db.query.organizationMembers.findFirst({
        where: eq(organizationMembers.userId, userId),
        with: {
            organization: {
                columns: {
                    id: true,
                    slug: true,
                    name: true
                }
            }
        }
    });

    return result?.organization || null;
}
```

2. Then modify the authenticated layout to handle the redirect:

```typescript:apps/app/app/(authenticated)/layout.tsx
import { env } from '@/env';
import { auth, currentUser } from '@repo/auth/server';
import { fetchDefaultOrganizationForUser } from '@repo/database/src/main-app/queries/organization-queries';
import { SidebarProvider } from '@repo/design-system/components/ui/sidebar';
import { redirect } from 'next/navigation';

// ... other imports

const AppLayout = async ({ children }: AppLayoutProperties) => {
  const user = await currentUser();
  const { redirectToSignIn } = await auth();

  if (!user) {
    return redirectToSignIn();
  }

  // Get hostname to determine if we're on main domain
  const hostname = headers().get('host') || '';
  const isMainDomain = hostname === env.NEXT_PUBLIC_APP_URL?.replace('https://', '');

  if (isMainDomain) {
    // Only do organization lookup and redirect on main domain
    const defaultOrg = await fetchDefaultOrganizationForUser(user.id);
    
    if (defaultOrg?.slug) {
      // Redirect to tenant subdomain
      const tenantUrl = `https://${defaultOrg.slug}.${env.NEXT_PUBLIC_APP_URL?.replace('https://', '')}`;
      redirect(tenantUrl);
    }
    // If no org found, could redirect to onboarding or show error
    redirect('/onboarding');
  }

  // Rest of the layout code...
  return (
    <NotificationsProvider userId={user.id}>
      // ... existing layout JSX
    </NotificationsProvider>
  );
};
```

After we have this working, then we can implement the tenant middleware to handle the database connection when users are on the subdomain.

Does this revised approach make more sense? We're first ensuring users get to the right tenant subdomain, and only then worry about setting up the tenant-specific database connection.

---

_**User**_

lets firs modify our flow in our research file @login-middleware-database.md 

please take into consideration what we have seen before and why we need to make some modifications to our system. 

write a detailed step by step eg. 

1. user logs credential in clerk component
2. using clerk middleware or auth something like this that we currently use since u alreday have the code we can write it addecuatley, we verify and redirect the user to 
3. in the middleware we check the clerk id and query the db to get the connection url 

here are the pieces of the puzzle @middleware.ts @middleware.ts @middleware.ts @middleware.ts @provider.tsx @index.tsx @layout.tsx 


---

_**Assistant**_

You're right - let's revise the flow based on our actual codebase. I'll write a detailed step-by-step flow:

```markdown:.cursor/research/login-middleware-database.md
## Revised System Flow: Multi-Tenant Login Implementation

### Current System Components:
1. Clerk Authentication (`@repo/auth/middleware.ts`):
   - Simple wrapper around Clerk's middleware
   - Handles session verification

2. Security Headers (`@repo/security/middleware.ts`):
   - Nosecone middleware for security headers
   - Applied after auth checks

3. App Layout Chain:
   - Root Layout (`apps/app/app/layout.tsx`): 
     - Wraps everything in DesignSystemProvider
   - Design System Provider (`packages/design-system/index.tsx`):
     - Wraps app in AuthProvider, AnalyticsProvider
   - Auth Provider (`packages/auth/provider.tsx`):
     - Configures Clerk UI/theming
   - Authenticated Layout (`apps/app/app/(authenticated)/layout.tsx`):
     - Handles authenticated routes
     - Currently just checks if user is logged in

### Revised Authentication & Tenant Flow:

1. **Initial Auth (Main Domain - lavel.ai)**
   - User visits protected route
   - Clerk middleware redirects to login
   - User logs in via Clerk UI
   - Clerk creates session & redirects back

2. **Tenant Middleware (Before Clerk Auth)**
   ```typescript
   // 1. Check if request is for

---



---

================
File: apps/api/__tests__/health.test.ts
================
import { expect, test } from 'vitest';
import { GET } from '../app/health/route';

test('Health Check', async () => {
  const response = await GET();
  expect(response.status).toBe(200);
  expect(await response.text()).toBe('OK');
});

================
File: apps/api/app/health/route.ts
================
export const runtime = 'edge';

export const GET = (): Response => new Response('OK', { status: 200 });

================
File: apps/api/app/webhooks/clerk/route.ts
================
import { env } from '@/env';
import { analytics } from '@repo/analytics/posthog/server';
import type {
  DeletedObjectJSON,
  OrganizationJSON,
  OrganizationMembershipJSON,
  UserJSON,
  WebhookEvent,
} from '@repo/auth/server';
import { log } from '@repo/observability/log';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';
import { Webhook } from 'svix';

const handleUserCreated = (data: UserJSON) => {
  analytics.identify({
    distinctId: data.id,
    properties: {
      email: data.email_addresses.at(0)?.email_address,
      firstName: data.first_name,
      lastName: data.last_name,
      createdAt: new Date(data.created_at),
      avatar: data.image_url,
      phoneNumber: data.phone_numbers.at(0)?.phone_number,
    },
  });

  analytics.capture({
    event: 'User Created',
    distinctId: data.id,
  });

  return new Response('User created', { status: 201 });
};

const handleUserUpdated = (data: UserJSON) => {
  analytics.identify({
    distinctId: data.id,
    properties: {
      email: data.email_addresses.at(0)?.email_address,
      firstName: data.first_name,
      lastName: data.last_name,
      createdAt: new Date(data.created_at),
      avatar: data.image_url,
      phoneNumber: data.phone_numbers.at(0)?.phone_number,
    },
  });

  analytics.capture({
    event: 'User Updated',
    distinctId: data.id,
  });

  return new Response('User updated', { status: 201 });
};

const handleUserDeleted = (data: DeletedObjectJSON) => {
  if (data.id) {
    analytics.identify({
      distinctId: data.id,
      properties: {
        deleted: new Date(),
      },
    });

    analytics.capture({
      event: 'User Deleted',
      distinctId: data.id,
    });
  }

  return new Response('User deleted', { status: 201 });
};

const handleOrganizationCreated = (data: OrganizationJSON) => {
  analytics.groupIdentify({
    groupKey: data.id,
    groupType: 'company',
    distinctId: data.created_by,
    properties: {
      name: data.name,
      avatar: data.image_url,
    },
  });

  if (data.created_by) {
    analytics.capture({
      event: 'Organization Created',
      distinctId: data.created_by,
    });
  }

  return new Response('Organization created', { status: 201 });
};

const handleOrganizationUpdated = (data: OrganizationJSON) => {
  analytics.groupIdentify({
    groupKey: data.id,
    groupType: 'company',
    distinctId: data.created_by,
    properties: {
      name: data.name,
      avatar: data.image_url,
    },
  });

  if (data.created_by) {
    analytics.capture({
      event: 'Organization Updated',
      distinctId: data.created_by,
    });
  }

  return new Response('Organization updated', { status: 201 });
};

const handleOrganizationMembershipCreated = (
  data: OrganizationMembershipJSON
) => {
  analytics.groupIdentify({
    groupKey: data.organization.id,
    groupType: 'company',
    distinctId: data.public_user_data.user_id,
  });

  analytics.capture({
    event: 'Organization Member Created',
    distinctId: data.public_user_data.user_id,
  });

  return new Response('Organization membership created', { status: 201 });
};

const handleOrganizationMembershipDeleted = (
  data: OrganizationMembershipJSON
) => {
  // Need to unlink the user from the group

  analytics.capture({
    event: 'Organization Member Deleted',
    distinctId: data.public_user_data.user_id,
  });

  return new Response('Organization membership deleted', { status: 201 });
};

export const POST = async (request: Request): Promise<Response> => {
  if (!env.CLERK_WEBHOOK_SECRET) {
    return NextResponse.json({ message: 'Not configured', ok: false });
  }

  // Get the headers
  const headerPayload = await headers();
  const svixId = headerPayload.get('svix-id');
  const svixTimestamp = headerPayload.get('svix-timestamp');
  const svixSignature = headerPayload.get('svix-signature');

  // If there are no headers, error out
  if (!svixId || !svixTimestamp || !svixSignature) {
    return new Response('Error occured -- no svix headers', {
      status: 400,
    });
  }

  // Get the body
  const payload = (await request.json()) as object;
  const body = JSON.stringify(payload);

  // Create a new SVIX instance with your secret.
  const webhook = new Webhook(env.CLERK_WEBHOOK_SECRET);

  let event: WebhookEvent | undefined;

  // Verify the payload with the headers
  try {
    event = webhook.verify(body, {
      'svix-id': svixId,
      'svix-timestamp': svixTimestamp,
      'svix-signature': svixSignature,
    }) as WebhookEvent;
  } catch (error) {
    log.error('Error verifying webhook:', { error });
    return new Response('Error occured', {
      status: 400,
    });
  }

  // Get the ID and type
  const { id } = event.data;
  const eventType = event.type;

  log.info('Webhook', { id, eventType, body });

  let response: Response = new Response('', { status: 201 });

  switch (eventType) {
    case 'user.created': {
      response = handleUserCreated(event.data);
      break;
    }
    case 'user.updated': {
      response = handleUserUpdated(event.data);
      break;
    }
    case 'user.deleted': {
      response = handleUserDeleted(event.data);
      break;
    }
    case 'organization.created': {
      response = handleOrganizationCreated(event.data);
      break;
    }
    case 'organization.updated': {
      response = handleOrganizationUpdated(event.data);
      break;
    }
    case 'organizationMembership.created': {
      response = handleOrganizationMembershipCreated(event.data);
      break;
    }
    case 'organizationMembership.deleted': {
      response = handleOrganizationMembershipDeleted(event.data);
      break;
    }
    default: {
      break;
    }
  }

  await analytics.shutdown();

  return response;
};

================
File: apps/api/app/webhooks/stripe/route.ts
================
import { env } from '@/env';
import { analytics } from '@repo/analytics/posthog/server';
import { clerkClient } from '@repo/auth/server';
import { parseError } from '@repo/observability/error';
import { log } from '@repo/observability/log';
import { stripe } from '@repo/payments';
import type { Stripe } from '@repo/payments';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';

const getUserFromCustomerId = async (customerId: string) => {
  const clerk = await clerkClient();
  const users = await clerk.users.getUserList();

  const user = users.data.find(
    (user) => user.privateMetadata.stripeCustomerId === customerId
  );

  return user;
};

const handleCheckoutSessionCompleted = async (
  data: Stripe.Checkout.Session
) => {
  if (!data.customer) {
    return;
  }

  const customerId =
    typeof data.customer === 'string' ? data.customer : data.customer.id;
  const user = await getUserFromCustomerId(customerId);

  if (!user) {
    return;
  }

  analytics.capture({
    event: 'User Subscribed',
    distinctId: user.id,
  });
};

const handleSubscriptionScheduleCanceled = async (
  data: Stripe.SubscriptionSchedule
) => {
  if (!data.customer) {
    return;
  }

  const customerId =
    typeof data.customer === 'string' ? data.customer : data.customer.id;
  const user = await getUserFromCustomerId(customerId);

  if (!user) {
    return;
  }

  analytics.capture({
    event: 'User Unsubscribed',
    distinctId: user.id,
  });
};

export const POST = async (request: Request): Promise<Response> => {
  if (!env.STRIPE_WEBHOOK_SECRET) {
    return NextResponse.json({ message: 'Not configured', ok: false });
  }

  try {
    const body = await request.text();
    const headerPayload = await headers();
    const signature = headerPayload.get('stripe-signature');

    if (!signature) {
      throw new Error('missing stripe-signature header');
    }

    const event = stripe.webhooks.constructEvent(
      body,
      signature,
      env.STRIPE_WEBHOOK_SECRET
    );

    switch (event.type) {
      case 'checkout.session.completed': {
        await handleCheckoutSessionCompleted(event.data.object);
        break;
      }
      case 'subscription_schedule.canceled': {
        await handleSubscriptionScheduleCanceled(event.data.object);
        break;
      }
      default: {
        log.warn(`Unhandled event type ${event.type}`);
      }
    }

    await analytics.shutdown();

    return NextResponse.json({ result: event, ok: true });
  } catch (error) {
    const message = parseError(error);

    log.error(message);

    return NextResponse.json(
      {
        message: 'something went wrong',
        ok: false,
      },
      { status: 500 }
    );
  }
};

================
File: apps/api/app/global-error.tsx
================
'use client';

import { Button } from '@repo/design-system/components/ui/button';
import { fonts } from '@repo/design-system/lib/fonts';
import { captureException } from '@sentry/nextjs';
import type NextError from 'next/error';
import { useEffect } from 'react';

type GlobalErrorProperties = {
  readonly error: NextError & { digest?: string };
  readonly reset: () => void;
};

const GlobalError = ({ error, reset }: GlobalErrorProperties) => {
  useEffect(() => {
    captureException(error);
  }, [error]);

  return (
    <html lang="en" className={fonts}>
      <body>
        <h1>Oops, something went wrong</h1>
        <Button onClick={() => reset()}>Try again</Button>
      </body>
    </html>
  );
};

export default GlobalError;

================
File: apps/api/app/layout.tsx
================
import type { ReactNode } from 'react';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en">
    <body>{children}</body>
  </html>
);

export default RootLayout;

================
File: apps/api/.env.example
================
# Server
CLERK_SECRET_KEY=""
CLERK_WEBHOOK_SECRET=""
RESEND_FROM=""
DATABASE_URL=""
RESEND_TOKEN=""
STRIPE_SECRET_KEY=""
STRIPE_WEBHOOK_SECRET=""
BETTERSTACK_API_KEY=""
BETTERSTACK_URL=""
FLAGS_SECRET=""
ARCJET_KEY=""
SVIX_TOKEN=""
LIVEBLOCKS_SECRET=""
BASEHUB_TOKEN=""
VERCEL_PROJECT_PRODUCTION_URL="http://localhost:3002"
KNOCK_API_KEY=""
KNOCK_FEED_CHANNEL_ID=""

# Client
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=""
NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in"
NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up"
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL="/"
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL="/"
NEXT_PUBLIC_GA_MEASUREMENT_ID=""
NEXT_PUBLIC_POSTHOG_KEY=""
NEXT_PUBLIC_POSTHOG_HOST=""
NEXT_PUBLIC_DOCS_URL="http://localhost:3004"
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NEXT_PUBLIC_WEB_URL="http://localhost:3001"

================
File: apps/api/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# prisma
.env

# react.email
.react-email

# Sentry
.sentryclirc

================
File: apps/api/env.ts
================
import { keys as analytics } from '@repo/analytics/keys';
import { keys as auth } from '@repo/auth/keys';
import { keys as database } from '@repo/database/keys';
import { keys as email } from '@repo/email/keys';
import { keys as core } from '@repo/next-config/keys';
import { keys as observability } from '@repo/observability/keys';
import { keys as payments } from '@repo/payments/keys';
import { createEnv } from '@t3-oss/env-nextjs';

export const env = createEnv({
  extends: [
    auth(),
    analytics(),
    core(),
    database(),
    email(),
    observability(),
    payments(),
  ],
  server: {},
  client: {},
  runtimeEnv: {},
});

================
File: apps/api/instrumentation.ts
================
import { initializeSentry } from '@repo/observability/instrumentation';

export const register = initializeSentry();

================
File: apps/api/next.config.ts
================
import { env } from '@/env';
import { config, withAnalyzer } from '@repo/next-config';
import { withLogtail, withSentry } from '@repo/observability/next-config';
import type { NextConfig } from 'next';

let nextConfig: NextConfig = withLogtail({ ...config });

if (env.VERCEL) {
  nextConfig = withSentry(nextConfig);
}

if (env.ANALYZE === 'true') {
  nextConfig = withAnalyzer(nextConfig);
}

export default nextConfig;

================
File: apps/api/package.json
================
{
  "name": "api",
  "private": true,
  "scripts": {
    "dev": "concurrently \"pnpm:next\" \"pnpm:stripe\"",
    "next": "next dev -p 3002 --turbopack",
    "build": "next build",
    "start": "next start",
    "analyze": "ANALYZE=true pnpm build",
    "test": "NODE_ENV=test vitest run",
    "stripe": "stripe listen --forward-to localhost:3002/webhooks/stripe",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@repo/analytics": "workspace:*",
    "@repo/auth": "workspace:*",
    "@repo/database": "workspace:*",
    "@repo/design-system": "workspace:*",
    "@repo/next-config": "workspace:*",
    "@repo/observability": "workspace:*",
    "@repo/payments": "workspace:*",
    "@repo/testing": "workspace:*",
    "@sentry/nextjs": "^8.50.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "svix": "^1.45.1",
    "vitest": "^3.0.3",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "19.0.3",
    "concurrently": "^9.1.2",
    "typescript": "^5.7.3"
  }
}

================
File: apps/api/sentry.client.config.ts
================
import { initializeSentry } from '@repo/observability/client';

initializeSentry();

================
File: apps/api/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "next.config.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ]
}

================
File: apps/api/vercel.json
================
{
  "crons": [
    {
      "path": "/cron/keep-alive",
      "schedule": "0 1 * * *"
    }
  ]
}

================
File: apps/api/vitest.config.ts
================
export { default } from '@repo/testing';

================
File: apps/app/__tests__/sign-in.test.tsx
================
import { render, screen } from '@testing-library/react';
import { expect, test } from 'vitest';
import Page from '../app/(unauthenticated)/sign-in/[[...sign-in]]/page';

test('Sign In Page', () => {
  render(<Page />);
  expect(
    screen.getByRole('heading', {
      level: 1,
      name: 'Welcome back',
    })
  ).toBeDefined();
});

================
File: apps/app/__tests__/sign-up.test.tsx
================
import { render, screen } from '@testing-library/react';
import { expect, test } from 'vitest';
import Page from '../app/(unauthenticated)/sign-up/[[...sign-up]]/page';

test('Sign Up Page', () => {
  render(<Page />);
  expect(
    screen.getByRole('heading', {
      level: 1,
      name: 'Create an account',
    })
  ).toBeDefined();
});

================
File: apps/app/app/.well-known/vercel/flags/route.ts
================
import { getFlags } from '@repo/feature-flags/access';

export const GET = getFlags;

================
File: apps/app/app/(authenticated)/components/avatar-stack.tsx
================
'use client';

import { useOthers, useSelf } from '@repo/collaboration/hooks';
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@repo/design-system/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@repo/design-system/components/ui/tooltip';
import { tailwind } from '@repo/tailwind-config';

type PresenceAvatarProps = {
  info?: Liveblocks['UserMeta']['info'];
};

const PresenceAvatar = ({ info }: PresenceAvatarProps) => (
  <Tooltip delayDuration={0}>
    <TooltipTrigger>
      <Avatar className="h-7 w-7 bg-secondary ring-1 ring-background">
        <AvatarImage src={info?.avatar} alt={info?.name} />
        <AvatarFallback className="text-xs">
          {info?.name?.slice(0, 2)}
        </AvatarFallback>
      </Avatar>
    </TooltipTrigger>
    <TooltipContent collisionPadding={4}>
      <p>{info?.name ?? 'Unknown'}</p>
    </TooltipContent>
  </Tooltip>
);

export const AvatarStack = () => {
  const others = useOthers();
  const self = useSelf();
  const hasMoreUsers = others.length > 3;

  return (
    <div className="-space-x-1 flex items-center px-4">
      {others.slice(0, 3).map(({ connectionId, info }) => (
        <PresenceAvatar key={connectionId} info={info} />
      ))}

      {hasMoreUsers && (
        <PresenceAvatar
          info={{
            name: `+${others.length - 3}`,
            color: tailwind.theme.colors.gray[500],
          }}
        />
      )}

      {self && <PresenceAvatar info={self.info} />}
    </div>
  );
};

================
File: apps/app/app/(authenticated)/components/collaboration-provider.tsx
================
'use client';

import { getUsers } from '@/app/actions/users/get';
import { searchUsers } from '@/app/actions/users/search';
import { Room } from '@repo/collaboration/room';
import type { ReactNode } from 'react';

export const CollaborationProvider = ({
  orgId,
  children,
}: {
  orgId: string;
  children: ReactNode;
}) => {
  const resolveUsers = async ({ userIds }: { userIds: string[] }) => {
    const response = await getUsers(userIds);

    if ('error' in response) {
      throw new Error('Problem resolving users');
    }

    return response.data;
  };

  const resolveMentionSuggestions = async ({ text }: { text: string }) => {
    const response = await searchUsers(text);

    if ('error' in response) {
      throw new Error('Problem resolving mention suggestions');
    }

    return response.data;
  };

  return (
    <Room
      id={`${orgId}:presence`}
      authEndpoint="/api/collaboration/auth"
      fallback={
        <div className="px-3 text-muted-foreground text-xs">Loading...</div>
      }
      resolveUsers={resolveUsers}
      resolveMentionSuggestions={resolveMentionSuggestions}
    >
      {children}
    </Room>
  );
};

================
File: apps/app/app/(authenticated)/components/cursors.tsx
================
'use client';

import { useMyPresence, useOthers } from '@repo/collaboration/hooks';
import { useEffect } from 'react';

const Cursor = ({
  name,
  color,
  x,
  y,
}: {
  name: string | undefined;
  color: string;
  x: number;
  y: number;
}) => (
  <div
    className="pointer-events-none absolute top-0 left-0 z-[999] select-none transition-transform duration-100"
    style={{
      transform: `translateX(${x}px) translateY(${y}px)`,
    }}
  >
    <svg
      className="absolute top-0 left-0"
      width="24"
      height="36"
      viewBox="0 0 24 36"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Cursor</title>
      <path
        d="M5.65376 12.3673H5.46026L5.31717 12.4976L0.500002 16.8829L0.500002 1.19841L11.7841 12.3673H5.65376Z"
        fill={color}
      />
    </svg>
    <div
      className="absolute top-4 left-1.5 whitespace-nowrap rounded-full px-2 py-0.5 text-white text-xs"
      style={{
        backgroundColor: color,
      }}
    >
      {name}
    </div>
  </div>
);

export const Cursors = () => {
  /**
   * useMyPresence returns the presence of the current user and a function to update it.
   * updateMyPresence is different than the setState function returned by the useState hook from React.
   * You don't need to pass the full presence object to update it.
   * See https://liveblocks.io/docs/api-reference/liveblocks-react#useMyPresence for more information
   */
  const [_cursor, updateMyPresence] = useMyPresence();

  /**
   * Return all the other users in the room and their presence (a cursor position in this case)
   */
  const others = useOthers();

  useEffect(() => {
    const onPointerMove = (event: PointerEvent) => {
      // Update the user cursor position on every pointer move
      updateMyPresence({
        cursor: {
          x: Math.round(event.clientX),
          y: Math.round(event.clientY),
        },
      });
    };

    const onPointerLeave = () => {
      // When the pointer goes out, set cursor to null
      updateMyPresence({
        cursor: null,
      });
    };

    document.body.addEventListener('pointermove', onPointerMove);
    document.body.addEventListener('pointerleave', onPointerLeave);

    return () => {
      document.body.removeEventListener('pointermove', onPointerMove);
      document.body.removeEventListener('pointerleave', onPointerLeave);
    };
  }, [updateMyPresence]);

  return others.map(({ connectionId, presence, info }) => {
    if (!presence.cursor) {
      return null;
    }

    return (
      <Cursor
        key={`cursor-${connectionId}`}
        // connectionId is an integer that is incremented at every new connections
        // Assigning a color with a modulo makes sure that a specific user has the same colors on every clients
        color={info.color}
        x={presence.cursor.x}
        y={presence.cursor.y}
        name={info?.name}
      />
    );
  });
};

================
File: apps/app/app/(authenticated)/components/header.tsx
================
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@repo/design-system/components/ui/breadcrumb';
import { Separator } from '@repo/design-system/components/ui/separator';
import { SidebarTrigger } from '@repo/design-system/components/ui/sidebar';
import { Fragment, type ReactNode } from 'react';

type HeaderProps = {
  pages: string[];
  page: string;
  children?: ReactNode;
};

export const Header = ({ pages, page, children }: HeaderProps) => (
  <header className="flex h-16 shrink-0 items-center justify-between gap-2">
    <div className="flex items-center gap-2 px-4">
      <SidebarTrigger className="-ml-1" />
      <Separator orientation="vertical" className="mr-2 h-4" />
      <Breadcrumb>
        <BreadcrumbList>
          {pages.map((page, index) => (
            <Fragment key={page}>
              {index > 0 && <BreadcrumbSeparator className="hidden md:block" />}
              <BreadcrumbItem className="hidden md:block">
                <BreadcrumbLink href="#">{page}</BreadcrumbLink>
              </BreadcrumbItem>
            </Fragment>
          ))}
          <BreadcrumbSeparator className="hidden md:block" />
          <BreadcrumbItem>
            <BreadcrumbPage>{page}</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>
    </div>
    {children}
  </header>
);

================
File: apps/app/app/(authenticated)/components/posthog-identifier.tsx
================
'use client';

import { analytics } from '@repo/analytics/posthog/client';
import { useUser } from '@repo/auth/client';
import { usePathname, useSearchParams } from 'next/navigation';
import { useEffect, useRef } from 'react';

export const PostHogIdentifier = () => {
  const { user } = useUser();
  const identified = useRef(false);
  const pathname = usePathname();
  const searchParams = useSearchParams();

  useEffect(() => {
    // Track pageviews
    if (pathname && analytics) {
      let url = window.origin + pathname;
      if (searchParams.toString()) {
        url = `${url}?${searchParams.toString()}`;
      }
      analytics.capture('$pageview', {
        $current_url: url,
      });
    }
  }, [pathname, searchParams]);

  useEffect(() => {
    if (!user || identified.current) {
      return;
    }

    analytics.identify(user.id, {
      email: user.emailAddresses.at(0)?.emailAddress,
      firstName: user.firstName,
      lastName: user.lastName,
      createdAt: user.createdAt,
      avatar: user.imageUrl,
      phoneNumber: user.phoneNumbers.at(0)?.phoneNumber,
    });

    identified.current = true;
  }, [user]);

  return null;
};

================
File: apps/app/app/(authenticated)/components/search.tsx
================
import { Button } from '@repo/design-system/components/ui/button';
import { Input } from '@repo/design-system/components/ui/input';
import { ArrowRightIcon, SearchIcon } from 'lucide-react';

export const Search = () => (
  <form action="/search" className="flex items-center gap-2 px-4">
    <div className="relative">
      <div className="absolute top-px bottom-px left-px flex h-8 w-8 items-center justify-center">
        <SearchIcon size={16} className="text-muted-foreground" />
      </div>
      <Input
        type="text"
        name="q"
        placeholder="Search"
        className="h-auto bg-background py-1.5 pr-3 pl-8 text-xs"
      />
      <Button
        variant="ghost"
        size="icon"
        className="absolute top-px right-px bottom-px h-8 w-8"
      >
        <ArrowRightIcon size={16} className="text-muted-foreground" />
      </Button>
    </div>
  </form>
);

================
File: apps/app/app/(authenticated)/components/sidebar.tsx
================
'use client';

import { OrganizationSwitcher, UserButton } from '@repo/auth/client';
import { ModeToggle } from '@repo/design-system/components/mode-toggle';
import { Button } from '@repo/design-system/components/ui/button';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@repo/design-system/components/ui/collapsible';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@repo/design-system/components/ui/dropdown-menu';
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  useSidebar,
} from '@repo/design-system/components/ui/sidebar';
import { cn } from '@repo/design-system/lib/utils';
import { NotificationsTrigger } from '@repo/notifications/components/trigger';
import {
  AnchorIcon,
  BookOpenIcon,
  BotIcon,
  ChevronRightIcon,
  FolderIcon,
  FrameIcon,
  LifeBuoyIcon,
  MapIcon,
  MoreHorizontalIcon,
  PieChartIcon,
  SendIcon,
  Settings2Icon,
  ShareIcon,
  SquareTerminalIcon,
  Trash2Icon,
} from 'lucide-react';
import type { ReactNode } from 'react';
import { Search } from './search';

type GlobalSidebarProperties = {
  readonly children: ReactNode;
};

const data = {
  user: {
    name: 'shadcn',
    email: 'm@example.com',
    avatar: '/avatars/shadcn.jpg',
  },
  navMain: [
    {
      title: 'Playground',
      url: '#',
      icon: SquareTerminalIcon,
      isActive: true,
      items: [
        {
          title: 'History',
          url: '#',
        },
        {
          title: 'Starred',
          url: '#',
        },
        {
          title: 'Settings',
          url: '#',
        },
      ],
    },
    {
      title: 'Models',
      url: '#',
      icon: BotIcon,
      items: [
        {
          title: 'Genesis',
          url: '#',
        },
        {
          title: 'Explorer',
          url: '#',
        },
        {
          title: 'Quantum',
          url: '#',
        },
      ],
    },
    {
      title: 'Documentation',
      url: '#',
      icon: BookOpenIcon,
      items: [
        {
          title: 'Introduction',
          url: '#',
        },
        {
          title: 'Get Started',
          url: '#',
        },
        {
          title: 'Tutorials',
          url: '#',
        },
        {
          title: 'Changelog',
          url: '#',
        },
      ],
    },
    {
      title: 'Settings',
      url: '#',
      icon: Settings2Icon,
      items: [
        {
          title: 'General',
          url: '#',
        },
        {
          title: 'Team',
          url: '#',
        },
        {
          title: 'Billing',
          url: '#',
        },
        {
          title: 'Limits',
          url: '#',
        },
      ],
    },
  ],
  navSecondary: [
    {
      title: 'Webhooks',
      url: '/webhooks',
      icon: AnchorIcon,
    },
    {
      title: 'Support',
      url: '#',
      icon: LifeBuoyIcon,
    },
    {
      title: 'Feedback',
      url: '#',
      icon: SendIcon,
    },
  ],
  projects: [
    {
      name: 'Design Engineering',
      url: '#',
      icon: FrameIcon,
    },
    {
      name: 'Sales & Marketing',
      url: '#',
      icon: PieChartIcon,
    },
    {
      name: 'Travel',
      url: '#',
      icon: MapIcon,
    },
  ],
};

export const GlobalSidebar = ({ children }: GlobalSidebarProperties) => {
  const sidebar = useSidebar();

  return (
    <>
      <Sidebar variant="inset">
        <SidebarHeader>
          <SidebarMenu>
            <SidebarMenuItem>
              <div
                className={cn(
                  'h-[36px] overflow-hidden transition-all [&>div]:w-full',
                  sidebar.open ? '' : '-mx-1'
                )}
              >
                <OrganizationSwitcher
                  hidePersonal
                  afterSelectOrganizationUrl="/"
                />
              </div>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarHeader>
        <Search />
        <SidebarContent>
          <SidebarGroup>
            <SidebarGroupLabel>Platform</SidebarGroupLabel>
            <SidebarMenu>
              {data.navMain.map((item) => (
                <Collapsible
                  key={item.title}
                  asChild
                  defaultOpen={item.isActive}
                >
                  <SidebarMenuItem>
                    <SidebarMenuButton asChild tooltip={item.title}>
                      <a href={item.url}>
                        <item.icon />
                        <span>{item.title}</span>
                      </a>
                    </SidebarMenuButton>
                    {item.items?.length ? (
                      <>
                        <CollapsibleTrigger asChild>
                          <SidebarMenuAction className="data-[state=open]:rotate-90">
                            <ChevronRightIcon />
                            <span className="sr-only">Toggle</span>
                          </SidebarMenuAction>
                        </CollapsibleTrigger>
                        <CollapsibleContent>
                          <SidebarMenuSub>
                            {item.items?.map((subItem) => (
                              <SidebarMenuSubItem key={subItem.title}>
                                <SidebarMenuSubButton asChild>
                                  <a href={subItem.url}>
                                    <span>{subItem.title}</span>
                                  </a>
                                </SidebarMenuSubButton>
                              </SidebarMenuSubItem>
                            ))}
                          </SidebarMenuSub>
                        </CollapsibleContent>
                      </>
                    ) : null}
                  </SidebarMenuItem>
                </Collapsible>
              ))}
            </SidebarMenu>
          </SidebarGroup>
          <SidebarGroup className="group-data-[collapsible=icon]:hidden">
            <SidebarGroupLabel>Projects</SidebarGroupLabel>
            <SidebarMenu>
              {data.projects.map((item) => (
                <SidebarMenuItem key={item.name}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.name}</span>
                    </a>
                  </SidebarMenuButton>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <SidebarMenuAction showOnHover>
                        <MoreHorizontalIcon />
                        <span className="sr-only">More</span>
                      </SidebarMenuAction>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent
                      className="w-48"
                      side="bottom"
                      align="end"
                    >
                      <DropdownMenuItem>
                        <FolderIcon className="text-muted-foreground" />
                        <span>View Project</span>
                      </DropdownMenuItem>
                      <DropdownMenuItem>
                        <ShareIcon className="text-muted-foreground" />
                        <span>Share Project</span>
                      </DropdownMenuItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem>
                        <Trash2Icon className="text-muted-foreground" />
                        <span>Delete Project</span>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </SidebarMenuItem>
              ))}
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <MoreHorizontalIcon />
                  <span>More</span>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarGroup>
          <SidebarGroup className="mt-auto">
            <SidebarGroupContent>
              <SidebarMenu>
                {data.navSecondary.map((item) => (
                  <SidebarMenuItem key={item.title}>
                    <SidebarMenuButton asChild>
                      <a href={item.url}>
                        <item.icon />
                        <span>{item.title}</span>
                      </a>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarGroupContent>
          </SidebarGroup>
        </SidebarContent>
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem className="flex items-center gap-2">
              <UserButton
                showName
                appearance={{
                  elements: {
                    rootBox: 'flex overflow-hidden w-full',
                    userButtonBox: 'flex-row-reverse',
                    userButtonOuterIdentifier: 'truncate pl-0',
                  },
                }}
              />
              <div className="flex shrink-0 items-center gap-px">
                <ModeToggle />
                <Button
                  variant="ghost"
                  size="icon"
                  className="shrink-0"
                  asChild
                >
                  <div className="h-4 w-4">
                    <NotificationsTrigger />
                  </div>
                </Button>
              </div>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>
      <SidebarInset>{children}</SidebarInset>
    </>
  );
};

================
File: apps/app/app/(authenticated)/search/page.tsx
================
import { auth } from '@repo/auth/server';
import { notFound, redirect } from 'next/navigation';
import { Header } from '../components/header';

type SearchPageProperties = {
  searchParams: Promise<{
    q: string;
  }>;
};

export const generateMetadata = async ({
  searchParams,
}: SearchPageProperties) => {
  const { q } = await searchParams;

  return {
    title: `${q} - Search results`,
    description: `Search results for ${q}`,
  };
};

const SearchPage = async ({ searchParams }: SearchPageProperties) => {
  const { q } = await searchParams;

  const { orgId } = await auth();

  if (!orgId) {
    notFound();
  }

  if (!q) {
    redirect('/');
  }

  return (
    <>
      <Header pages={['Building Your Application']} page="Search" />
      <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
        <div className="grid auto-rows-min gap-4 md:grid-cols-3">

        </div>
        <div className="min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min" />
      </div>
    </>
  );
};

export default SearchPage;

================
File: apps/app/app/(authenticated)/webhooks/page.tsx
================
import { webhooks } from '@repo/webhooks';
import { notFound } from 'next/navigation';

export const metadata = {
  title: 'Webhooks',
  description: 'Send webhooks to your users.',
};

const WebhooksPage = async () => {
  const response = await webhooks.getAppPortal();

  if (!response?.url) {
    notFound();
  }

  return (
    <div className="h-full w-full overflow-hidden">
      <iframe
        title="Webhooks"
        src={response.url}
        className="h-full w-full border-none"
        allow="clipboard-write"
        loading="lazy"
      />
    </div>
  );
};

export default WebhooksPage;

================
File: apps/app/app/(authenticated)/layout.tsx
================
import { env } from '@/env';
import { auth, currentUser } from '@repo/auth/server';
import { SidebarProvider } from '@repo/design-system/components/ui/sidebar';
import { showBetaFeature } from '@repo/feature-flags';
import { NotificationsProvider } from '@repo/notifications/components/provider';
import { secure } from '@repo/security';
import type { ReactNode } from 'react';
import { PostHogIdentifier } from './components/posthog-identifier';
import { GlobalSidebar } from './components/sidebar';

type AppLayoutProperties = {
  readonly children: ReactNode;
};

const AppLayout = async ({ children }: AppLayoutProperties) => {
  if (env.ARCJET_KEY) {
    await secure(['CATEGORY:PREVIEW']);
  }

  const user = await currentUser();
  const { redirectToSignIn } = await auth();
  const betaFeature = await showBetaFeature();

  if (!user) {
    return redirectToSignIn();
  }

  return (
    <NotificationsProvider userId={user.id}>
      <SidebarProvider>
        <GlobalSidebar>
          {betaFeature && (
            <div className="m-4 rounded-full bg-success p-1.5 text-center text-sm text-success-foreground">
              Beta feature now available
            </div>
          )}
          {children}
        </GlobalSidebar>
        <PostHogIdentifier />
      </SidebarProvider>
    </NotificationsProvider>
  );
};

export default AppLayout;

================
File: apps/app/app/(authenticated)/page.tsx
================
import { env } from '@/env';
import { auth } from '@repo/auth/server';
import type { Metadata } from 'next';
import dynamic from 'next/dynamic';
import { notFound } from 'next/navigation';
import { AvatarStack } from './components/avatar-stack';
import { Cursors } from './components/cursors';
import { Header } from './components/header';

const title = 'Acme Inc';
const description = 'My application.';

const CollaborationProvider = dynamic(() =>
  import('./components/collaboration-provider').then(
    (mod) => mod.CollaborationProvider
  )
);

export const metadata: Metadata = {
  title,
  description,
};

const App = async () => {
  const { orgId } = await auth();

  if (!orgId) {
    notFound();
  }

  return (
    <>
      <Header pages={['Building Your Application']} page="Data Fetching">
        {env.LIVEBLOCKS_SECRET && (
          <CollaborationProvider orgId={orgId}>
            <AvatarStack />
            <Cursors />
          </CollaborationProvider>
        )}
      </Header>
      <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
        <div className="grid auto-rows-min gap-4 md:grid-cols-3">

        </div>
        <div className="min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min" />
      </div>
    </>
  );
};

export default App;

================
File: apps/app/app/(unauthenticated)/sign-in/[[...sign-in]]/page.tsx
================
// apps/app/app/(unauthenticated)/sign-in/[[...sign-in]]/page.tsx
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import dynamic from 'next/dynamic';

const title = 'Welcome back';
const description = 'Enter your details to sign in.';
const SignIn = dynamic(() =>
  import('@repo/auth/components/sign-in').then((mod) => mod.SignIn)
);

export const metadata: Metadata = createMetadata({ title, description });

const SignInPage = () => (
  <>
    <div className="flex flex-col space-y-2 text-center">
      <h1 className="font-semibold text-2xl tracking-tight">{title}</h1>
      <p className="text-muted-foreground text-sm">{description}</p>
    </div>
    <SignIn />
  </>
);

export default SignInPage;

================
File: apps/app/app/(unauthenticated)/sign-up/[[...sign-up]]/page.tsx
================
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import dynamic from 'next/dynamic';

const title = 'Create an account';
const description = 'Enter your details to get started.';
const SignUp = dynamic(() =>
  import('@repo/auth/components/sign-up').then((mod) => mod.SignUp)
);

export const metadata: Metadata = createMetadata({ title, description });

const SignUpPage = () => (
  <>
    <div className="flex flex-col space-y-2 text-center">
      <h1 className="font-semibold text-2xl tracking-tight">{title}</h1>
      <p className="text-muted-foreground text-sm">{description}</p>
    </div>
    <SignUp />
  </>
);

export default SignUpPage;

================
File: apps/app/app/(unauthenticated)/layout.tsx
================
import { env } from '@/env';
import { ModeToggle } from '@repo/design-system/components/mode-toggle';
import { CommandIcon } from 'lucide-react';
import Link from 'next/link';
import type { ReactNode } from 'react';

type AuthLayoutProps = {
  readonly children: ReactNode;
};

const AuthLayout = ({ children }: AuthLayoutProps) => (
  <div className="container relative grid h-dvh flex-col items-center justify-center lg:max-w-none lg:grid-cols-2 lg:px-0">
    <div className="relative hidden h-full flex-col bg-muted p-10 text-white lg:flex dark:border-r">
      <div className="absolute inset-0 bg-zinc-900" />
      <div className="relative z-20 flex items-center font-medium text-lg">
        <CommandIcon className="mr-2 h-6 w-6" />
        Acme Inc
      </div>
      <div className="absolute top-4 right-4">
        <ModeToggle />
      </div>
      <div className="relative z-20 mt-auto">
        <blockquote className="space-y-2">
          <p className="text-lg">
            &ldquo;This library has saved me countless hours of work and helped
            me deliver stunning designs to my clients faster than ever
            before.&rdquo;
          </p>
          <footer className="text-sm">Sofia Davis</footer>
        </blockquote>
      </div>
    </div>
    <div className="lg:p-8">
      <div className="mx-auto flex w-full max-w-[400px] flex-col justify-center space-y-6">
        {children}
        <p className="px-8 text-center text-muted-foreground text-sm">
          By clicking continue, you agree to our{' '}
          <Link
            href={new URL('/legal/terms', env.NEXT_PUBLIC_WEB_URL).toString()}
            className="underline underline-offset-4 hover:text-primary"
          >
            Terms of Service
          </Link>{' '}
          and{' '}
          <Link
            href={new URL('/legal/privacy', env.NEXT_PUBLIC_WEB_URL).toString()}
            className="underline underline-offset-4 hover:text-primary"
          >
            Privacy Policy
          </Link>
          .
        </p>
      </div>
    </div>
  </div>
);

export default AuthLayout;

================
File: apps/app/app/actions/users/get.ts
================
'use server';

import {
  type OrganizationMembership,
  auth,
  clerkClient,
} from '@repo/auth/server';
import { tailwind } from '@repo/tailwind-config';

const getName = (user: OrganizationMembership): string | undefined => {
  let name = user.publicUserData?.firstName;

  if (name && user.publicUserData?.lastName) {
    name = `${name} ${user.publicUserData.lastName}`;
  } else if (!name) {
    name = user.publicUserData?.identifier;
  }

  return name;
};

const colors = [
  tailwind.theme.colors.red[500],
  tailwind.theme.colors.orange[500],
  tailwind.theme.colors.amber[500],
  tailwind.theme.colors.yellow[500],
  tailwind.theme.colors.lime[500],
  tailwind.theme.colors.green[500],
  tailwind.theme.colors.emerald[500],
  tailwind.theme.colors.teal[500],
  tailwind.theme.colors.cyan[500],
  tailwind.theme.colors.sky[500],
  tailwind.theme.colors.blue[500],
  tailwind.theme.colors.indigo[500],
  tailwind.theme.colors.violet[500],
  tailwind.theme.colors.purple[500],
  tailwind.theme.colors.fuchsia[500],
  tailwind.theme.colors.pink[500],
  tailwind.theme.colors.rose[500],
];

export const getUsers = async (
  userIds: string[]
): Promise<
  | {
      data: Liveblocks['UserMeta']['info'][];
    }
  | {
      error: unknown;
    }
> => {
  try {
    const { orgId } = await auth();

    if (!orgId) {
      throw new Error('Not logged in');
    }

    const clerk = await clerkClient();

    const members = await clerk.organizations.getOrganizationMembershipList({
      organizationId: orgId,
      limit: 100,
    });

    const data: Liveblocks['UserMeta']['info'][] = members.data
      .filter(
        (user) =>
          user.publicUserData?.userId &&
          userIds.includes(user.publicUserData.userId)
      )
      .map((user) => ({
        name: getName(user) ?? 'Unknown user',
        picture: user.publicUserData?.imageUrl ?? '',
        color: colors[Math.floor(Math.random() * colors.length)],
      }));

    return { data };
  } catch (error) {
    return { error };
  }
};

================
File: apps/app/app/actions/users/search.ts
================
'use server';

import {
  type OrganizationMembership,
  auth,
  clerkClient,
} from '@repo/auth/server';
import Fuse from 'fuse.js';

const getName = (user: OrganizationMembership): string | undefined => {
  let name = user.publicUserData?.firstName;

  if (name && user.publicUserData?.lastName) {
    name = `${name} ${user.publicUserData.lastName}`;
  } else if (!name) {
    name = user.publicUserData?.identifier;
  }

  return name;
};

export const searchUsers = async (
  query: string
): Promise<
  | {
      data: string[];
    }
  | {
      error: unknown;
    }
> => {
  try {
    const { orgId } = await auth();

    if (!orgId) {
      throw new Error('Not logged in');
    }

    const clerk = await clerkClient();

    const members = await clerk.organizations.getOrganizationMembershipList({
      organizationId: orgId,
      limit: 100,
    });

    const users = members.data.map((user) => ({
      id: user.id,
      name: getName(user) ?? user.publicUserData?.identifier,
      imageUrl: user.publicUserData?.imageUrl,
    }));

    const fuse = new Fuse(users, {
      keys: ['name'],
      minMatchCharLength: 1,
      threshold: 0.3,
    });

    const results = fuse.search(query);
    const data = results.map((result) => result.item.id);

    return { data };
  } catch (error) {
    return { error };
  }
};

================
File: apps/app/app/api/collaboration/auth/route.ts
================
import { auth, currentUser } from '@repo/auth/server';
import { authenticate } from '@repo/collaboration/auth';
import { tailwind } from '@repo/tailwind-config';

const COLORS = [
  tailwind.theme.colors.red[500],
  tailwind.theme.colors.orange[500],
  tailwind.theme.colors.amber[500],
  tailwind.theme.colors.yellow[500],
  tailwind.theme.colors.lime[500],
  tailwind.theme.colors.green[500],
  tailwind.theme.colors.emerald[500],
  tailwind.theme.colors.teal[500],
  tailwind.theme.colors.cyan[500],
  tailwind.theme.colors.sky[500],
  tailwind.theme.colors.blue[500],
  tailwind.theme.colors.indigo[500],
  tailwind.theme.colors.violet[500],
  tailwind.theme.colors.purple[500],
  tailwind.theme.colors.fuchsia[500],
  tailwind.theme.colors.pink[500],
  tailwind.theme.colors.rose[500],
];

export const POST = async () => {
  const user = await currentUser();
  const { orgId } = await auth();

  if (!user || !orgId) {
    return new Response('Unauthorized', { status: 401 });
  }

  return authenticate({
    userId: user.id,
    orgId,
    userInfo: {
      name:
        user.fullName ?? user.emailAddresses.at(0)?.emailAddress ?? undefined,
      avatar: user.imageUrl ?? undefined,
      color: COLORS[Math.floor(Math.random() * COLORS.length)],
    },
  });
};

================
File: apps/app/app/components/ClerkContextTest.tsx
================
'use client';

import { useUser } from '@clerk/nextjs';

export const ClerkContextTest = () => {
  const { user, isSignedIn, isLoading } = useUser();
  console.log(user)
  console.log(isSignedIn)

  if (isLoading) {
    return <p>Loading Clerk context...</p>;
  }

  if (isSignedIn) {
    return <p>Clerk context is working in root layout. User ID: {user?.id}</p>;
  }

  return <p>Clerk context is working in root layout, but user is not signed in (as expected here).</p>;
};

================
File: apps/app/app/middleware/tenant-middleware.ts
================
// // apps/app/middleware/tenant.ts
// import { NextResponse, type NextRequest } from 'next/server';
// import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/queries/tenant-lookup';
// import { createTenantConnection } from '@repo/database/src/tenant-app/tenant-connection-db';
// import * as schema from '@repo/database/src/tenant-app/schema';  // Import your tenant schema
// import { env } from '@/env'; // Your environment variable utility
// import { auth } from '@repo/auth/server'; // Import auth from your auth package

// // Extend NextRequest to store the tenant Drizzle client as "tenantDb"
// declare module 'next/server' {
//   interface NextRequest {
//     tenantDb?: ReturnType<typeof createTenantConnection>;
//   }
// }

// export async function tenantMiddleware(req: NextRequest) {
//   const hostname = req.headers.get('host');
//   if (!hostname) {
//     return new NextResponse('No hostname found', { status: 400 });
//   }

//   // Correctly remove protocol (http:// or https://) for main domain check
//   const appUrlWithoutProtocol = env.NEXT_PUBLIC_APP_URL?.replace(/^https?:\/\//, '');
//   // Check if it's the main domain (including localhost:3000)
//   const isMainDomain = hostname === appUrlWithoutProtocol || hostname === 'localhost:3000';

//   const isStaticAsset =
//     req.nextUrl.pathname.startsWith('/_next') ||
//     req.nextUrl.pathname.startsWith('/static');

//   if (isMainDomain || isStaticAsset) {
//     console.log("Tenant Middleware - Main domain or static asset - bypassing tenant DB check");
//     return NextResponse.next(); // Proceed without tenant DB setup for main domain and static assets
//   }

//   // --- User-centric tenant lookup ---
//   const clerkAuth = await auth(); // Use auth() to get Clerk session
//   const userId = clerkAuth.userId; // Get userId from Clerk session

//   if (!userId) {
//     console.log("Tenant Middleware - No Clerk userId found - User not signed in on tenant subdomain - Redirecting to main domain");
//     return NextResponse.redirect(new URL('/', env.NEXT_PUBLIC_APP_URL)); // Redirect to main domain if no user on tenant subdomain
//   }

//   console.log("Tenant Middleware - Clerk userId found:", userId); // Log userId

//   // --- Fetch default organization and tenant connection URL based on userId ---
//   // **IMPORTANT:** Replace `fetchDefaultOrganizationForUser` with a function that:
//   // 1. Fetches the user's default organization from your main app DB using `userId`.
//   // 2. Extracts the subdomain or tenant identifier from the organization data.
//   // 3. Returns the subdomain/tenant identifier.
//   const defaultOrganization = await fetchDefaultOrganizationForUser(userId); //  <--  **REPLACE THIS with user-centric organization fetch**
//   const subdomain = defaultOrganization?.subdomainSlug; // Assuming your organization object has 'subdomainSlug'

//   if (!subdomain) {
//     console.log("Tenant Middleware - No default organization or subdomain found for user - Redirecting to onboarding or main domain");
//     return NextResponse.redirect(new URL('/onboarding', env.NEXT_PUBLIC_APP_URL)); // Or redirect to main domain if no org
//   }

//   console.log("Tenant Middleware - Resolved Subdomain from User's Organization:", subdomain); // Log resolved subdomain

//   const connectionUrl = await getTenantConnectionUrl(subdomain); // Uses Redis caching
//   console.log("Tenant Middleware - Connection URL from Redis:", connectionUrl);

//   if (!connectionUrl) {
//     console.log("Tenant Middleware - No connection URL found for subdomain - Returning 500");
//     return new NextResponse('Internal Server Error - Tenant DB Connection Not Found', { status: 500 }); // Indicate tenant DB issue
//   }

//   try {
//     // Use the dedicated connection helper, passing in the tenant schema.
//     const tenantDb = createTenantConnection(connectionUrl, schema);
//     req.tenantDb = tenantDb; // Attach the client to the request
//     console.log("Tenant Middleware - Tenant DB connection established for user");
//     return NextResponse.next();
//   } catch (error) {
//     console.error('Tenant middleware error (DB connection):', error);
//     console.log("Tenant Middleware - Tenant DB connection error - Returning 500");
//     return new NextResponse('Internal Server Error - DB Connection Failed', { status: 500 }); // Indicate DB connection failure
//   }
// }

================
File: apps/app/app/utils/tenant-db.ts
================
// apps/app/utils/tenant-db.ts
import type { NextRequest } from 'next/server';
import type { DrizzleClient } from '@repo/database/src/tenant-app/tenant-connection-db';

/**
 * Retrieves the tenant database client from the request context.
 * This function should only be called in route handlers or server components
 * that are guaranteed to be within the scope of the tenantMiddleware.
 */
export function getTenantDbClient(request: NextRequest): DrizzleClient {
  const tenantDb = request.tenantDb;
  if (!tenantDb) {
    throw new Error(
      "Tenant database client not initialized. Ensure that tenantMiddleware has run on this request."
    );
  }
  return tenantDb;
}

================
File: apps/app/app/global-error.tsx
================
'use client';

import { Button } from '@repo/design-system/components/ui/button';
import { fonts } from '@repo/design-system/lib/fonts';
import { captureException } from '@sentry/nextjs';
import type NextError from 'next/error';
import { useEffect } from 'react';

type GlobalErrorProperties = {
  readonly error: NextError & { digest?: string };
  readonly reset: () => void;
};

const GlobalError = ({ error, reset }: GlobalErrorProperties) => {
  useEffect(() => {
    captureException(error);
  }, [error]);

  return (
    <html lang="en" className={fonts}>
      <body>
        <h1>Oops, something went wrong</h1>
        <Button onClick={() => reset()}>Try again</Button>
      </body>
    </html>
  );
};

export default GlobalError;

================
File: apps/app/app/layout.tsx
================
import '@repo/design-system/styles/globals.css';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html lang="en" className={fonts} suppressHydrationWarning>
    <body>
      <DesignSystemProvider>
        {children}
      </DesignSystemProvider>
      <Toolbar />
    </body>
  </html>
);

export default RootLayout;

================
File: apps/app/.env.example
================
# Server
CLERK_SECRET_KEY=""
CLERK_WEBHOOK_SECRET=""
RESEND_FROM=""
DATABASE_URL=""
RESEND_TOKEN=""
STRIPE_SECRET_KEY=""
STRIPE_WEBHOOK_SECRET=""
BETTERSTACK_API_KEY=""
BETTERSTACK_URL=""
FLAGS_SECRET=""
ARCJET_KEY=""
SVIX_TOKEN=""
LIVEBLOCKS_SECRET=""
BASEHUB_TOKEN=""
VERCEL_PROJECT_PRODUCTION_URL="http://localhost:3000"
KNOCK_API_KEY=""
KNOCK_FEED_CHANNEL_ID=""
KNOCK_SECRET_API_KEY=""

# Client
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=""
NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in"
NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up"
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL="/"
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL="/"
NEXT_PUBLIC_GA_MEASUREMENT_ID=""
NEXT_PUBLIC_POSTHOG_KEY=""
NEXT_PUBLIC_POSTHOG_HOST=""
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NEXT_PUBLIC_WEB_URL="http://localhost:3001"
NEXT_PUBLIC_DOCS_URL="http://localhost:3004"

================
File: apps/app/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# prisma
.env

# react.email
.react-email

# Sentry
.sentryclirc

================
File: apps/app/env.ts
================
import { keys as analytics } from '@repo/analytics/keys';
import { keys as auth } from '@repo/auth/keys';
import { keys as collaboration } from '@repo/collaboration/keys';
import { keys as database } from '@repo/database/keys';
import { keys as email } from '@repo/email/keys';
import { keys as flags } from '@repo/feature-flags/keys';
import { keys as core } from '@repo/next-config/keys';
import { keys as notifications } from '@repo/notifications/keys';
import { keys as observability } from '@repo/observability/keys';
import { keys as security } from '@repo/security/keys';
import { keys as webhooks } from '@repo/webhooks/keys';
import { createEnv } from '@t3-oss/env-nextjs';

export const env = createEnv({
  extends: [
    auth(),
    analytics(),
    collaboration(),
    core(),
    database(),
    email(),
    flags(),
    notifications(),
    observability(),
    security(),
    webhooks(),
  ],
  server: {},
  client: {},
  runtimeEnv: {},
});

================
File: apps/app/instrumentation.ts
================
import { initializeSentry } from '@repo/observability/instrumentation';

export const register = initializeSentry();

================
File: apps/app/liveblocks.config.ts
================
export * from '@repo/collaboration/config';

================
File: apps/app/middleware.ts
================
import { authMiddleware } from '@repo/auth/middleware';
import {
  noseconeMiddleware,
  noseconeOptions,
  noseconeOptionsWithToolbar,
} from '@repo/security/middleware';
import { env } from './env';

const securityHeaders = env.FLAGS_SECRET
  ? noseconeMiddleware(noseconeOptionsWithToolbar)
  : noseconeMiddleware(noseconeOptions);

export default authMiddleware(() => securityHeaders());

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};

================
File: apps/app/next.config.ts
================
import { env } from '@/env';
import { withToolbar } from '@repo/feature-flags/lib/toolbar';
import { config, withAnalyzer } from '@repo/next-config';
import { withLogtail, withSentry } from '@repo/observability/next-config';
import type { NextConfig } from 'next';

let nextConfig: NextConfig = withToolbar(withLogtail({ ...config }));

if (env.VERCEL) {
  nextConfig = withSentry(nextConfig);
}

if (env.ANALYZE === 'true') {
  nextConfig = withAnalyzer(nextConfig);
}

export default nextConfig;

================
File: apps/app/package.json
================
{
  "name": "app",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000 --turbopack",
    "build": "next build",
    "start": "next start",
    "analyze": "ANALYZE=true pnpm build",
    "test": "NODE_ENV=test vitest run",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@neondatabase/serverless": "^0.10.4",
    "@prisma/client": "6.2.1",
    "@repo/analytics": "workspace:*",
    "@repo/auth": "workspace:*",
    "@repo/collaboration": "workspace:*",
    "@repo/database": "workspace:*",
    "@repo/design-system": "workspace:*",
    "@repo/feature-flags": "workspace:*",
    "@repo/next-config": "workspace:*",
    "@repo/notifications": "workspace:*",
    "@repo/observability": "workspace:*",
    "@repo/security": "workspace:*",
    "@repo/seo": "workspace:*",
    "@repo/tailwind-config": "workspace:*",
    "@repo/webhooks": "workspace:*",
    "@sentry/nextjs": "^8.50.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.2",
    "fuse.js": "^7.0.0",
    "import-in-the-middle": "^1.12.0",
    "lucide-react": "^0.473.0",
    "next": "15.1.6",
    "next-themes": "^0.4.4",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "require-in-the-middle": "^7.4.0",
    "ws": "^8.18.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/testing": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/react": "^16.2.0",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "19.0.3",
    "@types/ws": "^8.5.14",
    "jsdom": "^26.0.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3",
    "vitest": "^3.0.3"
  }
}

================
File: apps/app/postcss.config.mjs
================
export { default } from '@repo/design-system/postcss.config.mjs';

================
File: apps/app/sentry.client.config.ts
================
import { initializeSentry } from '@repo/observability/client';

initializeSentry();

================
File: apps/app/tailwind.config.ts
================
export { config as default } from '@repo/tailwind-config/config';

================
File: apps/app/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "next.config.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ]
}

================
File: apps/app/vitest.config.ts
================
export { default } from '@repo/testing';

================
File: apps/docs/api-reference/endpoint/create.mdx
================
---
title: 'Create Plant'
openapi: 'POST /plants'
---

================
File: apps/docs/api-reference/endpoint/delete.mdx
================
---
title: 'Delete Plant'
openapi: 'DELETE /plants/{id}'
---

================
File: apps/docs/api-reference/endpoint/get.mdx
================
---
title: 'Get Plants'
openapi: 'GET /plants'
---

================
File: apps/docs/api-reference/introduction.mdx
================
---
title: 'Introduction'
description: 'Example section for showcasing API endpoints'
---

<Note>
  If you're not looking to build API reference documentation, you can delete
  this section by removing the api-reference folder.
</Note>

## Welcome

There are two ways to build API documentation: [OpenAPI](https://mintlify.com/docs/api-playground/openapi/setup) and [MDX components](https://mintlify.com/docs/api-playground/mdx/configuration). For the starter kit, we are using the following OpenAPI specification.

<Card
  title="Plant Store Endpoints"
  icon="leaf"
  href="https://github.com/mintlify/starter/blob/main/api-reference/openapi.json"
>
  View the OpenAPI specification file
</Card>

## Authentication

All API endpoints are authenticated using Bearer tokens and picked up from the specification file.

```json
"security": [
  {
    "bearerAuth": []
  }
]
```

================
File: apps/docs/api-reference/openapi.json
================
{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://sandbox.mintlify.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}

================
File: apps/docs/authentication/log-in.mdx
================
## Lavel AI: Multi-Tenant System Architecture Documentation

### 1. Introduction

Lavel AI is a multi-tenant SaaS platform built using Next.js and a monorepo architecture (powered by Turbo Repo). It provides AI-powered legal tools for legal professionals in Mexico. Each organization using Lavel AI is considered a "tenant," and each tenant has its own logically isolated PostgreSQL database (hosted on Neon). Users access their organization's workspace via a unique subdomain (e.g., org-slug.lavel.ai).

### 2. Core Concepts

    1. Tenant: A single organization using the Lavel AI platform. Each tenant has its own isolated database.

    2. Subdomain: Each tenant is identified by a unique subdomain (e.g., org-slug.lavel.ai). The subdomain is used to determine which tenant database to connect to.

    3. Main Application Database: A central PostgreSQL database (also on Neon) that stores global application data, including:

        - organizations: Information about each tenant (organization name, slug, subdomain slug, etc.).

        - projects: Links organizations to their database connection URLs. (The connectionUrl field is critical.)

        - users: User accounts.

        - organization_members: Maps users to organizations.

    4. Tenant Database: A separate PostgreSQL database for each tenant, containing that tenant's specific data (e.g., legal documents, case information, AI model outputs).

    5. Authentication: Handled by Clerk. Users log in on the main domain (lavel.ai) and are then redirected to their organization's subdomain.

    6. Authorization: Clerk provides the authentication and basic user information. Role-Based Access Control (RBAC) within each tenant's application would be a separate layer built on top of this (not fully detailed in the existing code, but mentioned as a future step).

    7. Caching: Redis, provided by Upstash, is used to cache the mapping between subdomains and database connection URLs, significantly improving performance.

### 3. System Flow (User Login and Data Access)

The following diagram illustrates the request flow, followed by a detailed explanation:

```mermaid
sequenceDiagram
    participant UserBrowser as User Browser
    participant VercelEdge as Vercel Edge Network
    participant TenantMiddleware as Tenant Middleware
    participant AuthMiddleware as Auth Middleware
    participant AppLayout as App Layout
    participant RouteHandler as Route Handler
    participant MainDB as Main Database (Neon)
    participant Redis as Redis (Upstash)
    participant TenantDB as Tenant Database (Neon)

    Note over UserBrowser,VercelEdge: User visits lavel.ai (or subdomain)

    UserBrowser->>VercelEdge: Initial Request
    VercelEdge->>TenantMiddleware: Run Tenant Middleware

    alt Main Domain (lavel.ai)
        TenantMiddleware->>AuthMiddleware: No tenant, proceed
        AuthMiddleware->>UserBrowser: Redirect to Clerk Login (if unauthenticated)
        Note over UserBrowser,AuthMiddleware: User logs in via Clerk
        AuthMiddleware->>AppLayout: User is authenticated
        AppLayout->>MainDB: fetchDefaultOrganizationForUser(userId)
        MainDB-->>AppLayout: Organization Data (subdomainSlug)
        AppLayout->>UserBrowser: Redirect to subdomain
        Note over UserBrowser,VercelEdge: NEW Request to subdomain
        UserBrowser->>VercelEdge: Subdomain Request
        VercelEdge->>TenantMiddleware: Run Tenant Middleware
    end

    alt Subdomain Request (e.g., tenant-a.lavel.ai)
        TenantMiddleware->>Redis: Get connection URL for subdomain
        opt Cache Hit
            Redis-->>TenantMiddleware: Cached URL
        else Cache Miss
            TenantMiddleware->>MainDB: Get organization by subdomain
            MainDB-->>TenantMiddleware: Organization Data
            TenantMiddleware->>MainDB: Get project by organization ID
            MainDB-->>TenantMiddleware: Project Data (connectionUrl)
            TenantMiddleware->>Redis: Store connection URL in cache
        end
        alt Connection URL Found
          TenantMiddleware->>TenantDB: Create Drizzle Client (tenantDb)
          TenantMiddleware->>TenantMiddleware: Attach tenantDb to req
        else Connection URL Not Found
          TenantMiddleware->>UserBrowser: Redirect to lavel.ai (or 404)
          Note over UserBrowser,VercelEdge: End of flow (error)
        end

    end

    TenantMiddleware->>AuthMiddleware: Proceed to Auth Middleware
    AuthMiddleware->>UserBrowser: Verify Clerk Session
    alt User Authenticated
       AuthMiddleware->>RouteHandler:  Proceed to route
        RouteHandler->>TenantMiddleware: getTenantDbClient(req)
        TenantMiddleware-->>RouteHandler: Return tenantDb
        RouteHandler->>TenantDB: Query Tenant Database
        TenantDB-->>RouteHandler: Data
        RouteHandler->>UserBrowser: Return response (data or UI)
    else User NOT Authenticated
        AuthMiddleware->>UserBrowser: Redirect to Clerk login (main domain)
    end
```

### Step-by-Step Explanation:

    Request Initiation: The user's browser makes a request to either the main domain (lavel.ai) or a tenant subdomain (e.g., tenant-a.lavel.ai).

    Tenant Middleware (Always Runs First): The tenantMiddleware in apps/app/middleware/tenant.ts is the first piece of code executed.

        Main Domain: If the request is to lavel.ai, the middleware does nothing related to databases. It simply passes control to the next middleware (Clerk).

        Subdomain: If the request is to a subdomain, the middleware extracts the subdomain slug. It then calls getTenantConnectionUrl to retrieve the database connection URL.

    getTenantConnectionUrl (with Redis Caching):

        This function (in @repo/database/src/tenant-app/tenant-lookup.ts) first checks the Redis cache for an existing entry for the given subdomain.

        Cache Hit: If found in Redis, the cached URL is returned immediately.

        Cache Miss: If not in Redis, the function queries the main application database (using Drizzle ORM) to find the organization and its associated project, retrieving the connectionUrl. The result is then stored in Redis with a TTL (Time-To-Live) for future requests.

        No Tenant: If no matching organization/project is found, the function returns null. The middleware then redirects the user to the main domain (or a 404 page).

    Tenant Database Connection (Subdomain Only): If getTenantConnectionUrl returns a URL, the tenantMiddleware creates a new Drizzle ORM client specifically for that tenant's database using the retrieved URL. This client is attached to the req object (req.tenantDb).

    Clerk Authentication Middleware: The Clerk middleware (@repo/auth/middleware.ts) runs after the tenantMiddleware. It verifies the user's session.

        Authenticated: If the user is logged in, Clerk adds user information to the request, and the request proceeds.

        Not Authenticated: Clerk redirects the user to the Clerk login page (on the main domain).

    App Layout (Conditional Redirection): The AppLayout component (apps/app/app/(authenticated)/layout.tsx) runs for authenticated routes.

        Main Domain + Authenticated: This is the crucial redirection step. If the user is on the main domain and is authenticated, the layout calls fetchDefaultOrganizationForUser to get the user's organization and its subdomain slug. It then redirects the user to the appropriate subdomain URL.

        Subdomain: If the user is already on a subdomain, the layout does not redirect. The tenantMiddleware has already handled the database connection.

    Route Handlers/Server Components: Finally, the requested page or API endpoint (route handler) is executed.

        These components use the getTenantDbClient(req) utility function (from apps/app/utils/tenant-db.ts) to retrieve the Drizzle client that was attached to the request by the tenantMiddleware. This ensures that they are interacting with the correct tenant database.

        The route handler or component performs its logic (e.g., fetching data, processing requests) and returns a response.

### 4. Component Breakdown:

    | Component | Location | Description |
    |-----------|----------|-------------|
    | tenantMiddleware | apps/app/middleware/tenant.ts | Identifies the tenant based on the subdomain (if present) and sets up the Drizzle client for the tenant's database. Runs before authentication. If on the main domain, it does nothing related to databases. |
    | authMiddleware | @repo/auth/middleware.ts | Wrapper around Clerk's authentication middleware. Verifies user sessions. Redirects to Clerk login if not authenticated. |
    | AppLayout | apps/app/app/(authenticated)/layout.tsx | Layout for authenticated routes. Handles post-login redirection to the user's organization subdomain if the user logged in on the main domain. Gets the user's organization via fetchDefaultOrganizationForUser. |
    | getTenantConnectionUrl | @repo/database/src/tenant-app/tenant-lookup.ts | Retrieves the database connection URL for a given subdomain. Uses Redis caching for performance. Queries the main application database if the URL is not in the cache. |
    | fetchDefaultOrganizationForUser | @repo/database/src/main-app/queries/organization-queries.ts | Queries the main database to get the organization a user is part of. |
    | getTenantDbClient | apps/app/utils/tenant-db.ts | Utility function to retrieve the tenant-specific Drizzle client from the request context (req.tenantDb). Used in route handlers and server components to access the correct database. Throws an error if the client is not present, ensuring that tenant-specific code only runs with a valid tenant. |
    | Route Handlers/Server Components | apps/app/... | The actual application logic (pages and API endpoints). They use getTenantDbClient to access the appropriate database. |
    | Main Application Database Schema | @repo/database/src/main-app/schema | Defines the schema for the main application database (organizations, projects, users, organization_members). |
    | Tenant Database Schema | @repo/database/src/tenant-app/schema | Defines the schema for each tenant's database. This is where you would define tables specific to your application's data model (e.g., legal documents, client information, etc.). |
    | Redis Client | @repo/rate-limit/ | Used for caching. The same Redis instance can be used for both rate limiting and caching tenant connection URLs. |
    | Main Application Database | @repo/database/src/main-app/db.ts | Initializes the Drizzle client for the main application database using environment variables. |
    | Tenant Application Database | @repo/database/src/tenant-app/tenant-connection-db.ts | Initializes the Drizzle client for the tenant application database, by creating a tenant connection. |
    | Clerk Webhook Handler (Optional) | apps/api/app/webhooks/clerk/route.ts | Handles webhook events from Clerk (e.g., user creation, organization membership changes). Can be used to keep the main application database synchronized with Clerk. Currently updates user metadata, but this is no longer the primary way to get organization information. |

### Component Interactions:

    - The User Browser initiates requests to either the main domain or a tenant subdomain.

    - Vercel Edge Network routes the request to the appropriate Next.js application.

    - Tenant Middleware always runs first. It determines if a tenant database connection is needed and sets it up if so.

    - Auth Middleware runs next, handling Clerk authentication.

    - App Layout handles post-login redirection on the main domain.

    - Route Handlers/Server Components use getTenantDbClient to access the correct database (main or tenant).

    - getTenantConnectionUrl interacts with both Redis and the Main Database to retrieve connection URLs.

    - Clerk Webhook uses clerkClient to update the database


    Step‑by‑Step User Flow and System Actions
1. User Visits the Marketing Website (lavel.ai)

    User Action:
    The user navigates to the main (marketing) website at lavel.ai.
    System Behavior:
        The request is received at the edge (Vercel Edge or similar).
        Global Middleware:
        Next.js middleware runs on every request. This middleware should include Clerk’s authMiddleware (from your @repo/auth/middleware) as well as any custom middleware (such as your tenant middleware and security headers).
        Expectation:
        Clerk’s middleware detects the request and sets up the session context (for example, by reading Clerk’s cookies and headers).
        If the request is for the main domain, the tenant middleware may be skipped (or behave differently) to let Clerk do its work.

2. User Clicks the Login Button

    User Action:
    The user clicks the "Login" button on the marketing site.
    System Behavior:
        The user is redirected to a dedicated sign‑in page (for example, at /app/app/(unauthenticated)/sign-in).
        The sign‑in page renders Clerk’s SignIn component (from @repo/auth/components/sign-in), which is a client‑side component.
        Clerk’s client‑side code displays the sign‑in UI, and upon submission, the session is established via Clerk.

3. Post‑Sign‑In Redirection and Session Setup

    User Action:
    After signing in, Clerk handles the session (via cookies) and redirects the user.
    System Behavior:
        The request now comes in with Clerk’s session cookies.
        Crucial Point:
        The Next.js middleware (which must be placed correctly) runs on the incoming request and is expected to run Clerk’s clerkMiddleware.

            If this middleware is not detected, then when server‑side code (like your authenticated layout) calls auth() or currentUser(), Clerk cannot find the session context and raises the error:

            Error: Clerk: auth() was called but Clerk can't detect usage of clerkMiddleware().

            What Must Happen:
                Clerk’s middleware must run before any server‑side helper calls (like auth()).
                The middleware file must be placed at the correct location (inside the Next.js app directory, such as in apps/app/app/middleware.ts if that is your app root).
                The middleware’s matcher must cover the authenticated routes (such as /app/(authenticated)/...).

4. User Accesses an Authenticated Page

    User Action:
    The user navigates to an authenticated route (for example, app/app/(authenticated)/page.tsx).
    System Behavior:
        The request goes through your middleware chain.
        Critical Requirement:

            The middleware chain must have already run Clerk’s authMiddleware so that when your authenticated layout code calls:

    const { userId, redirectToSignIn } = await auth();

    Clerk can detect the session.

    Then, your layout code may perform organization lookup and, if necessary, redirect to a tenant subdomain.

Expected Outcome:
If everything is set up correctly, auth() finds the session context and returns a valid userId (or other session details). If no session exists, it returns instructions for redirection.

================
File: apps/docs/essentials/code.mdx
================
---
title: 'Code Blocks'
description: 'Display inline code and code blocks'
icon: 'code'
---

## Basic

### Inline Code

To denote a `word` or `phrase` as code, enclose it in backticks (`).

```
To denote a `word` or `phrase` as code, enclose it in backticks (`).
```

### Code Block

Use [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language.

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````md
```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

================
File: apps/docs/essentials/images.mdx
================
---
title: 'Images and Embeds'
description: 'Add image, video, and other HTML elements'
icon: 'image'
---

<img
  style={{ borderRadius: '0.5rem' }}
  src="https://mintlify-assets.b-cdn.net/bigbend.jpg"
/>

## Image

### Using Markdown

The [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code

```md
![title](/path/image.jpg)
```

Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.

### Using Embeds

To get more customizability with images, you can also use [embeds](/writing-content/embed) to add images

```html
<img height="200" src="/path/image.jpg" />
```

## Embeds and HTML elements

<iframe
  width="560"
  height="315"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
  style={{ width: '100%', borderRadius: '0.5rem' }}
></iframe>

<br />

<Tip>

Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.

</Tip>

### iFrames

Loads another HTML page within the document. Most commonly used for embedding videos.

```html
<iframe src="https://www.youtube.com/embed/4KzFe50RQkQ"> </iframe>
```

================
File: apps/docs/essentials/markdown.mdx
================
---
title: 'Markdown Syntax'
description: 'Text, title, and styling in standard markdown'
icon: 'text-size'
---

## Titles

Best used for section headers.

```md
## Titles
```

### Subtitles

Best use to subsection headers.

```md
### Subtitles
```

<Tip>

Each **title** and **subtitle** creates an anchor and also shows up on the table of contents on the right.

</Tip>

## Text Formatting

We support most markdown formatting. Simply add `**`, `_`, or `~` around text to format it.

| Style         | How to write it   | Result          |
| ------------- | ----------------- | --------------- |
| Bold          | `**bold**`        | **bold**        |
| Italic        | `_italic_`        | _italic_        |
| Strikethrough | `~strikethrough~` | ~strikethrough~ |

You can combine these. For example, write `**_bold and italic_**` to get **_bold and italic_** text.

You need to use HTML to write superscript and subscript text. That is, add `<sup>` or `<sub>` around your text.

| Text Size   | How to write it          | Result                 |
| ----------- | ------------------------ | ---------------------- |
| Superscript | `<sup>superscript</sup>` | <sup>superscript</sup> |
| Subscript   | `<sub>subscript</sub>`   | <sub>subscript</sub>   |

## Linking to Pages

You can add a link by wrapping text in `[]()`. You would write `[link to google](https://google.com)` to [link to google](https://google.com).

Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, `[link to text](/writing-content/text)` links to the page "Text" in our components section.

Relative links like `[link to text](../text)` will open slower because we cannot optimize them as easily.

## Blockquotes

### Singleline

To create a blockquote, add a `>` in front of a paragraph.

> Dorothy followed her through many of the beautiful rooms in her castle.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
```

### Multiline

> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
```

### LaTeX

Mintlify supports [LaTeX](https://www.latex-project.org) through the Latex component.

<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>

```md
<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>
```

================
File: apps/docs/essentials/navigation.mdx
================
---
title: 'Navigation'
description: 'The navigation field in mint.json defines the pages that go in the navigation menu'
icon: 'map'
---

The navigation menu is the list of links on every website.

You will likely update `mint.json` every time you add a new page. Pages do not show up automatically.

## Navigation syntax

Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.

<CodeGroup>

```json Regular Navigation
"navigation": [
    {
        "group": "Getting Started",
        "pages": ["quickstart"]
    }
]
```

```json Nested Navigation
"navigation": [
    {
        "group": "Getting Started",
        "pages": [
            "quickstart",
            {
                "group": "Nested Reference Pages",
                "pages": ["nested-reference-page"]
            }
        ]
    }
]
```

</CodeGroup>

## Folders

Simply put your MDX files in folders and update the paths in `mint.json`.

For example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.

<Warning>

You cannot use `api` for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.

</Warning>

```json Navigation With Folder
"navigation": [
    {
        "group": "Group Name",
        "pages": ["your-folder/your-page"]
    }
]
```

## Hidden Pages

MDX files not included in `mint.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.

================
File: apps/docs/essentials/reusable-snippets.mdx
================
---
title: Reusable Snippets
description: Reusable, custom snippets to keep content in sync
icon: 'recycle'
---

import SnippetIntro from '/snippets/snippet-intro.mdx';

<SnippetIntro />

## Creating a custom snippet

**Pre-condition**: You must create your snippet file in the `snippets` directory.

<Note>
  Any page in the `snippets` directory will be treated as a snippet and will not
  be rendered into a standalone page. If you want to create a standalone page
  from the snippet, import the snippet into another file and call it as a
  component.
</Note>

### Default export

1. Add content to your snippet file that you want to re-use across multiple
   locations. Optionally, you can add variables that can be filled in via props
   when you import the snippet.

```mdx snippets/my-snippet.mdx
Hello world! This is my content I want to reuse across pages. My keyword of the
day is {word}.
```

<Warning>
  The content that you want to reuse must be inside the `snippets` directory in
  order for the import to work.
</Warning>

2. Import the snippet into your destination file.

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet word="bananas" />
```

### Reusable variables

1. Export a variable from your snippet file:

```mdx snippets/path/to/custom-variables.mdx
export const myName = 'my name';

export const myObject = { fruit: 'strawberries' };
```

2. Import the snippet from your destination file and use the variable:

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { myName, myObject } from '/snippets/path/to/custom-variables.mdx';

Hello, my name is {myName} and I like {myObject.fruit}.
```

### Reusable components

1. Inside your snippet file, create a component that takes in props by exporting
   your component in the form of an arrow function.

```mdx snippets/custom-component.mdx
export const MyComponent = ({ title }) => (
  <div>
    <h1>{title}</h1>
    <p>... snippet content ...</p>
  </div>
);
```

<Warning>
  MDX does not compile inside the body of an arrow function. Stick to HTML
  syntax when you can or use a default export if you need to use MDX.
</Warning>

2. Import the snippet into your destination file and pass in the props

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { MyComponent } from '/snippets/custom-component.mdx';

Lorem ipsum dolor sit amet.

<MyComponent title={'Custom title'} />
```

================
File: apps/docs/essentials/settings.mdx
================
---
title: 'Global Settings'
description: 'Mintlify gives you complete control over the look and feel of your documentation using the mint.json file'
icon: 'gear'
---

Every Mintlify site needs a `mint.json` file with the core configuration settings. Learn more about the [properties](#properties) below.

## Properties

<ResponseField name="name" type="string" required>
Name of your project. Used for the global title.

Example: `mintlify`

</ResponseField>

<ResponseField name="navigation" type="Navigation[]" required>
  An array of groups with all the pages within that group
  <Expandable title="Navigation">
    <ResponseField name="group" type="string">
    The name of the group.

    Example: `Settings`

    </ResponseField>
    <ResponseField name="pages" type="string[]">
    The relative paths to the markdown files that will serve as pages.

    Example: `["customization", "page"]`

    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="logo" type="string or object">
  Path to logo image or object with path to "light" and "dark" mode logo images
  <Expandable title="Logo">
    <ResponseField name="light" type="string">
      Path to the logo in light mode
    </ResponseField>
    <ResponseField name="dark" type="string">
      Path to the logo in dark mode
    </ResponseField>
    <ResponseField name="href" type="string" default="/">
      Where clicking on the logo links you to
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="favicon" type="string">
  Path to the favicon image
</ResponseField>

<ResponseField name="colors" type="Colors">
  Hex color codes for your global theme
  <Expandable title="Colors">
    <ResponseField name="primary" type="string" required>
      The primary color. Used for most often for highlighted content, section
      headers, accents, in light mode
    </ResponseField>
    <ResponseField name="light" type="string">
      The primary color for dark mode. Used for most often for highlighted
      content, section headers, accents, in dark mode
    </ResponseField>
    <ResponseField name="dark" type="string">
      The primary color for important buttons
    </ResponseField>
    <ResponseField name="background" type="object">
      The color of the background in both light and dark mode
      <Expandable title="Object">
        <ResponseField name="light" type="string" required>
          The hex color code of the background in light mode
        </ResponseField>
        <ResponseField name="dark" type="string" required>
          The hex color code of the background in dark mode
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="topbarLinks" type="TopbarLink[]">
  Array of `name`s and `url`s of links you want to include in the topbar
  <Expandable title="TopbarLink">
    <ResponseField name="name" type="string">
    The name of the button.

    Example: `Contact us`
    </ResponseField>
    <ResponseField name="url" type="string">
    The url once you click on the button. Example: `https://mintlify.com/contact`
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="topbarCtaButton" type="Call to Action">
  <Expandable title="Topbar Call to Action">
    <ResponseField name="type" type={'"link" or "github"'} default="link">
    Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars.
    </ResponseField>
    <ResponseField name="url" type="string">
    If `link`: What the button links to.
    
    If `github`: Link to the repository to load GitHub information from.
    </ResponseField>
    <ResponseField name="name" type="string">
    Text inside the button. Only required if `type` is a `link`.
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="versions" type="string[]">
  Array of version names. Only use this if you want to show different versions
  of docs with a dropdown in the navigation bar.
</ResponseField>

<ResponseField name="anchors" type="Anchor[]">
  An array of the anchors, includes the `icon`, `color`, and `url`.
  <Expandable title="Anchor">
    <ResponseField name="icon" type="string">
    The [Font Awesome](https://fontawesome.com/search?s=brands%2Cduotone) icon used to feature the anchor.

    Example: `comments`
    </ResponseField>
    <ResponseField name="name" type="string">
    The name of the anchor label.

    Example: `Community`
    </ResponseField>
    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in.
    </ResponseField>
    <ResponseField name="color" type="string">
      The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color.
    </ResponseField>
    <ResponseField name="version" type="string">
      Used if you want to hide an anchor until the correct docs version is selected.
    </ResponseField>
    <ResponseField name="isDefaultHidden" type="boolean" default="false">
      Pass `true` if you want to hide the anchor until you directly link someone to docs inside it.
    </ResponseField>
    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="topAnchor" type="Object">
  Override the default configurations for the top-most anchor.
  <Expandable title="Object">
    <ResponseField name="name" default="Documentation" type="string">
      The name of the top-most anchor
    </ResponseField>
    <ResponseField name="icon" default="book-open" type="string">
      Font Awesome icon.
    </ResponseField>
    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tabs" type="Tabs[]">
  An array of navigational tabs.
  <Expandable title="Tabs">
    <ResponseField name="name" type="string">
      The name of the tab label.
    </ResponseField>
    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the tab. Generally, this
      is the name of the folder you put your pages in.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="api" type="API">
  Configuration for API settings. Learn more about API pages at [API Components](/api-playground/demo).
  <Expandable title="API">
    <ResponseField name="baseUrl" type="string">
      The base url for all API endpoints. If `baseUrl` is an array, it will enable for multiple base url
      options that the user can toggle.
    </ResponseField>

    <ResponseField name="auth" type="Auth">
      <Expandable title="Auth">
        <ResponseField name="method" type='"bearer" | "basic" | "key"'>
          The authentication strategy used for all API endpoints.
        </ResponseField>
        <ResponseField name="name" type="string">
        The name of the authentication parameter used in the API playground.

        If method is `basic`, the format should be `[usernameName]:[passwordName]`
        </ResponseField>
        <ResponseField name="inputPrefix" type="string">
        The default value that's designed to be a prefix for the authentication input field.

        E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="playground" type="Playground">
      Configurations for the API playground

      <Expandable title="Playground">
        <ResponseField name="mode" default="show" type='"show" | "simple" | "hide"'>
          Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple`

          Learn more at the [playground guides](/api-playground/demo)
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="maintainOrder" type="boolean">
      Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file.

      <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning>
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="openapi" type="string | string[]">
  A string or an array of strings of URL(s) or relative path(s) pointing to your
  OpenAPI file.
  
  Examples:
  <CodeGroup>
    ```json Absolute
    "openapi": "https://example.com/openapi.json"
    ```
    ```json Relative
    "openapi": "/openapi.json"
    ```
    ```json Multiple
    "openapi": ["https://example.com/openapi1.json", "/openapi2.json", "/openapi3.json"]
    ```
  </CodeGroup>

</ResponseField>

<ResponseField name="footerSocials" type="FooterSocials">
  An object of social media accounts where the key:property pair represents the social media platform and the account url.
  
  Example: 
  ```json
  {
    "x": "https://x.com/mintlify",
    "website": "https://mintlify.com"
  }
  ```
  <Expandable title="FooterSocials">
    <ResponseField name="[key]" type="string">
    One of the following values `website`, `facebook`, `x`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`
    
    Example: `x`
    </ResponseField>
    <ResponseField name="property" type="string">
    The URL to the social platform.
    
    Example: `https://x.com/mintlify`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="feedback" type="Feedback">
  Configurations to enable feedback buttons

  <Expandable title="Feedback">
    <ResponseField name="suggestEdit" type="boolean" default="false">
    Enables a button to allow users to suggest edits via pull requests
    </ResponseField>
    <ResponseField name="raiseIssue" type="boolean" default="false">
    Enables a button to allow users to raise an issue about the documentation
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="modeToggle" type="ModeToggle">
  Customize the dark mode toggle.
  <Expandable title="ModeToggle">
    <ResponseField name="default" type={'"light" or "dark"'}>
      Set if you always want to show light or dark mode for new users. When not
      set, we default to the same mode as the user's operating system.
    </ResponseField>
    <ResponseField name="isHidden" type="boolean" default="false">
      Set to true to hide the dark/light mode toggle. You can combine `isHidden` with `default` to force your docs to only use light or dark mode. For example:
      
      <CodeGroup>
      ```json Only Dark Mode
      "modeToggle": {
        "default": "dark",
        "isHidden": true
      }
      ```

      ```json Only Light Mode
      "modeToggle": {
        "default": "light",
        "isHidden": true
      }
      ```
      </CodeGroup>

    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="backgroundImage" type="string">
  A background image to be displayed behind every page. See example with
  [Infisical](https://infisical.com/docs) and [FRPC](https://frpc.io).
</ResponseField>

================
File: apps/docs/images/hero-dark.svg
================
<svg width="700" height="320" viewBox="0 0 700 320" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2862_30)">
<rect width="700" height="320" rx="16" fill="url(#paint0_linear_2862_30)"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="white"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint1_radial_2862_30)"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint2_linear_2862_30)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M311.72 247.034C283.108 246.887 258.409 231.208 246.538 201.531C234.656 171.825 238.271 134.702 253.583 101.377C282.195 101.524 306.894 117.203 318.765 146.88C330.647 176.586 327.031 213.709 311.72 247.034Z" stroke="url(#paint3_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
<path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="white"/>
<path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="url(#paint4_radial_2862_30)"/>
<path d="M393.341 171.537C376.971 210.369 343.89 237.091 305.969 246.867C286.462 212.959 282.476 170.663 298.845 131.831C315.215 92.9978 348.295 66.2765 386.217 56.5004C405.724 90.4077 409.71 132.704 393.341 171.537Z" stroke="url(#paint5_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
<path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="white"/>
<path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint6_radial_2862_30)"/>
<path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
<path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint7_linear_2862_30)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M393.586 261.878C362.034 272.529 329.98 265.88 306.002 246.907C317.534 215.919 341.57 190.327 373.13 179.673C404.681 169.023 436.735 175.671 460.714 194.644C449.181 225.632 425.145 251.224 393.586 261.878Z" stroke="url(#paint8_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
<g opacity="0.8" filter="url(#filter0_f_2862_30)">
<circle cx="660" cy="-60" r="160" fill="#18E244" fill-opacity="0.4"/>
</g>
<g opacity="0.8" filter="url(#filter1_f_2862_30)">
<circle cx="20" cy="213" r="160" fill="#18CAE2" fill-opacity="0.33"/>
</g>
<g opacity="0.8" filter="url(#filter2_f_2862_30)">
<circle cx="660" cy="480" r="160" fill="#18E2B2" fill-opacity="0.52"/>
</g>
<g opacity="0.8" filter="url(#filter3_f_2862_30)">
<circle cx="20" cy="413" r="160" fill="#4018E2" fill-opacity="0.22"/>
</g>
<path opacity="0.2" d="M0 50H700" stroke="url(#paint9_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.1" d="M0 82H700" stroke="url(#paint10_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.2" d="M239 0L239 320" stroke="url(#paint11_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.1" d="M271 0L271 320" stroke="url(#paint12_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.2" d="M461 0L461 320" stroke="url(#paint13_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.1" d="M429 0L429 320" stroke="url(#paint14_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.2" d="M0 271H700" stroke="url(#paint15_radial_2862_30)" stroke-dasharray="4 4"/>
<path opacity="0.1" d="M0 239H700" stroke="url(#paint16_radial_2862_30)" stroke-dasharray="4 4"/>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 160H700" stroke="url(#paint17_linear_2862_30)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.2">
<path d="M511 -1L189 321" stroke="url(#paint18_linear_2862_30)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.2">
<path d="M511 321L189 -1" stroke="url(#paint19_linear_2862_30)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<circle cx="350" cy="160" r="111" stroke="white"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<circle cx="350" cy="160" r="79" stroke="white"/>
</g>
</g>
<defs>
<filter id="filter0_f_2862_30" x="260" y="-460" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
</filter>
<filter id="filter1_f_2862_30" x="-380" y="-187" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
</filter>
<filter id="filter2_f_2862_30" x="260" y="80" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
</filter>
<filter id="filter3_f_2862_30" x="-380" y="13" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
</filter>
<linearGradient id="paint0_linear_2862_30" x1="1.04308e-05" y1="320" x2="710.784" y2="26.0793" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299" stop-opacity="0.09"/>
<stop offset="0.729167" stop-color="#0D9373" stop-opacity="0.08"/>
</linearGradient>
<radialGradient id="paint1_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(208.697 189.703) rotate(-10.029) scale(169.097 167.466)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint2_linear_2862_30" x1="306.587" y1="93.5598" x2="252.341" y2="224.228" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint3_linear_2862_30" x1="311.84" y1="123.717" x2="253.579" y2="224.761" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint4_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(313.407 243.64) rotate(-75.7542) scale(203.632 223.902)">
<stop stop-color="#00BBBB"/>
<stop offset="0.712616" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint5_linear_2862_30" x1="308.586" y1="102.284" x2="383.487" y2="201.169" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint6_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(311.446 249.925) rotate(-20.3524) scale(174.776 163.096)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint7_linear_2862_30" x1="395.842" y1="169.781" x2="332.121" y2="263.82" gradientUnits="userSpaceOnUse">
<stop stop-color="#00B1BC"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint8_linear_2862_30" x1="395.842" y1="169.781" x2="370.99" y2="271.799" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint9_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 50) scale(398.125 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint10_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 82) scale(398.125 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint11_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(239 160) rotate(90) scale(182 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint12_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(271 160) rotate(90) scale(182 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint13_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(461 160) rotate(90) scale(182 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint14_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(429 160) rotate(90) scale(182 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint15_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 271) scale(398.125 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<radialGradient id="paint16_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 239) scale(398.125 182)">
<stop offset="0.348958" stop-color="#84FFD3"/>
<stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
</radialGradient>
<linearGradient id="paint17_linear_2862_30" x1="0" y1="160" x2="700" y2="160" gradientUnits="userSpaceOnUse">
<stop stop-color="white" stop-opacity="0.1"/>
<stop offset="0.5" stop-color="white"/>
<stop offset="1" stop-color="white" stop-opacity="0.1"/>
</linearGradient>
<linearGradient id="paint18_linear_2862_30" x1="511" y1="-1" x2="189" y2="321" gradientUnits="userSpaceOnUse">
<stop stop-color="white" stop-opacity="0.1"/>
<stop offset="0.5" stop-color="white"/>
<stop offset="1" stop-color="white" stop-opacity="0.1"/>
</linearGradient>
<linearGradient id="paint19_linear_2862_30" x1="511" y1="321" x2="189" y2="-0.999997" gradientUnits="userSpaceOnUse">
<stop stop-color="white" stop-opacity="0.1"/>
<stop offset="0.5" stop-color="white"/>
<stop offset="1" stop-color="white" stop-opacity="0.1"/>
</linearGradient>
<clipPath id="clip0_2862_30">
<rect width="700" height="320" rx="16" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: apps/docs/images/hero-light.svg
================
<svg width="700" height="320" viewBox="0 0 700 320" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2862_278)">
<rect width="700" height="320" rx="16" fill="url(#paint0_linear_2862_278)"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="white"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint1_radial_2862_278)"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint2_linear_2862_278)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M311.72 247.034C283.108 246.887 258.409 231.208 246.538 201.531C234.656 171.825 238.271 134.702 253.583 101.377C282.195 101.524 306.894 117.203 318.765 146.88C330.647 176.586 327.031 213.709 311.72 247.034Z" stroke="url(#paint3_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
<path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="white"/>
<path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="url(#paint4_radial_2862_278)"/>
<path d="M393.341 171.537C376.971 210.369 343.89 237.091 305.969 246.867C286.462 212.959 282.476 170.663 298.845 131.831C315.215 92.9978 348.295 66.2765 386.217 56.5004C405.724 90.4077 409.71 132.704 393.341 171.537Z" stroke="url(#paint5_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
<path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="white"/>
<path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint6_radial_2862_278)"/>
<path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
<path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint7_linear_2862_278)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M393.586 261.878C362.035 272.529 329.981 265.88 306.002 246.907C317.535 215.919 341.571 190.327 373.13 179.673C404.682 169.023 436.736 175.671 460.715 194.644C449.182 225.632 425.146 251.224 393.586 261.878Z" stroke="url(#paint8_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
<g opacity="0.8" filter="url(#filter0_f_2862_278)">
<circle cx="660" cy="-60" r="160" fill="#18E299" fill-opacity="0.4"/>
</g>
<g opacity="0.8" filter="url(#filter1_f_2862_278)">
<circle cx="20" cy="213" r="160" fill="#18E299" fill-opacity="0.33"/>
</g>
<g opacity="0.8" filter="url(#filter2_f_2862_278)">
<circle cx="660" cy="480" r="160" fill="#18E299" fill-opacity="0.52"/>
</g>
<g opacity="0.8" filter="url(#filter3_f_2862_278)">
<circle cx="20" cy="413" r="160" fill="#18E299" fill-opacity="0.22"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 50H700" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 82H700" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M239 0L239 320" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M271 0L271 320" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M461 0L461 320" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M350 0L350 320" stroke="url(#paint9_linear_2862_278)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M429 0L429 320" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 271H700" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 239H700" stroke="black" stroke-dasharray="4 4"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M0 160H700" stroke="url(#paint10_linear_2862_278)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M511 -1L189 321" stroke="url(#paint11_linear_2862_278)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.1">
<path d="M511 321L189 -1" stroke="url(#paint12_linear_2862_278)"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.05">
<circle cx="350" cy="160" r="111" stroke="black"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.05">
<circle cx="350" cy="160" r="79" stroke="black"/>
</g>
</g>
<defs>
<filter id="filter0_f_2862_278" x="260" y="-460" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
</filter>
<filter id="filter1_f_2862_278" x="-380" y="-187" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
</filter>
<filter id="filter2_f_2862_278" x="260" y="80" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
</filter>
<filter id="filter3_f_2862_278" x="-380" y="13" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
</filter>
<linearGradient id="paint0_linear_2862_278" x1="1.04308e-05" y1="320" x2="710.784" y2="26.0793" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299" stop-opacity="0.09"/>
<stop offset="0.729167" stop-color="#0D9373" stop-opacity="0.08"/>
</linearGradient>
<radialGradient id="paint1_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(208.697 189.703) rotate(-10.029) scale(169.097 167.466)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint2_linear_2862_278" x1="306.587" y1="93.5598" x2="252.341" y2="224.228" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint3_linear_2862_278" x1="311.84" y1="123.717" x2="253.579" y2="224.761" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint4_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(313.407 243.64) rotate(-75.7542) scale(203.632 223.902)">
<stop stop-color="#00BBBB"/>
<stop offset="0.712616" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint5_linear_2862_278" x1="308.586" y1="102.284" x2="383.487" y2="201.169" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint6_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(311.447 249.925) rotate(-20.3524) scale(174.776 163.096)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint7_linear_2862_278" x1="395.843" y1="169.781" x2="332.121" y2="263.82" gradientUnits="userSpaceOnUse">
<stop stop-color="#00B1BC"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint8_linear_2862_278" x1="395.843" y1="169.781" x2="370.991" y2="271.799" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<linearGradient id="paint9_linear_2862_278" x1="350" y1="0" x2="350" y2="320" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0"/>
<stop offset="0.0001" stop-opacity="0.3"/>
<stop offset="0.333333"/>
<stop offset="0.666667"/>
<stop offset="1" stop-opacity="0.3"/>
</linearGradient>
<linearGradient id="paint10_linear_2862_278" x1="0" y1="160" x2="700" y2="160" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0.1"/>
<stop offset="0.5"/>
<stop offset="1" stop-opacity="0.1"/>
</linearGradient>
<linearGradient id="paint11_linear_2862_278" x1="511" y1="-1" x2="189" y2="321" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0.1"/>
<stop offset="0.5"/>
<stop offset="1" stop-opacity="0.1"/>
</linearGradient>
<linearGradient id="paint12_linear_2862_278" x1="511" y1="321" x2="189" y2="-0.999997" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0.1"/>
<stop offset="0.5"/>
<stop offset="1" stop-opacity="0.1"/>
</linearGradient>
<clipPath id="clip0_2862_278">
<rect width="700" height="320" rx="16" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: apps/docs/logo/dark.svg
================
<svg width="160" height="24" viewBox="0 0 160 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="white"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="url(#paint0_radial_115_109)"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="url(#paint1_linear_115_109)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M7.9354 21.1112C4.89702 21.0957 2.27411 19.4306 1.01347 16.279C-0.248375 13.1244 0.135612 9.18218 1.76165 5.64327C4.80004 5.65882 7.42295 7.32385 8.68359 10.4755C9.94543 13.63 9.56144 17.5723 7.9354 21.1112Z" stroke="url(#paint2_linear_115_109)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="white"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="url(#paint3_radial_115_109)"/>
<path d="M16.6025 13.2251C14.8642 17.349 11.3512 20.1866 7.32411 21.2248C5.25257 17.624 4.82926 13.1324 6.56764 9.00855C8.30603 4.88472 11.819 2.04706 15.8461 1.00889C17.9176 4.60967 18.3409 9.10131 16.6025 13.2251Z" stroke="url(#paint4_linear_115_109)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="white"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint5_radial_115_109)"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint6_linear_115_109)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M16.5682 22.7874C13.2176 23.9184 9.81361 23.2124 7.2672 21.1975C8.49194 17.9068 11.0444 15.189 14.3959 14.0577C17.7465 12.9266 21.1504 13.6326 23.6968 15.6476C22.4721 18.9383 19.9196 21.656 16.5682 22.7874Z" stroke="url(#paint7_linear_115_109)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M34.2124 19V5.4H39.4924L41.6924 12.2L42.3724 14.74L43.0524 12.2L45.2524 5.4H50.4124V19H46.3324L46.5924 9.98L45.5324 13.68L43.7924 19H40.8324L39.0524 13.6L38.0324 10.02L38.2924 19H34.2124ZM52.4155 7.3V4.6H56.2955V7.3H52.4155ZM52.4155 19V8.14H56.2955V19H52.4155ZM58.1038 19V8.14H61.9838V9.58C62.6638 8.34 63.7438 7.76 65.0038 7.76C66.9638 7.76 68.6238 8.98 68.6238 11.78V19H64.7438V12.56C64.7438 11.34 64.3038 10.86 63.4838 10.86C62.6038 10.86 61.9838 11.58 61.9838 12.88V19H58.1038ZM70.9327 15.22V11.06H69.7327V8.14H70.9327V5.62H74.8127V8.14H76.9327V11.06H74.8127V14.6C74.8127 15.5 75.0327 16.06 76.2127 16.06H76.9327V19C76.4927 19.2 75.6727 19.38 74.6527 19.38C72.1527 19.38 70.9327 17.88 70.9327 15.22Z" fill="url(#paint8_radial_115_109)"/>
<path d="M87.232 10.519C87.232 13.687 94.1125 11.2285 94.1125 15.832C94.1125 17.9935 92.3635 19.198 89.971 19.198C87.562 19.198 85.912 18.0925 85.417 15.832H87.001C87.364 17.1685 88.3705 17.8945 89.9875 17.8945C91.6705 17.8945 92.5615 17.152 92.5615 16.03C92.5615 12.598 85.681 15.1555 85.681 10.618C85.681 9.001 87.034 7.582 89.509 7.582C91.6705 7.582 93.403 8.6215 93.8155 11.014H92.215C91.8685 9.529 90.9115 8.8855 89.476 8.8855C88.057 8.8855 87.232 9.529 87.232 10.519ZM96.2499 16.4755V11.3935H95.0289V10.2385H96.2499V8.2255H97.7019V10.2385H99.6324V11.3935H97.7019V16.4755C97.7019 17.5315 98.0154 18.0265 99.3024 18.0265H99.5994V19.066C99.4344 19.1485 99.0714 19.198 98.6589 19.198C97.0254 19.198 96.2499 18.3235 96.2499 16.4755ZM102.516 13.093H101.064C101.345 11.1625 102.615 10.024 104.76 10.024C107.103 10.024 108.242 11.3935 108.242 13.4395V16.888C108.242 17.8945 108.324 18.5215 108.555 19H107.021C106.856 18.6535 106.806 18.142 106.79 17.614C106.047 18.7195 104.859 19.198 103.803 19.198C101.988 19.198 100.767 18.3565 100.767 16.69C100.767 15.4855 101.427 14.611 102.714 14.182C103.902 13.786 105.107 13.687 106.79 13.6705V13.4725C106.79 12.0535 106.13 11.278 104.628 11.278C103.374 11.278 102.698 11.971 102.516 13.093ZM102.252 16.657C102.252 17.4655 102.929 17.944 103.952 17.944C105.569 17.944 106.79 16.6735 106.79 15.172V14.7595C103.061 14.7925 102.252 15.5845 102.252 16.657ZM110.787 19V10.2385H112.239V11.5915C112.833 10.519 113.774 10.024 114.83 10.024C115.176 10.024 115.49 10.1065 115.655 10.2385V11.542C115.407 11.4595 115.094 11.4265 114.747 11.4265C112.998 11.4265 112.239 12.5155 112.239 14.0995V19H110.787ZM117.305 16.4755V11.3935H116.084V10.2385H117.305V8.2255H118.757V10.2385H120.688V11.3935H118.757V16.4755C118.757 17.5315 119.071 18.0265 120.358 18.0265H120.655V19.066C120.49 19.1485 120.127 19.198 119.714 19.198C118.081 19.198 117.305 18.3235 117.305 16.4755ZM129.809 16.1455C129.33 18.1915 127.862 19.198 125.865 19.198C123.324 19.198 121.79 17.482 121.79 14.6275C121.79 11.6575 123.324 10.024 125.783 10.024C128.258 10.024 129.743 11.7235 129.743 14.512V14.875H123.275C123.357 16.8385 124.281 17.944 125.865 17.944C127.103 17.944 127.977 17.35 128.291 16.1455H129.809ZM125.783 11.278C124.38 11.278 123.539 12.1525 123.324 13.786H128.225C128.027 12.169 127.152 11.278 125.783 11.278ZM131.843 19V10.2385H133.295V11.5915C133.889 10.519 134.829 10.024 135.885 10.024C136.232 10.024 136.545 10.1065 136.71 10.2385V11.542C136.463 11.4595 136.149 11.4265 135.803 11.4265C134.054 11.4265 133.295 12.5155 133.295 14.0995V19H131.843ZM141.763 19V7.78H143.281V13.192L148.413 7.78H150.327L145.047 13.291L150.459 19H148.413L143.281 13.621V19H141.763ZM152.06 9.067V7.12H153.512V9.067H152.06ZM152.06 19V10.2385H153.512V19H152.06ZM156.178 16.4755V11.3935H154.957V10.2385H156.178V8.2255H157.63V10.2385H159.56V11.3935H157.63V16.4755C157.63 17.5315 157.943 18.0265 159.23 18.0265H159.527V19.066C159.362 19.1485 158.999 19.198 158.587 19.198C156.953 19.198 156.178 18.3235 156.178 16.4755Z" fill="white" fill-opacity="0.55"/>
<defs>
<radialGradient id="paint0_radial_115_109" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(-3.00503 15.023) rotate(-10.029) scale(17.9572 17.784)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint1_linear_115_109" x1="7.39036" y1="4.81308" x2="1.62975" y2="18.6894" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint2_linear_115_109" x1="7.94816" y1="8.01562" x2="1.7612" y2="18.746" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint3_radial_115_109" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(8.11404 20.8822) rotate(-75.7542) scale(21.6246 23.7772)">
<stop stop-color="#00BBBB"/>
<stop offset="0.712616" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint4_linear_115_109" x1="7.60205" y1="5.8709" x2="15.5561" y2="16.3719" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint5_radial_115_109" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(7.84537 21.5181) rotate(-20.3525) scale(18.5603 17.32)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint6_linear_115_109" x1="16.8078" y1="13.0071" x2="10.0409" y2="22.9937" gradientUnits="userSpaceOnUse">
<stop stop-color="#00B1BC"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint7_linear_115_109" x1="16.8078" y1="13.0071" x2="14.1687" y2="23.841" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint8_radial_115_109" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(47.2781 7) rotate(19.0047) scale(67.5582 85.7506)">
<stop stop-color="white"/>
<stop offset="1" stop-color="white" stop-opacity="0.5"/>
</radialGradient>
</defs>
</svg>

================
File: apps/docs/logo/light.svg
================
<svg width="160" height="24" viewBox="0 0 160 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="white"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="url(#paint0_radial_115_86)"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61504C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5913 7.95343 21.1394Z" fill="url(#paint1_linear_115_86)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M7.9354 21.1112C4.89702 21.0957 2.27411 19.4306 1.01347 16.279C-0.248375 13.1244 0.135612 9.18218 1.76165 5.64327C4.80004 5.65882 7.42295 7.32385 8.68359 10.4755C9.94543 13.63 9.56144 17.5723 7.9354 21.1112Z" stroke="url(#paint2_linear_115_86)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="white"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="url(#paint3_radial_115_86)"/>
<path d="M16.6025 13.2251C14.8642 17.349 11.3512 20.1866 7.32411 21.2248C5.25257 17.624 4.82926 13.1324 6.56764 9.00855C8.30603 4.88472 11.819 2.04706 15.8461 1.00889C17.9176 4.60967 18.3409 9.10131 16.6025 13.2251Z" stroke="url(#paint4_linear_115_86)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="white"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint5_radial_115_86)"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint6_linear_115_86)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M16.5682 22.7874C13.2176 23.9184 9.81361 23.2124 7.2672 21.1975C8.49194 17.9068 11.0444 15.189 14.3959 14.0577C17.7465 12.9266 21.1504 13.6326 23.6968 15.6476C22.4721 18.9383 19.9196 21.656 16.5682 22.7874Z" stroke="url(#paint7_linear_115_86)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M34.2124 19V5.4H39.4924L41.6924 12.2L42.3724 14.74L43.0524 12.2L45.2524 5.4H50.4124V19H46.3324L46.5924 9.98L45.5324 13.68L43.7924 19H40.8324L39.0524 13.6L38.0324 10.02L38.2924 19H34.2124ZM52.4155 7.3V4.6H56.2955V7.3H52.4155ZM52.4155 19V8.14H56.2955V19H52.4155ZM58.1038 19V8.14H61.9838V9.58C62.6638 8.34 63.7438 7.76 65.0038 7.76C66.9638 7.76 68.6238 8.98 68.6238 11.78V19H64.7438V12.56C64.7438 11.34 64.3038 10.86 63.4838 10.86C62.6038 10.86 61.9838 11.58 61.9838 12.88V19H58.1038ZM70.9327 15.22V11.06H69.7327V8.14H70.9327V5.62H74.8127V8.14H76.9327V11.06H74.8127V14.6C74.8127 15.5 75.0327 16.06 76.2127 16.06H76.9327V19C76.4927 19.2 75.6727 19.38 74.6527 19.38C72.1527 19.38 70.9327 17.88 70.9327 15.22Z" fill="#001E13"/>
<path d="M87.232 10.519C87.232 13.687 94.1125 11.2285 94.1125 15.832C94.1125 17.9935 92.3635 19.198 89.971 19.198C87.562 19.198 85.912 18.0925 85.417 15.832H87.001C87.364 17.1685 88.3705 17.8945 89.9875 17.8945C91.6705 17.8945 92.5615 17.152 92.5615 16.03C92.5615 12.598 85.681 15.1555 85.681 10.618C85.681 9.001 87.034 7.582 89.509 7.582C91.6705 7.582 93.403 8.6215 93.8155 11.014H92.215C91.8685 9.529 90.9115 8.8855 89.476 8.8855C88.057 8.8855 87.232 9.529 87.232 10.519ZM96.2499 16.4755V11.3935H95.0289V10.2385H96.2499V8.2255H97.7019V10.2385H99.6324V11.3935H97.7019V16.4755C97.7019 17.5315 98.0154 18.0265 99.3024 18.0265H99.5994V19.066C99.4344 19.1485 99.0714 19.198 98.6589 19.198C97.0254 19.198 96.2499 18.3235 96.2499 16.4755ZM102.516 13.093H101.064C101.345 11.1625 102.615 10.024 104.76 10.024C107.103 10.024 108.242 11.3935 108.242 13.4395V16.888C108.242 17.8945 108.324 18.5215 108.555 19H107.021C106.856 18.6535 106.806 18.142 106.79 17.614C106.047 18.7195 104.859 19.198 103.803 19.198C101.988 19.198 100.767 18.3565 100.767 16.69C100.767 15.4855 101.427 14.611 102.714 14.182C103.902 13.786 105.107 13.687 106.79 13.6705V13.4725C106.79 12.0535 106.13 11.278 104.628 11.278C103.374 11.278 102.698 11.971 102.516 13.093ZM102.252 16.657C102.252 17.4655 102.929 17.944 103.952 17.944C105.569 17.944 106.79 16.6735 106.79 15.172V14.7595C103.061 14.7925 102.252 15.5845 102.252 16.657ZM110.787 19V10.2385H112.239V11.5915C112.833 10.519 113.774 10.024 114.83 10.024C115.176 10.024 115.49 10.1065 115.655 10.2385V11.542C115.407 11.4595 115.094 11.4265 114.747 11.4265C112.998 11.4265 112.239 12.5155 112.239 14.0995V19H110.787ZM117.305 16.4755V11.3935H116.084V10.2385H117.305V8.2255H118.757V10.2385H120.688V11.3935H118.757V16.4755C118.757 17.5315 119.071 18.0265 120.358 18.0265H120.655V19.066C120.49 19.1485 120.127 19.198 119.714 19.198C118.081 19.198 117.305 18.3235 117.305 16.4755ZM129.809 16.1455C129.33 18.1915 127.862 19.198 125.865 19.198C123.324 19.198 121.79 17.482 121.79 14.6275C121.79 11.6575 123.324 10.024 125.783 10.024C128.258 10.024 129.743 11.7235 129.743 14.512V14.875H123.275C123.357 16.8385 124.281 17.944 125.865 17.944C127.103 17.944 127.977 17.35 128.291 16.1455H129.809ZM125.783 11.278C124.38 11.278 123.539 12.1525 123.324 13.786H128.225C128.027 12.169 127.152 11.278 125.783 11.278ZM131.843 19V10.2385H133.295V11.5915C133.889 10.519 134.829 10.024 135.885 10.024C136.232 10.024 136.545 10.1065 136.71 10.2385V11.542C136.463 11.4595 136.149 11.4265 135.803 11.4265C134.054 11.4265 133.295 12.5155 133.295 14.0995V19H131.843ZM141.763 19V7.78H143.281V13.192L148.413 7.78H150.327L145.047 13.291L150.459 19H148.413L143.281 13.621V19H141.763ZM152.06 9.067V7.12H153.512V9.067H152.06ZM152.06 19V10.2385H153.512V19H152.06ZM156.178 16.4755V11.3935H154.957V10.2385H156.178V8.2255H157.63V10.2385H159.56V11.3935H157.63V16.4755C157.63 17.5315 157.943 18.0265 159.23 18.0265H159.527V19.066C159.362 19.1485 158.999 19.198 158.587 19.198C156.953 19.198 156.178 18.3235 156.178 16.4755Z" fill="#002719" fill-opacity="0.6"/>
<defs>
<radialGradient id="paint0_radial_115_86" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(-3.00503 15.023) rotate(-10.029) scale(17.9572 17.784)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint1_linear_115_86" x1="7.39036" y1="4.81308" x2="1.62975" y2="18.6894" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint2_linear_115_86" x1="7.94816" y1="8.01562" x2="1.7612" y2="18.746" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint3_radial_115_86" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(8.11404 20.8822) rotate(-75.7542) scale(21.6246 23.7772)">
<stop stop-color="#00BBBB"/>
<stop offset="0.712616" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint4_linear_115_86" x1="7.60205" y1="5.8709" x2="15.5561" y2="16.3719" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint5_radial_115_86" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(7.84537 21.5181) rotate(-20.3525) scale(18.5603 17.32)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint6_linear_115_86" x1="16.8078" y1="13.0071" x2="10.0409" y2="22.9937" gradientUnits="userSpaceOnUse">
<stop stop-color="#00B1BC"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint7_linear_115_86" x1="16.8078" y1="13.0071" x2="14.1687" y2="23.841" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
</defs>
</svg>

================
File: apps/docs/snippets/snippet-intro.mdx
================
One of the core principles of software development is DRY (Don't Repeat
Yourself). This is a principle that apply to documentation as
well. If you find yourself repeating the same content in multiple places, you
should consider creating a custom snippet to keep your content in sync.

================
File: apps/docs/development.mdx
================
---
title: 'Development'
description: 'Learn how to preview changes locally'
---

<Info>
  **Prerequisite** You should have installed Node.js (version 18.10.0 or
  higher).
</Info>

Step 1. Install Mintlify on your OS:

<CodeGroup>

```bash npm
npm i -g mintlify
```

```bash yarn
yarn global add mintlify
```

</CodeGroup>

Step 2. Go to the docs are located (where you can find `mint.json`) and run the following command:

```bash
mintlify dev
```

The documentation website is now available at `http://localhost:3000`.

### Custom Ports

Mintlify uses port 3000 by default. You can use the `--port` flag to customize the port Mintlify runs on. For example, use this command to run in port 3333:

```bash
mintlify dev --port 3333
```

You will see an error like this if you try to run Mintlify in a port that's already taken:

```md
Error: listen EADDRINUSE: address already in use :::3000
```

## Mintlify Versions

Each CLI is linked to a specific version of Mintlify. Please update the CLI if your local website looks different than production.

<CodeGroup>

```bash npm
npm i -g mintlify@latest
```

```bash yarn
yarn global upgrade mintlify
```

</CodeGroup>

## Deployment

<Tip>
  Unlimited editors available under the [Startup
  Plan](https://mintlify.com/pricing)
</Tip>

You should see the following if the deploy successfully went through:

<Frame>
  <img src="/images/checks-passed.png" style={{ borderRadius: '0.5rem' }} />
</Frame>

## Troubleshooting

Here's how to solve some common problems when working with the CLI.

<AccordionGroup>
  <Accordion title="Mintlify is not loading">
    Update to Node v18. Run `mintlify install` and try again.
  </Accordion>
  <Accordion title="No such file or directory on Windows">
Go to the `C:/Users/Username/.mintlify/` directory and remove the `mint`
folder. Then Open the Git Bash in this location and run `git clone
https://github.com/mintlify/mint.git`.

Repeat step 3.

  </Accordion>
  <Accordion title="Getting an unknown error">
    Try navigating to the root of your device and delete the ~/.mintlify folder.
    Then run `mintlify dev` again.
  </Accordion>
</AccordionGroup>

Curious about what changed in a CLI version? [Check out the CLI changelog.](/changelog/command-line)

================
File: apps/docs/favicon.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61505C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5914 7.95343 21.1394Z" fill="white"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61505C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5914 7.95343 21.1394Z" fill="url(#paint0_radial_101_2703)"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61505C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5914 7.95343 21.1394Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M7.95343 21.1394C4.89586 21.1304 2.25471 19.458 0.987296 16.2895C-0.280118 13.121 0.108924 9.16314 1.74363 5.61505C4.8012 5.62409 7.44235 7.29648 8.70976 10.465C9.97718 13.6335 9.58814 17.5914 7.95343 21.1394Z" fill="url(#paint1_linear_101_2703)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M8.68359 10.4755C9.94543 13.63 9.56145 17.5723 7.9354 21.1112C4.89702 21.0957 2.27411 19.4306 1.01347 16.279C-0.248375 13.1245 0.135612 9.18218 1.76165 5.64328C4.80004 5.65883 7.42295 7.32386 8.68359 10.4755Z" stroke="url(#paint2_linear_101_2703)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="white"/>
<path d="M7.31038 21.2574C11.3543 20.2215 14.8836 17.3754 16.6285 13.2361C18.3735 9.09671 17.9448 4.58749 15.8598 0.976291C11.8159 2.01214 8.2866 4.85826 6.54167 8.99762C4.79674 13.137 5.2254 17.6462 7.31038 21.2574Z" fill="url(#paint3_radial_101_2703)"/>
<path d="M16.6026 13.2251C14.8642 17.349 11.3512 20.1866 7.32411 21.2248C5.25257 17.624 4.82926 13.1324 6.56764 9.00855C8.30603 4.88472 11.819 2.04706 15.8461 1.00889C17.9176 4.60967 18.3409 9.10131 16.6026 13.2251Z" stroke="url(#paint4_linear_101_2703)" stroke-opacity="0.05" stroke-width="0.056338"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="white"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint5_radial_101_2703)"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
<path d="M7.23368 21.2069C9.78906 23.2373 13.2102 23.9506 16.5772 22.8141C19.9441 21.6775 22.5058 18.9445 23.7304 15.6382C21.175 13.6078 17.7538 12.8944 14.3869 14.031C11.0199 15.1676 8.45822 17.9006 7.23368 21.2069Z" fill="url(#paint6_linear_101_2703)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
<path d="M16.5682 22.7874C13.2176 23.9184 9.81361 23.2124 7.2672 21.1975C8.49194 17.9068 11.0444 15.189 14.3959 14.0577C17.7465 12.9266 21.1504 13.6326 23.6968 15.6476C22.4721 18.9383 19.9196 21.656 16.5682 22.7874Z" stroke="url(#paint7_linear_101_2703)" stroke-opacity="0.05" stroke-width="0.056338"/>
<defs>
<radialGradient id="paint0_radial_101_2703" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(-3.00503 15.023) rotate(-10.029) scale(17.9572 17.784)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint1_linear_101_2703" x1="7.39036" y1="4.81308" x2="1.62975" y2="18.6894" gradientUnits="userSpaceOnUse">
<stop stop-color="#18E299"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint2_linear_101_2703" x1="7.94816" y1="8.01563" x2="1.7612" y2="18.746" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint3_radial_101_2703" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(8.11404 20.8822) rotate(-75.7542) scale(21.6246 23.7772)">
<stop stop-color="#00BBBB"/>
<stop offset="0.712616" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint4_linear_101_2703" x1="7.60205" y1="5.8709" x2="15.5561" y2="16.3719" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<radialGradient id="paint5_radial_101_2703" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(7.84537 21.5181) rotate(-20.3525) scale(18.5603 17.32)">
<stop stop-color="#00B0BB"/>
<stop offset="1" stop-color="#00DB65"/>
</radialGradient>
<linearGradient id="paint6_linear_101_2703" x1="16.8078" y1="13.0071" x2="10.0409" y2="22.9937" gradientUnits="userSpaceOnUse">
<stop stop-color="#00B1BC"/>
<stop offset="1"/>
</linearGradient>
<linearGradient id="paint7_linear_101_2703" x1="16.8078" y1="13.0071" x2="14.1687" y2="23.841" gradientUnits="userSpaceOnUse">
<stop/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
</defs>
</svg>

================
File: apps/docs/introduction.mdx
================
---
title: Introduction
description: 'Welcome to the home of your new documentation'
---

<img
  className="block dark:hidden"
  src="/images/hero-light.svg"
  alt="Hero Light"
/>
<img
  className="hidden dark:block"
  src="/images/hero-dark.svg"
  alt="Hero Dark"
/>

## Setting up

The first step to world-class documentation is setting up your editing environments.

<CardGroup cols={2}>
  <Card
    title="Edit Your Docs"
    icon="pen-to-square"
    href="https://mintlify.com/docs/quickstart"
  >
    Get your docs set up locally for easy development
  </Card>
  <Card
    title="Preview Changes"
    icon="image"
    href="https://mintlify.com/docs/development"
  >
    Preview your changes before you push to make sure they're perfect
  </Card>
</CardGroup>

## Make it yours

Update your docs to your brand and add valuable content for the best user conversion.

<CardGroup cols={2}>
  <Card
    title="Customize Style"
    icon="palette"
    href="https://mintlify.com/docs/settings/global"
  >
    Customize your docs to your company's colors and brands
  </Card>
  <Card
    title="Reference APIs"
    icon="code"
    href="https://mintlify.com/docs/api-playground/openapi"
  >
    Automatically generate endpoints from an OpenAPI spec
  </Card>
  <Card
    title="Add Components"
    icon="screwdriver-wrench"
    href="https://mintlify.com/docs/components/accordion"
  >
    Build interactive features and designs to guide your users
  </Card>
  <Card
    title="Get Inspiration"
    icon="stars"
    href="https://mintlify.com/customers"
  >
    Check out our showcase of our favorite documentation
  </Card>
</CardGroup>

================
File: apps/docs/mint.json
================
{
  "$schema": "https://mintlify.com/schema.json",
  "name": "Starter Kit",
  "logo": {
    "dark": "/logo/dark.svg",
    "light": "/logo/light.svg"
  },
  "favicon": "/favicon.svg",
  "colors": {
    "primary": "#0D9373",
    "light": "#07C983",
    "dark": "#0D9373",
    "anchors": {
      "from": "#0D9373",
      "to": "#07C983"
    }
  },
  "topbarLinks": [
    {
      "name": "Support",
      "url": "mailto:support@mintlify.com"
    }
  ],
  "topbarCtaButton": {
    "name": "Dashboard",
    "url": "https://dashboard.mintlify.com"
  },
  "tabs": [
    {
      "name": "API Reference",
      "url": "api-reference"
    }
  ],
  "anchors": [
    {
      "name": "Documentation",
      "icon": "book-open-cover",
      "url": "https://mintlify.com/docs"
    },
    {
      "name": "Community",
      "icon": "slack",
      "url": "https://mintlify.com/community"
    },
    {
      "name": "Blog",
      "icon": "newspaper",
      "url": "https://mintlify.com/blog"
    }
  ],
  "navigation": [
    {
      "group": "Get Started",
      "pages": ["introduction", "quickstart", "development"]
    },
    {
      "group": "Essentials",
      "pages": [
        "essentials/markdown",
        "essentials/code",
        "essentials/images",
        "essentials/settings",
        "essentials/navigation",
        "essentials/reusable-snippets"
      ]
    },
    {
      "group": "API Documentation",
      "pages": ["api-reference/introduction"]
    },
    {
      "group": "Endpoint Examples",
      "pages": [
        "api-reference/endpoint/get",
        "api-reference/endpoint/create",
        "api-reference/endpoint/delete"
      ]
    }
  ],
  "footerSocials": {
    "x": "https://x.com/mintlify",
    "github": "https://github.com/mintlify",
    "linkedin": "https://www.linkedin.com/company/mintlify"
  }
}

================
File: apps/docs/package.json
================
{
  "name": "docs",
  "private": true,
  "scripts": {
    "dev": "mintlify dev --port 3004",
    "lint": "mintlify broken-links"
  },
  "devDependencies": {
    "typescript": "^5.7.3"
  }
}

================
File: apps/docs/quickstart.mdx
================
---
title: 'Quickstart'
description: 'Start building awesome documentation in under 5 minutes'
---

## Setup your development

Learn how to update your docs locally and and deploy them to the public.

### Edit and preview

<AccordionGroup>
  <Accordion icon="github" title="Clone your docs locally">
    During the onboarding process, we created a repository on your Github with
    your docs content. You can find this repository on our
    [dashboard](https://dashboard.mintlify.com). To clone the repository
    locally, follow these
    [instructions](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)
    in your terminal.
  </Accordion>
  <Accordion icon="rectangle-terminal" title="Preview changes">
    Previewing helps you make sure your changes look as intended. We built a
    command line interface to render these changes locally. 1. Install the
    [Mintlify CLI](https://www.npmjs.com/package/mintlify) to preview the
    documentation changes locally with this command: ``` npm i -g mintlify ```
    2. Run the following command at the root of your documentation (where
    `mint.json` is): ``` mintlify dev ```
  </Accordion>
</AccordionGroup>

### Deploy your changes

<AccordionGroup>

<Accordion icon="message-bot" title="Install our Github app">
  Our Github app automatically deploys your changes to your docs site, so you
  don't need to manage deployments yourself. You can find the link to install on
  your [dashboard](https://dashboard.mintlify.com). Once the bot has been
  successfully installed, there should be a check mark next to the commit hash
  of the repo.
</Accordion>
<Accordion icon="rocket" title="Push your changes">
  [Commit and push your changes to
  Git](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository#about-git-push)
  for your changes to update in your docs site. If you push and don't see that
  the Github app successfully deployed your changes, you can also manually
  update your docs through our [dashboard](https://dashboard.mintlify.com).
</Accordion>

</AccordionGroup>

## Update your docs

Add content directly in your files with MDX syntax and React components. You can use any of our components, or even build your own.

<CardGroup>

<Card title="Style Your Docs" icon="paintbrush" href="/settings/global">
  Add flair to your docs with personalized branding.
</Card>

<Card
  title="Add API Endpoints"
  icon="square-code"
  href="/api-playground/configuration"
>
  Implement your OpenAPI spec and enable API user interaction.
</Card>

<Card
  title="Integrate Analytics"
  icon="chart-mixed"
  href="/analytics/supported-integrations"
>
  Draw insights from user interactions with your documentation.
</Card>

<Card
  title="Host on a Custom Domain"
  icon="browser"
  href="/settings/custom-domain/subdomain"
>
  Keep your docs on your own website's subdomain.
</Card>

</CardGroup>

================
File: apps/email/emails/contact.tsx
================
import { ContactTemplate } from '@repo/email/templates/contact';

const ExampleContactEmail = () => (
  <ContactTemplate
    name="Jane Smith"
    email="jane.smith@example.com"
    message="I'm interested in your services."
  />
);

export default ExampleContactEmail;

================
File: apps/email/.gitignore
================
.react-email

================
File: apps/email/package.json
================
{
  "name": "email",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "email build",
    "dev": "email dev --port 3003",
    "export": "email export",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@react-email/components": "0.0.32",
    "@repo/email": "workspace:*",
    "react": "19.0.0",
    "react-email": "3.0.6"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "typescript": "^5.7.3"
  }
}

================
File: apps/email/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: apps/storybook/.storybook/main.ts
================
import { dirname, join } from 'node:path';
import type { StorybookConfig } from '@storybook/nextjs';

/**
 * This function is used to resolve the absolute path of a package.
 * It is needed in projects that use Yarn PnP or are set up within a monorepo.
 */
const getAbsolutePath = (value: string) =>
  dirname(require.resolve(join(value, 'package.json')));

const config: StorybookConfig = {
  stories: [
    '../stories/**/*.mdx',
    '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)',
  ],
  addons: [
    getAbsolutePath('@storybook/addon-onboarding'),
    getAbsolutePath('@storybook/addon-essentials'),
    getAbsolutePath('@chromatic-com/storybook'),
    getAbsolutePath('@storybook/addon-interactions'),
    getAbsolutePath('@storybook/addon-themes'),
  ],
  framework: {
    name: getAbsolutePath('@storybook/nextjs'),
    options: {},
  },
  staticDirs: ['../public'],
};

export default config;

================
File: apps/storybook/.storybook/preview-head.html
================
<!-- https://github.com/vercel/geist-font/issues/72 -->

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&display=swap" rel="stylesheet">

<style>
  :root {
    --font-geist-sans: "Geist", sans-serif;
    --font-geist-mono: "Geist Mono", monospace;
  }
  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    touch-action: manipulation;
  }
</style>

================
File: apps/storybook/.storybook/preview.tsx
================
import { Toaster } from '@repo/design-system/components/ui/sonner';
import { TooltipProvider } from '@repo/design-system/components/ui/tooltip';
import { ThemeProvider } from '@repo/design-system/providers/theme';
import { withThemeByClassName } from '@storybook/addon-themes';
import type { Preview } from '@storybook/react';

import '@repo/design-system/styles/globals.css';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
    chromatic: {
      modes: {
        light: {
          theme: 'light',
          className: 'light',
        },
        dark: {
          theme: 'dark',
          className: 'dark',
        },
      },
    },
  },
  decorators: [
    withThemeByClassName({
      themes: {
        light: 'light',
        dark: 'dark',
      },
      defaultTheme: 'light',
    }),
    (Story) => {
      return (
        <div className="bg-background">
          <ThemeProvider>
            <TooltipProvider>
              <Story />
            </TooltipProvider>
            <Toaster />
          </ThemeProvider>
        </div>
      );
    },
  ],
};

export default preview;

================
File: apps/storybook/stories/accordion.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@repo/design-system/components/ui/accordion';

/**
 * A vertically stacked set of interactive headings that each reveal a section
 * of content.
 */
const meta = {
  title: 'ui/Accordion',
  component: Accordion,
  tags: ['autodocs'],
  argTypes: {
    type: {
      options: ['single', 'multiple'],
      control: { type: 'radio' },
    },
  },
  args: {
    type: 'single',
    collapsible: true,
  },
  render: (args) => (
    <Accordion {...args}>
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-2">
        <AccordionTrigger>Is it styled?</AccordionTrigger>
        <AccordionContent>
          Yes. It comes with default styles that matches the other components'
          aesthetic.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-3">
        <AccordionTrigger>Is it animated?</AccordionTrigger>
        <AccordionContent>
          Yes. It's animated by default, but you can disable it if you prefer.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  ),
} satisfies Meta<typeof Accordion>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default behavior of the accordion allows only one item to be open.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/alert-dialog.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@repo/design-system/components/ui/alert-dialog';

/**
 * A modal dialog that interrupts the user with important content and expects
 * a response.
 */
const meta = {
  title: 'ui/AlertDialog',
  component: AlertDialog,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <AlertDialog {...args}>
      <AlertDialogTrigger>Open</AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you sure absolutely sure?</AlertDialogTitle>
          <AlertDialogDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction>Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof AlertDialog>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the alert dialog.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/alert.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { AlertCircle } from 'lucide-react';

import {
  Alert,
  AlertDescription,
  AlertTitle,
} from '@repo/design-system/components/ui/alert';

/**
 * Displays a callout for user attention.
 */
const meta = {
  title: 'ui/Alert',
  component: Alert,
  tags: ['autodocs'],
  argTypes: {
    variant: {
      options: ['default', 'destructive'],
      control: { type: 'radio' },
    },
  },
  args: {
    variant: 'default',
  },
  render: (args) => (
    <Alert {...args}>
      <AlertTitle>Heads up!</AlertTitle>
      <AlertDescription>
        You can add components to your app using the cli.
      </AlertDescription>
    </Alert>
  ),
} satisfies Meta<typeof Alert>;

export default meta;

type Story = StoryObj<typeof meta>;
/**
 * The default form of the alert.
 */
export const Default: Story = {};

/**
 * Use the `destructive` alert to indicate a destructive action.
 */
export const Destructive: Story = {
  render: (args) => (
    <Alert {...args}>
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>Error</AlertTitle>
      <AlertDescription>
        Your session has expired. Please log in again.
      </AlertDescription>
    </Alert>
  ),
  args: {
    variant: 'destructive',
  },
};

================
File: apps/storybook/stories/aspect-ratio.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import Image from 'next/image';

import { AspectRatio } from '@repo/design-system/components/ui/aspect-ratio';

/**
 * Displays content within a desired ratio.
 */
const meta: Meta<typeof AspectRatio> = {
  title: 'ui/AspectRatio',
  component: AspectRatio,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <AspectRatio {...args} className="bg-slate-50 dark:bg-slate-800">
      <Image
        src="https://images.unsplash.com/photo-1576075796033-848c2a5f3696?w=800&dpr=2&q=80"
        alt="Photo by Alvaro Pinot"
        fill
        className="rounded-md object-cover"
      />
    </AspectRatio>
  ),
  decorators: [
    (Story) => (
      <div className="w-1/2">
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof AspectRatio>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the aspect ratio.
 */
export const Default: Story = {
  args: {
    ratio: 16 / 9,
  },
};

/**
 * Use the `1:1` aspect ratio to display a square image.
 */
export const Square: Story = {
  args: {
    ratio: 1,
  },
};

/**
 * Use the `4:3` aspect ratio to display a landscape image.
 */
export const Landscape: Story = {
  args: {
    ratio: 4 / 3,
  },
};

/**
 * Use the `2.35:1` aspect ratio to display a cinemascope image.
 */
export const Cinemascope: Story = {
  args: {
    ratio: 2.35 / 1,
  },
};

================
File: apps/storybook/stories/avatar.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@repo/design-system/components/ui/avatar';

/**
 * An image element with a fallback for representing the user.
 */
const meta = {
  title: 'ui/Avatar',
  component: Avatar,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Avatar {...args}>
      <AvatarImage src="https://github.com/shadcn.png" />
      <AvatarFallback>CN</AvatarFallback>
    </Avatar>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Avatar>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the avatar.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/badge.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Badge } from '@repo/design-system/components/ui/badge';

/**
 * Displays a badge or a component that looks like a badge.
 */
const meta = {
  title: 'ui/Badge',
  component: Badge,
  tags: ['autodocs'],
  argTypes: {
    children: {
      control: 'text',
    },
  },
  args: {
    children: 'Badge',
  },
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Badge>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the badge.
 */
export const Default: Story = {};

/**
 * Use the `secondary` badge to call for less urgent information, blending
 * into the interface while still signaling minor updates or statuses.
 */
export const Secondary: Story = {
  args: {
    variant: 'secondary',
  },
};

/**
 * Use the `destructive` badge to  indicate errors, alerts, or the need for
 * immediate attention.
 */
export const Destructive: Story = {
  args: {
    variant: 'destructive',
  },
};

/**
 * Use the `outline` badge for overlaying without obscuring interface details,
 * emphasizing clarity and subtlety..
 */
export const Outline: Story = {
  args: {
    variant: 'outline',
  },
};

================
File: apps/storybook/stories/breadcrumb.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { ArrowRightSquare } from 'lucide-react';

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@repo/design-system/components/ui/breadcrumb';

/**
 * Displays the path to the current resource using a hierarchy of links.
 */
const meta = {
  title: 'ui/Breadcrumb',
  component: Breadcrumb,
  tags: ['autodocs'],
  argTypes: {},
  args: {},
  render: (args) => (
    <Breadcrumb {...args}>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink>Home</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink>Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Breadcrumb>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * Displays the path of links to the current resource.
 */
export const Default: Story = {};

/**
 * Displays the path with a custom icon for the separator.
 */
export const WithCustomSeparator: Story = {
  render: (args) => (
    <Breadcrumb {...args}>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink>Home</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator>
          <ArrowRightSquare />
        </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbLink>Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator>
          <ArrowRightSquare />
        </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  ),
};

================
File: apps/storybook/stories/button.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Loader2, Mail } from 'lucide-react';

import { Button } from '@repo/design-system/components/ui/button';

/**
 * Displays a button or a component that looks like a button.
 */
const meta = {
  title: 'ui/Button',
  component: Button,
  tags: ['autodocs'],
  argTypes: {
    children: {
      control: 'text',
    },
  },
  parameters: {
    layout: 'centered',
  },
  args: {
    variant: 'default',
    size: 'default',
    children: 'Button',
  },
} satisfies Meta<typeof Button>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the button, used for primary actions and commands.
 */
export const Default: Story = {};

/**
 * Use the `outline` button to reduce emphasis on secondary actions, such as
 * canceling or dismissing a dialog.
 */
export const Outline: Story = {
  args: {
    variant: 'outline',
  },
};

/**
 * Use the `ghost` button is minimalistic and subtle, for less intrusive
 * actions.
 */
export const Ghost: Story = {
  args: {
    variant: 'ghost',
  },
};

/**
 * Use the `secondary` button to call for less emphasized actions, styled to
 * complement the primary button while being less conspicuous.
 */
export const Secondary: Story = {
  args: {
    variant: 'secondary',
  },
};

/**
 * Use the `destructive` button to indicate errors, alerts, or the need for
 * immediate attention.
 */
export const Destructive: Story = {
  args: {
    variant: 'destructive',
  },
};

/**
 * Use the `link` button to reduce emphasis on tertiary actions, such as
 * hyperlink or navigation, providing a text-only interactive element.
 */
export const Link: Story = {
  args: {
    variant: 'link',
  },
};

/**
 * Add the `disabled` prop to a button to prevent interactions and add a
 * loading indicator, such as a spinner, to signify an in-progress action.
 */
export const Loading: Story = {
  render: (args) => (
    <Button {...args}>
      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      Button
    </Button>
  ),
  args: {
    ...Outline.args,
    disabled: true,
  },
};

/**
 * Add an icon element to a button to enhance visual communication and
 * providing additional context for the action.
 */
export const WithIcon: Story = {
  render: (args) => (
    <Button {...args}>
      <Mail className="mr-2 h-4 w-4" /> Login with Email Button
    </Button>
  ),
  args: {
    ...Secondary.args,
  },
};

/**
 * Use the `sm` size for a smaller button, suitable for interfaces needing
 * compact elements without sacrificing usability.
 */
export const Small: Story = {
  args: {
    size: 'sm',
  },
};

/**
 * Use the `lg` size for a larger button, offering better visibility and
 * easier interaction for users.
 */
export const Large: Story = {
  args: {
    size: 'lg',
  },
};

/**
 * Use the "icon" size for a button with only an icon.
 */
export const Icon: Story = {
  args: {
    ...Secondary.args,
    size: 'icon',
    children: <Mail />,
  },
};

/**
 * Add the `disabled` prop to prevent interactions with the button.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

================
File: apps/storybook/stories/calendar.stories.tsx
================
import { action } from '@storybook/addon-actions';
import type { Meta, StoryObj } from '@storybook/react';
import { addDays } from 'date-fns';

import { Calendar } from '@repo/design-system/components/ui/calendar';

/**
 * A date field component that allows users to enter and edit date.
 */
const meta = {
  title: 'ui/Calendar',
  component: Calendar,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    mode: 'single',
    selected: new Date(),
    onSelect: action('onDayClick'),
    className: 'rounded-md border w-fit',
  },
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Calendar>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the calendar.
 */
export const Default: Story = {};

/**
 * Use the `multiple` mode to select multiple dates.
 */
export const Multiple: Story = {
  args: {
    min: 1,
    selected: [new Date(), addDays(new Date(), 2), addDays(new Date(), 8)],
    mode: 'multiple',
  },
};

/**
 * Use the `range` mode to select a range of dates.
 */
export const Range: Story = {
  args: {
    selected: {
      from: new Date(),
      to: addDays(new Date(), 7),
    },
    mode: 'range',
  },
};

/**
 * Use the `disabled` prop to disable specific dates.
 */
export const Disabled: Story = {
  args: {
    disabled: [
      addDays(new Date(), 1),
      addDays(new Date(), 2),
      addDays(new Date(), 3),
      addDays(new Date(), 5),
    ],
  },
};

/**
 * Use the `numberOfMonths` prop to display multiple months.
 */
export const MultipleMonths: Story = {
  args: {
    numberOfMonths: 2,
    showOutsideDays: false,
  },
};

================
File: apps/storybook/stories/card.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { BellRing } from 'lucide-react';

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@repo/design-system/components/ui/card';

const notifications = [
  {
    title: 'Your call has been confirmed.',
    description: '1 hour ago',
  },
  {
    title: 'You have a new message!',
    description: '1 hour ago',
  },
  {
    title: 'Your subscription is expiring soon!',
    description: '2 hours ago',
  },
];

/**
 * Displays a card with header, content, and footer.
 */
const meta = {
  title: 'ui/Card',
  component: Card,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    className: 'w-96',
  },
  render: (args) => (
    <Card {...args}>
      <CardHeader>
        <CardTitle>Notifications</CardTitle>
        <CardDescription>You have 3 unread messages.</CardDescription>
      </CardHeader>
      <CardContent className="grid gap-4">
        {notifications.map((notification, index) => (
          <div key={index} className="flex items-center gap-4">
            <BellRing className="size-6" />
            <div>
              <p>{notification.title}</p>
              <p className="text-foreground/50">{notification.description}</p>
            </div>
          </div>
        ))}
      </CardContent>
      <CardFooter>
        <button type="button" className="hover:underline">
          Close
        </button>
      </CardFooter>
    </Card>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Card>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the card.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/carousel.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@repo/design-system/components/ui/carousel';

/**
 * A carousel with motion and swipe built using Embla.
 */
const meta: Meta<typeof Carousel> = {
  title: 'ui/Carousel',
  component: Carousel,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    className: 'w-full max-w-xs',
  },
  render: (args) => (
    <Carousel {...args}>
      <CarouselContent>
        {Array.from({ length: 5 }).map((_, index) => (
          <CarouselItem key={index}>
            <div className="flex aspect-square items-center justify-center rounded border bg-card p-6">
              <span className="font-semibold text-4xl">{index + 1}</span>
            </div>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious />
      <CarouselNext />
    </Carousel>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Carousel>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the carousel.
 */
export const Default: Story = {};

/**
 * Use the `basis` utility class to change the size of the carousel.
 */
export const Size: Story = {
  render: (args) => (
    <Carousel {...args} className="mx-12 w-full max-w-xs">
      <CarouselContent>
        {Array.from({ length: 5 }).map((_, index) => (
          <CarouselItem key={index} className="basis-1/3">
            <div className="flex aspect-square items-center justify-center rounded border bg-card p-6">
              <span className="font-semibold text-4xl">{index + 1}</span>
            </div>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious />
      <CarouselNext />
    </Carousel>
  ),
  args: {
    className: 'mx-12 w-full max-w-xs',
  },
};

================
File: apps/storybook/stories/chart.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { useMemo } from 'react';
import {
  Area,
  AreaChart,
  Bar,
  BarChart,
  CartesianGrid,
  Label,
  Line,
  LineChart,
  Pie,
  PieChart,
  XAxis,
} from 'recharts';

import {
  type ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from '@repo/design-system/components/ui/chart';

const multiSeriesData = [
  { month: 'January', desktop: 186, mobile: 80 },
  { month: 'February', desktop: 305, mobile: 200 },
  { month: 'March', desktop: 237, mobile: 120 },
  { month: 'April', desktop: 73, mobile: 190 },
  { month: 'May', desktop: 209, mobile: 130 },
  { month: 'June', desktop: 214, mobile: 140 },
];

const multiSeriesConfig = {
  desktop: {
    label: 'Desktop',
    color: 'hsl(var(--chart-1))',
  },
  mobile: {
    label: 'Mobile',
    color: 'hsl(var(--chart-2))',
  },
} satisfies ChartConfig;

const singleSeriesData = [
  { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },
  { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },
  { browser: 'other', visitors: 190, fill: 'var(--color-other)' },
];

const singleSeriesConfig = {
  visitors: {
    label: 'Visitors',
  },
  chrome: {
    label: 'Chrome',
    color: 'hsl(var(--chart-1))',
  },
  safari: {
    label: 'Safari',
    color: 'hsl(var(--chart-2))',
  },
  other: {
    label: 'Other',
    color: 'hsl(var(--chart-5))',
  },
} satisfies ChartConfig;

/**
 * Beautiful charts. Built using Recharts. Copy and paste into your apps.
 */
const meta = {
  title: 'ui/Chart',
  component: ChartContainer,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    children: <div />,
  },
} satisfies Meta<typeof ChartContainer>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * Combine multiple Area components to create a stacked area chart.
 */
export const StackedAreaChart: Story = {
  args: {
    config: multiSeriesConfig,
  },
  render: (args) => (
    <ChartContainer {...args}>
      <AreaChart
        accessibilityLayer
        data={multiSeriesData}
        margin={{
          left: 12,
          right: 12,
        }}
      >
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="month"
          tickLine={false}
          axisLine={false}
          tickMargin={8}
          tickFormatter={(value) => value.slice(0, 3)}
        />
        <ChartTooltip
          cursor={false}
          content={<ChartTooltipContent indicator="dot" />}
        />
        <Area
          dataKey="mobile"
          type="natural"
          fill="var(--color-mobile)"
          fillOpacity={0.4}
          stroke="var(--color-mobile)"
          stackId="a"
        />
        <Area
          dataKey="desktop"
          type="natural"
          fill="var(--color-desktop)"
          fillOpacity={0.4}
          stroke="var(--color-desktop)"
          stackId="a"
        />
      </AreaChart>
    </ChartContainer>
  ),
};

/**
 * Combine multiple Bar components to create a stacked bar chart.
 */
export const StackedBarChart: Story = {
  args: {
    config: multiSeriesConfig,
  },
  render: (args) => (
    <ChartContainer {...args}>
      <BarChart accessibilityLayer data={multiSeriesData}>
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="month"
          tickLine={false}
          tickMargin={10}
          axisLine={false}
          tickFormatter={(value) => value.slice(0, 3)}
        />
        <ChartTooltip
          cursor={false}
          content={<ChartTooltipContent indicator="dashed" />}
        />
        <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
        <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
      </BarChart>
    </ChartContainer>
  ),
};

/**
 * Combine multiple Line components to create a single line chart.
 */
export const MultiLineChart: Story = {
  args: {
    config: multiSeriesConfig,
  },
  render: (args) => (
    <ChartContainer {...args}>
      <LineChart
        accessibilityLayer
        data={multiSeriesData}
        margin={{
          left: 12,
          right: 12,
        }}
      >
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="month"
          tickLine={false}
          axisLine={false}
          tickMargin={8}
          tickFormatter={(value) => value.slice(0, 3)}
        />
        <ChartTooltip
          cursor={false}
          content={<ChartTooltipContent hideLabel />}
        />
        <Line
          dataKey="desktop"
          type="natural"
          stroke="var(--color-desktop)"
          strokeWidth={2}
          dot={false}
        />
        <Line
          dataKey="mobile"
          type="natural"
          stroke="var(--color-mobile)"
          strokeWidth={2}
          dot={false}
        />
      </LineChart>
    </ChartContainer>
  ),
};

/**
 * Combine Pie and Label components to create a doughnut chart.
 */
export const DoughnutChart: Story = {
  args: {
    config: singleSeriesConfig,
  },
  render: (args) => {
    const totalVisitors = useMemo(() => {
      return singleSeriesData.reduce((acc, curr) => acc + curr.visitors, 0);
    }, []);
    return (
      <ChartContainer {...args}>
        <PieChart>
          <ChartTooltip
            cursor={false}
            content={<ChartTooltipContent hideLabel />}
          />
          <Pie
            data={singleSeriesData}
            dataKey="visitors"
            nameKey="browser"
            innerRadius={48}
            strokeWidth={5}
          >
            <Label
              content={({ viewBox }) => {
                if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {
                  return (
                    <text
                      x={viewBox.cx}
                      y={viewBox.cy}
                      textAnchor="middle"
                      dominantBaseline="middle"
                    >
                      <tspan
                        x={viewBox.cx}
                        y={viewBox.cy}
                        className="fill-foreground font-bold text-3xl"
                      >
                        {totalVisitors.toLocaleString()}
                      </tspan>
                      <tspan
                        x={viewBox.cx}
                        y={(viewBox.cy || 0) + 24}
                        className="fill-muted-foreground"
                      >
                        Visitors
                      </tspan>
                    </text>
                  );
                }
              }}
            />
          </Pie>
        </PieChart>
      </ChartContainer>
    );
  },
};

================
File: apps/storybook/stories/checkbox.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Checkbox } from '@repo/design-system/components/ui/checkbox';

/**
 * A control that allows the user to toggle between checked and not checked.
 */
const meta: Meta<typeof Checkbox> = {
  title: 'ui/Checkbox',
  component: Checkbox,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    id: 'terms',
    disabled: false,
  },
  render: (args) => (
    <div className="flex space-x-2">
      <Checkbox {...args} />
      <label
        htmlFor={args.id}
        className="font-medium text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-50"
      >
        Accept terms and conditions
      </label>
    </div>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Checkbox>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the checkbox.
 */
export const Default: Story = {};

/**
 * Use the `disabled` prop to disable the checkbox.
 */
export const Disabled: Story = {
  args: {
    id: 'disabled-terms',
    disabled: true,
  },
};

================
File: apps/storybook/stories/collapsible.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Info } from 'lucide-react';

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@repo/design-system/components/ui/collapsible';

/**
 * An interactive component which expands/collapses a panel.
 */
const meta = {
  title: 'ui/Collapsible',
  component: Collapsible,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    className: 'w-96',
    disabled: false,
  },
  render: (args) => (
    <Collapsible {...args}>
      <CollapsibleTrigger className="flex gap-2">
        <h3 className="font-semibold">Can I use this in my project?</h3>
        <Info className="size-6" />
      </CollapsibleTrigger>
      <CollapsibleContent>
        Yes. Free to use for personal and commercial projects. No attribution
        required.
      </CollapsibleContent>
    </Collapsible>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Collapsible>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the collapsible.
 */
export const Default: Story = {};

/**
 * Use the `disabled` prop to disable the interaction.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

================
File: apps/storybook/stories/command.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { CommandSeparator } from 'cmdk';

import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@repo/design-system/components/ui/command';

/**
 * Fast, composable, unstyled command menu for React.
 */
const meta = {
  title: 'ui/Command',
  component: Command,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    className: 'rounded-lg w-96 border shadow-md',
  },
  render: (args) => (
    <Command {...args}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
        <CommandSeparator />
        <CommandGroup heading="Settings">
          <CommandItem>Profile</CommandItem>
          <CommandItem>Billing</CommandItem>
          <CommandItem>Settings</CommandItem>
        </CommandGroup>
      </CommandList>
    </Command>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Command>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the command.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/context-menu.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  ContextMenu,
  ContextMenuCheckboxItem,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuLabel,
  ContextMenuRadioGroup,
  ContextMenuRadioItem,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuTrigger,
} from '@repo/design-system/components/ui/context-menu';

/**
 * Displays a menu to the user — such as a set of actions or functions —
 * triggered by a button.
 */
const meta = {
  title: 'ui/ContextMenu',
  component: ContextMenu,
  tags: ['autodocs'],
  argTypes: {},
  args: {},
  render: (args) => (
    <ContextMenu {...args}>
      <ContextMenuTrigger className="flex h-48 w-96 items-center justify-center rounded-md border border-dashed bg-accent text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-32">
        <ContextMenuItem>Profile</ContextMenuItem>
        <ContextMenuItem>Billing</ContextMenuItem>
        <ContextMenuItem>Team</ContextMenuItem>
        <ContextMenuItem>Subscription</ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof ContextMenu>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the context menu.
 */
export const Default: Story = {};

/**
 * A context menu with shortcuts.
 */
export const WithShortcuts: Story = {
  render: (args) => (
    <ContextMenu {...args}>
      <ContextMenuTrigger className="flex h-48 w-96 items-center justify-center rounded-md border border-dashed bg-accent text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-32">
        <ContextMenuItem>
          Back
          <ContextMenuShortcut>⌘[</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem disabled>
          Forward
          <ContextMenuShortcut>⌘]</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem>
          Reload
          <ContextMenuShortcut>⌘R</ContextMenuShortcut>
        </ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  ),
};

/**
 * A context menu with a submenu.
 */
export const WithSubmenu: Story = {
  render: (args) => (
    <ContextMenu {...args}>
      <ContextMenuTrigger className="flex h-48 w-96 items-center justify-center rounded-md border border-dashed bg-accent text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-32">
        <ContextMenuItem>
          New Tab
          <ContextMenuShortcut>⌘N</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuSub>
          <ContextMenuSubTrigger>More Tools</ContextMenuSubTrigger>
          <ContextMenuSubContent>
            <ContextMenuItem>
              Save Page As...
              <ContextMenuShortcut>⇧⌘S</ContextMenuShortcut>
            </ContextMenuItem>
            <ContextMenuItem>Create Shortcut...</ContextMenuItem>
            <ContextMenuItem>Name Window...</ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>Developer Tools</ContextMenuItem>
          </ContextMenuSubContent>
        </ContextMenuSub>
      </ContextMenuContent>
    </ContextMenu>
  ),
};

/**
 * A context menu with checkboxes.
 */
export const WithCheckboxes: Story = {
  render: (args) => (
    <ContextMenu {...args}>
      <ContextMenuTrigger className="flex h-48 w-96 items-center justify-center rounded-md border border-dashed bg-accent text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-64">
        <ContextMenuCheckboxItem checked>
          Show Comments
          <ContextMenuShortcut>⌘⇧C</ContextMenuShortcut>
        </ContextMenuCheckboxItem>
        <ContextMenuCheckboxItem>Show Preview</ContextMenuCheckboxItem>
      </ContextMenuContent>
    </ContextMenu>
  ),
};

/**
 * A context menu with a radio group.
 */
export const WithRadioGroup: Story = {
  render: (args) => (
    <ContextMenu {...args}>
      <ContextMenuTrigger className="flex h-48 w-96 items-center justify-center rounded-md border border-dashed bg-accent text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-64">
        <ContextMenuRadioGroup value="light">
          <ContextMenuLabel inset>Theme</ContextMenuLabel>
          <ContextMenuRadioItem value="light">Light</ContextMenuRadioItem>
          <ContextMenuRadioItem value="dark">Dark</ContextMenuRadioItem>
        </ContextMenuRadioGroup>
      </ContextMenuContent>
    </ContextMenu>
  ),
};

================
File: apps/storybook/stories/dialog.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@repo/design-system/components/ui/dialog';

/**
 * A window overlaid on either the primary window or another dialog window,
 * rendering the content underneath inert.
 */
const meta = {
  title: 'ui/Dialog',
  component: Dialog,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Dialog {...args}>
      <DialogTrigger>Open</DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Are you absolutely sure?</DialogTitle>
          <DialogDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </DialogDescription>
        </DialogHeader>
        <DialogFooter className="gap-4">
          <button type="button" className="hover:underline">
            Cancel
          </button>
          <DialogClose>
            <button
              type="button"
              className="rounded bg-primary px-4 py-2 text-primary-foreground"
            >
              Continue
            </button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Dialog>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the dialog.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/drawer.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from '@repo/design-system/components/ui/drawer';

/**
 * A drawer component for React.
 */
const meta: Meta<typeof Drawer> = {
  title: 'ui/Drawer',
  component: Drawer,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Drawer {...args}>
      <DrawerTrigger>Open</DrawerTrigger>
      <DrawerContent>
        <DrawerHeader>
          <DrawerTitle>Are you sure absolutely sure?</DrawerTitle>
          <DrawerDescription>This action cannot be undone.</DrawerDescription>
        </DrawerHeader>
        <DrawerFooter>
          <button
            type="button"
            className="rounded bg-primary px-4 py-2 text-primary-foreground"
          >
            Submit
          </button>
          <DrawerClose>
            <button type="button" className="hover:underline">
              Cancel
            </button>
          </DrawerClose>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  ),
  parameters: {
    layout: 'centered',
  },
};

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the drawer.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/dropdown-menu.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Mail, Plus, PlusCircle, Search, UserPlus } from 'lucide-react';

import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from '@repo/design-system/components/ui/dropdown-menu';

/**
 * Displays a menu to the user — such as a set of actions or functions —
 * triggered by a button.
 */
const meta = {
  title: 'ui/DropdownMenu',
  component: DropdownMenu,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <DropdownMenu {...args}>
      <DropdownMenuTrigger>Open</DropdownMenuTrigger>
      <DropdownMenuContent className="w-44">
        <DropdownMenuLabel>My Account</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem>Profile</DropdownMenuItem>
        <DropdownMenuItem>Billing</DropdownMenuItem>
        <DropdownMenuItem>Team</DropdownMenuItem>
        <DropdownMenuItem>Subscription</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof DropdownMenu>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the dropdown menu.
 */
export const Default: Story = {};

/**
 * A dropdown menu with shortcuts.
 */
export const WithShortcuts: Story = {
  render: (args) => (
    <DropdownMenu {...args}>
      <DropdownMenuTrigger>Open</DropdownMenuTrigger>
      <DropdownMenuContent className="w-44">
        <DropdownMenuLabel>Controls</DropdownMenuLabel>
        <DropdownMenuItem>
          Back
          <DropdownMenuShortcut>⌘[</DropdownMenuShortcut>
        </DropdownMenuItem>
        <DropdownMenuItem disabled>
          Forward
          <DropdownMenuShortcut>⌘]</DropdownMenuShortcut>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  ),
};

/**
 * A dropdown menu with submenus.
 */
export const WithSubmenus: Story = {
  render: (args) => (
    <DropdownMenu {...args}>
      <DropdownMenuTrigger>Open</DropdownMenuTrigger>
      <DropdownMenuContent className="w-44">
        <DropdownMenuItem>
          <Search className="mr-2 size-4" />
          <span>Search</span>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <Plus className="mr-2 size-4" />
            <span>New Team</span>
            <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuSub>
            <DropdownMenuSubTrigger>
              <UserPlus className="mr-2 size-4" />
              <span>Invite users</span>
            </DropdownMenuSubTrigger>
            <DropdownMenuPortal>
              <DropdownMenuSubContent>
                <DropdownMenuItem>
                  <Mail className="mr-2 size-4" />
                  <span>Email</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <PlusCircle className="mr-2 size-4" />
                  <span>More...</span>
                </DropdownMenuItem>
              </DropdownMenuSubContent>
            </DropdownMenuPortal>
          </DropdownMenuSub>
        </DropdownMenuGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  ),
};

/**
 * A dropdown menu with radio items.
 */
export const WithRadioItems: Story = {
  render: (args) => (
    <DropdownMenu {...args}>
      <DropdownMenuTrigger>Open</DropdownMenuTrigger>
      <DropdownMenuContent className="w-44">
        <DropdownMenuLabel inset>Status</DropdownMenuLabel>
        <DropdownMenuRadioGroup value="warning">
          <DropdownMenuRadioItem value="info">Info</DropdownMenuRadioItem>
          <DropdownMenuRadioItem value="warning">Warning</DropdownMenuRadioItem>
          <DropdownMenuRadioItem value="error">Error</DropdownMenuRadioItem>
        </DropdownMenuRadioGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  ),
};

/**
 * A dropdown menu with checkboxes.
 */
export const WithCheckboxes: Story = {
  render: (args) => (
    <DropdownMenu {...args}>
      <DropdownMenuTrigger>Open</DropdownMenuTrigger>
      <DropdownMenuContent className="w-44">
        <DropdownMenuCheckboxItem checked>
          Autosave
          <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
        </DropdownMenuCheckboxItem>
        <DropdownMenuCheckboxItem>Show Comments</DropdownMenuCheckboxItem>
      </DropdownMenuContent>
    </DropdownMenu>
  ),
};

================
File: apps/storybook/stories/form.stories.tsx
================
import { zodResolver } from '@hookform/resolvers/zod';
import { action } from '@storybook/addon-actions';
import type { Meta, StoryObj } from '@storybook/react';
import { useForm } from 'react-hook-form';
import * as z from 'zod';

import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@repo/design-system/components/ui/form';

/**
 * Building forms with React Hook Form and Zod.
 */
const meta: Meta<typeof Form> = {
  title: 'ui/Form',
  component: Form,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => <ProfileForm {...args} />,
} satisfies Meta<typeof Form>;

export default meta;

type Story = StoryObj<typeof meta>;

const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
});

const ProfileForm = (args: Story['args']) => {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
    },
  });
  function onSubmit(values: z.infer<typeof formSchema>) {
    action('onSubmit')(values);
  }
  return (
    <Form {...args} {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <input
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  placeholder="username"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <button
          className="rounded bg-primary px-4 py-2 text-primary-foreground"
          type="submit"
        >
          Submit
        </button>
      </form>
    </Form>
  );
};

/**
 * The default form of the form.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/hover-card.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from '@repo/design-system/components/ui/hover-card';

/**
 * For sighted users to preview content available behind a link.
 */
const meta = {
  title: 'ui/HoverCard',
  component: HoverCard,
  tags: ['autodocs'],
  argTypes: {},
  args: {},
  render: (args) => (
    <HoverCard {...args}>
      <HoverCardTrigger>Hover</HoverCardTrigger>
      <HoverCardContent>
        The React Framework - created and maintained by @vercel.
      </HoverCardContent>
    </HoverCard>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof HoverCard>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the hover card.
 */
export const Default: Story = {};

/**
 * Use the `openDelay` and `closeDelay` props to control the delay before the
 * hover card opens and closes.
 */
export const Instant: Story = {
  args: {
    openDelay: 0,
    closeDelay: 0,
  },
};

================
File: apps/storybook/stories/input-otp.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { REGEXP_ONLY_DIGITS_AND_CHARS } from 'input-otp';

import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from '@repo/design-system/components/ui/input-otp';

/**
 * Accessible one-time password component with copy paste functionality.
 */
const meta = {
  title: 'ui/InputOTP',
  component: InputOTP,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    maxLength: 6,
    pattern: REGEXP_ONLY_DIGITS_AND_CHARS,
    children: null,
  },

  render: (args) => (
    <InputOTP {...args} render={undefined}>
      <InputOTPGroup>
        <InputOTPSlot index={0} />
        <InputOTPSlot index={1} />
        <InputOTPSlot index={2} />
        <InputOTPSlot index={3} />
        <InputOTPSlot index={4} />
        <InputOTPSlot index={5} />
      </InputOTPGroup>
    </InputOTP>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof InputOTP>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the InputOTP field.
 */
export const Default: Story = {};

/**
 * Use multiple groups to separate the input slots.
 */
export const SeparatedGroup: Story = {
  render: (args) => (
    <InputOTP {...args} render={undefined}>
      <InputOTPGroup>
        <InputOTPSlot index={0} />
        <InputOTPSlot index={1} />
        <InputOTPSlot index={2} />
      </InputOTPGroup>
      <InputOTPSeparator />
      <InputOTPGroup>
        <InputOTPSlot index={3} />
        <InputOTPSlot index={4} />
        <InputOTPSlot index={5} />
      </InputOTPGroup>
    </InputOTP>
  ),
};

================
File: apps/storybook/stories/input.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Input } from '@repo/design-system/components/ui/input';

/**
 * Displays a form input field or a component that looks like an input field.
 */
const meta = {
  title: 'ui/Input',
  component: Input,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    className: 'w-96',
    type: 'email',
    placeholder: 'Email',
    disabled: false,
  },
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Input>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the input field.
 */
export const Default: Story = {};

/**
 * Use the `disabled` prop to make the input non-interactive and appears faded,
 * indicating that input is not currently accepted.
 */
export const Disabled: Story = {
  args: { disabled: true },
};

/**
 * Use the `Label` component to includes a clear, descriptive label above or
 * alongside the input area to guide users.
 */
export const WithLabel: Story = {
  render: (args) => (
    <div className="grid items-center gap-1.5">
      <label htmlFor="email">{args.placeholder}</label>
      <Input {...args} id="email" />
    </div>
  ),
};

/**
 * Use a text element below the input field to provide additional instructions
 * or information to users.
 */
export const WithHelperText: Story = {
  render: (args) => (
    <div className="grid items-center gap-1.5">
      <label htmlFor="email-2">{args.placeholder}</label>
      <Input {...args} id="email-2" />
      <p className="text-foreground/50 text-sm">Enter your email address.</p>
    </div>
  ),
};

/**
 * Use the `Button` component to indicate that the input field can be submitted
 * or used to trigger an action.
 */
export const WithButton: Story = {
  render: (args) => (
    <div className="flex items-center space-x-2">
      <Input {...args} />
      <button
        className="rounded bg-primary px-4 py-2 text-primary-foreground"
        type="submit"
      >
        Subscribe
      </button>
    </div>
  ),
};

================
File: apps/storybook/stories/label.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Label } from '@repo/design-system/components/ui/label';

/**
 * Renders an accessible label associated with controls.
 */
const meta = {
  title: 'ui/Label',
  component: Label,
  tags: ['autodocs'],
  argTypes: {
    children: {
      control: { type: 'text' },
    },
  },
  args: {
    children: 'Your email address',
    htmlFor: 'email',
  },
} satisfies Meta<typeof Label>;

export default meta;

type Story = StoryObj<typeof Label>;

/**
 * The default form of the label.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/menubar.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Menubar,
  MenubarCheckboxItem,
  MenubarContent,
  MenubarGroup,
  MenubarItem,
  MenubarLabel,
  MenubarMenu,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSeparator,
  MenubarShortcut,
  MenubarSub,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarTrigger,
} from '@repo/design-system/components/ui/menubar';

/**
 * A visually persistent menu common in desktop applications that provides
 * quick access to a consistent set of commands.
 */
const meta = {
  title: 'ui/Menubar',
  component: Menubar,
  tags: ['autodocs'],
  argTypes: {},

  render: (args) => (
    <Menubar {...args}>
      <MenubarMenu>
        <MenubarTrigger>File</MenubarTrigger>
        <MenubarContent>
          <MenubarItem>
            New Tab <MenubarShortcut>⌘T</MenubarShortcut>
          </MenubarItem>
          <MenubarItem>New Window</MenubarItem>
          <MenubarSeparator />
          <MenubarItem disabled>Share</MenubarItem>
          <MenubarSeparator />
          <MenubarItem>Print</MenubarItem>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Menubar>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the menubar.
 */
export const Default: Story = {};

/**
 * A menubar with a submenu.
 */
export const WithSubmenu: Story = {
  render: (args) => (
    <Menubar {...args}>
      <MenubarMenu>
        <MenubarTrigger>Actions</MenubarTrigger>
        <MenubarContent>
          <MenubarItem>Download</MenubarItem>
          <MenubarSub>
            <MenubarSubTrigger>Share</MenubarSubTrigger>
            <MenubarSubContent>
              <MenubarItem>Email link</MenubarItem>
              <MenubarItem>Messages</MenubarItem>
              <MenubarItem>Notes</MenubarItem>
            </MenubarSubContent>
          </MenubarSub>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  ),
};

/**
 * A menubar with radio items.
 */
export const WithRadioItems: Story = {
  render: (args) => (
    <Menubar {...args}>
      <MenubarMenu>
        <MenubarTrigger>View</MenubarTrigger>
        <MenubarContent>
          <MenubarLabel inset>Device Size</MenubarLabel>
          <MenubarRadioGroup value="md">
            <MenubarRadioItem value="sm">Small</MenubarRadioItem>
            <MenubarRadioItem value="md">Medium</MenubarRadioItem>
            <MenubarRadioItem value="lg">Large</MenubarRadioItem>
          </MenubarRadioGroup>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  ),
};

/**
 * A menubar with checkbox items.
 */
export const WithCheckboxItems: Story = {
  render: (args) => (
    <Menubar {...args}>
      <MenubarMenu>
        <MenubarTrigger>Filters</MenubarTrigger>
        <MenubarContent>
          <MenubarItem>Show All</MenubarItem>
          <MenubarGroup>
            <MenubarCheckboxItem checked>Unread</MenubarCheckboxItem>
            <MenubarCheckboxItem checked>Important</MenubarCheckboxItem>
            <MenubarCheckboxItem>Flagged</MenubarCheckboxItem>
          </MenubarGroup>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  ),
};

================
File: apps/storybook/stories/navigation-menu.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from '@repo/design-system/components/ui/navigation-menu';

/**
 * A collection of links for navigating websites.
 */
const meta = {
  title: 'ui/NavigationMenu',
  component: NavigationMenu,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <NavigationMenu {...args}>
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuLink className={navigationMenuTriggerStyle()}>
            Overview
          </NavigationMenuLink>
        </NavigationMenuItem>
        <NavigationMenuList>
          <NavigationMenuItem>
            <NavigationMenuTrigger className={navigationMenuTriggerStyle()}>
              Documentation
            </NavigationMenuTrigger>
            <NavigationMenuContent>
              <ul className="grid w-96 p-2">
                <li>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    API Reference
                  </NavigationMenuLink>
                </li>
                <li>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    Getting Started
                  </NavigationMenuLink>
                </li>
                <li>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    Guides
                  </NavigationMenuLink>
                </li>
              </ul>
            </NavigationMenuContent>
          </NavigationMenuItem>
        </NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuLink
            className={navigationMenuTriggerStyle()}
            href="https:www.google.com"
            target="_blank"
          >
            External
          </NavigationMenuLink>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof NavigationMenu>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the navigation menu.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/pagination.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@repo/design-system/components/ui/pagination';

/**
 * Pagination with page navigation, next and previous links.
 */
const meta = {
  title: 'ui/Pagination',
  component: Pagination,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Pagination {...args}>
      <PaginationContent>
        <PaginationItem>
          <PaginationPrevious href="#" />
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#">1</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#">2</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#">3</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationEllipsis />
        </PaginationItem>
        <PaginationItem>
          <PaginationNext href="#" />
        </PaginationItem>
      </PaginationContent>
    </Pagination>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Pagination>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the pagination.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/popover.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@repo/design-system/components/ui/popover';

/**
 * Displays rich content in a portal, triggered by a button.
 */
const meta = {
  title: 'ui/Popover',
  component: Popover,
  tags: ['autodocs'],
  argTypes: {},

  render: (args) => (
    <Popover {...args}>
      <PopoverTrigger>Open</PopoverTrigger>
      <PopoverContent>Place content for the popover here.</PopoverContent>
    </Popover>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Popover>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the popover.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/progress.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Progress } from '@repo/design-system/components/ui/progress';

/**
 * Displays an indicator showing the completion progress of a task, typically
 * displayed as a progress bar.
 */
const meta = {
  title: 'ui/Progress',
  component: Progress,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    value: 30,
    max: 100,
  },
} satisfies Meta<typeof Progress>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the progress.
 */
export const Default: Story = {};

/**
 * When the progress is indeterminate.
 */
export const Indeterminate: Story = {
  args: {
    value: undefined,
  },
};

/**
 * When the progress is completed.
 */
export const Completed: Story = {
  args: {
    value: 100,
  },
};

================
File: apps/storybook/stories/radio-group.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  RadioGroup,
  RadioGroupItem,
} from '@repo/design-system/components/ui/radio-group';

/**
 * A set of checkable buttons—known as radio buttons—where no more than one of
 * the buttons can be checked at a time.
 */
const meta = {
  title: 'ui/RadioGroup',
  component: RadioGroup,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    defaultValue: 'comfortable',
    className: 'grid gap-2 grid-cols-[1rem_1fr] items-center',
  },
  render: (args) => (
    <RadioGroup {...args}>
      <RadioGroupItem value="default" id="r1" />
      <label htmlFor="r1">Default</label>
      <RadioGroupItem value="comfortable" id="r2" />
      <label htmlFor="r2">Comfortable</label>
      <RadioGroupItem value="compact" id="r3" />
      <label htmlFor="r3">Compact</label>
    </RadioGroup>
  ),
} satisfies Meta<typeof RadioGroup>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the radio group.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/resizable.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@repo/design-system/components/ui/resizable';

/**
 * Accessible resizable panel groups and layouts with keyboard support.
 */
const meta: Meta<typeof ResizablePanelGroup> = {
  title: 'ui/ResizablePanelGroup',
  component: ResizablePanelGroup,
  tags: ['autodocs'],
  argTypes: {
    onLayout: {
      control: false,
    },
  },
  args: {
    className: 'max-w-96 rounded-lg border',
    direction: 'horizontal',
  },
  render: (args) => (
    <ResizablePanelGroup {...args}>
      <ResizablePanel defaultSize={50}>
        <div className="flex h-[200px] items-center justify-center p-6">
          <span className="font-semibold">One</span>
        </div>
      </ResizablePanel>
      <ResizableHandle />
      <ResizablePanel defaultSize={50}>
        <ResizablePanelGroup direction="vertical">
          <ResizablePanel defaultSize={25}>
            <div className="flex h-full items-center justify-center p-6">
              <span className="font-semibold">Two</span>
            </div>
          </ResizablePanel>
          <ResizableHandle />
          <ResizablePanel defaultSize={75}>
            <div className="flex h-full items-center justify-center p-6">
              <span className="font-semibold">Three</span>
            </div>
          </ResizablePanel>
        </ResizablePanelGroup>
      </ResizablePanel>
    </ResizablePanelGroup>
  ),
} satisfies Meta<typeof ResizablePanelGroup>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the resizable panel group.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/scroll-area.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { ScrollArea } from '@repo/design-system/components/ui/scroll-area';

/**
 * Augments native scroll functionality for custom, cross-browser styling.
 */
const meta = {
  title: 'ui/ScrollArea',
  component: ScrollArea,
  tags: ['autodocs'],
  argTypes: {
    children: {
      control: 'text',
    },
  },
  args: {
    className: 'h-32 w-80 rounded-md border p-4',
    type: 'auto',
    children:
      "Jokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toilet. The king was furious, but he couldn't seem to stop Jokester. And then, one day, the people of the kingdom discovered that the jokes left by Jokester were so funny that they couldn't help but laugh. And once they started laughing, they couldn't stop. The king was so angry that he banished Jokester from the kingdom, but the people still laughed, and they laughed, and they laughed. And they all lived happily ever after.",
  },
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof ScrollArea>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the scroll area.
 */
export const Default: Story = {};

/**
 * Use the `type` prop with `always` to always show the scroll area.
 */
export const Always: Story = {
  args: {
    type: 'always',
  },
};

/**
 * Use the `type` prop with `hover` to show the scroll area on hover.
 */
export const Hover: Story = {
  args: {
    type: 'hover',
  },
};

/**
 * Use the `type` prop with `scroll` to show the scroll area when scrolling.
 */
export const Scroll: Story = {
  args: {
    type: 'scroll',
  },
};

================
File: apps/storybook/stories/select.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from '@repo/design-system/components/ui/select';

/**
 * Displays a list of options for the user to pick from—triggered by a button.
 */
const meta: Meta<typeof Select> = {
  title: 'ui/Select',
  component: Select,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Select {...args}>
      <SelectTrigger className="w-96">
        <SelectValue placeholder="Select a fruit" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Fruits</SelectLabel>
          <SelectItem value="apple">Apple</SelectItem>
          <SelectItem value="banana">Banana</SelectItem>
          <SelectItem value="blueberry">Blueberry</SelectItem>
          <SelectItem value="grapes">Grapes</SelectItem>
          <SelectItem value="pineapple">Pineapple</SelectItem>
        </SelectGroup>
        <SelectSeparator />
        <SelectGroup>
          <SelectLabel>Vegetables</SelectLabel>
          <SelectItem value="aubergine">Aubergine</SelectItem>
          <SelectItem value="broccoli">Broccoli</SelectItem>
          <SelectItem value="carrot" disabled>
            Carrot
          </SelectItem>
          <SelectItem value="courgette">Courgette</SelectItem>
          <SelectItem value="leek">Leek</SelectItem>
        </SelectGroup>
        <SelectSeparator />
        <SelectGroup>
          <SelectLabel>Meat</SelectLabel>
          <SelectItem value="beef">Beef</SelectItem>
          <SelectItem value="chicken">Chicken</SelectItem>
          <SelectItem value="lamb">Lamb</SelectItem>
          <SelectItem value="pork">Pork</SelectItem>
        </SelectGroup>
      </SelectContent>
    </Select>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Select>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the select.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/separator.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Separator } from '@repo/design-system/components/ui/separator';

/**
 * Visually or semantically separates content.
 */
const meta = {
  title: 'ui/Separator',
  component: Separator,
  tags: ['autodocs'],
  argTypes: {},
} satisfies Meta<typeof Separator>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the separator.
 */
export const Horizontal: Story = {
  render: () => (
    <div className="flex gap-2">
      <div>Left</div>
      <Separator orientation="vertical" className="h-auto" />
      <div>Right</div>
    </div>
  ),
};

/**
 * A vertical separator.
 */
export const Vertical: Story = {
  render: () => (
    <div className="grid gap-2">
      <div>Top</div>
      <Separator orientation="horizontal" />
      <div>Bottom</div>
    </div>
  ),
};

================
File: apps/storybook/stories/sheet.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@repo/design-system/components/ui/sheet';

/**
 * Extends the Dialog component to display content that complements the main
 * content of the screen.
 */
const meta: Meta<typeof SheetContent> = {
  title: 'ui/Sheet',
  component: Sheet,
  tags: ['autodocs'],
  argTypes: {
    side: {
      options: ['top', 'bottom', 'left', 'right'],
      control: {
        type: 'radio',
      },
    },
  },
  args: {
    side: 'right',
  },
  render: (args) => (
    <Sheet>
      <SheetTrigger>Open</SheetTrigger>
      <SheetContent {...args}>
        <SheetHeader>
          <SheetTitle>Are you absolutely sure?</SheetTitle>
          <SheetDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </SheetDescription>
        </SheetHeader>
        <SheetFooter>
          <SheetClose>
            <button type="button" className="hover:underline">
              Cancel
            </button>
          </SheetClose>
          <button
            type="button"
            className="rounded bg-primary px-4 py-2 text-primary-foreground"
          >
            Submit
          </button>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof SheetContent>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the sheet.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/sidebar.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import {
  AudioWaveform,
  BadgeCheck,
  Bell,
  BookOpen,
  Bot,
  ChevronRight,
  ChevronsUpDown,
  Command,
  CreditCard,
  Folder,
  Forward,
  Frame,
  GalleryVerticalEnd,
  LogOut,
  // biome-ignore lint/suspicious/noShadowRestrictedNames: "icon name"
  Map,
  MoreHorizontal,
  PieChart,
  Plus,
  Settings2,
  Sparkles,
  SquareTerminal,
  Trash2,
} from 'lucide-react';

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@repo/design-system/components/ui/avatar';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@repo/design-system/components/ui/breadcrumb';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@repo/design-system/components/ui/collapsible';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from '@repo/design-system/components/ui/dropdown-menu';
import { Separator } from '@repo/design-system/components/ui/separator';
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarTrigger,
} from '@repo/design-system/components/ui/sidebar';
import { useState } from 'react';

const meta: Meta<typeof Sidebar> = {
  title: 'ui/Sidebar',
  component: Sidebar,
  tags: ['autodocs'],
  argTypes: {},
};
export default meta;

type Story = StoryObj<typeof Sidebar>;

const data = {
  user: {
    name: 'shadcn',
    email: 'm@example.com',
    avatar: '/avatars/shadcn.jpg',
  },
  teams: [
    {
      name: 'Acme Inc',
      logo: GalleryVerticalEnd,
      plan: 'Enterprise',
    },
    {
      name: 'Acme Corp.',
      logo: AudioWaveform,
      plan: 'Startup',
    },
    {
      name: 'Evil Corp.',
      logo: Command,
      plan: 'Free',
    },
  ],
  navMain: [
    {
      title: 'Playground',
      url: '#',
      icon: SquareTerminal,
      isActive: true,
      items: [
        {
          title: 'History',
          url: '#',
        },
        {
          title: 'Starred',
          url: '#',
        },
        {
          title: 'Settings',
          url: '#',
        },
      ],
    },
    {
      title: 'Models',
      url: '#',
      icon: Bot,
      items: [
        {
          title: 'Genesis',
          url: '#',
        },
        {
          title: 'Explorer',
          url: '#',
        },
        {
          title: 'Quantum',
          url: '#',
        },
      ],
    },
    {
      title: 'Documentation',
      url: '#',
      icon: BookOpen,
      items: [
        {
          title: 'Introduction',
          url: '#',
        },
        {
          title: 'Get Started',
          url: '#',
        },
        {
          title: 'Tutorials',
          url: '#',
        },
        {
          title: 'Changelog',
          url: '#',
        },
      ],
    },
    {
      title: 'Settings',
      url: '#',
      icon: Settings2,
      items: [
        {
          title: 'General',
          url: '#',
        },
        {
          title: 'Team',
          url: '#',
        },
        {
          title: 'Billing',
          url: '#',
        },
        {
          title: 'Limits',
          url: '#',
        },
      ],
    },
  ],
  projects: [
    {
      name: 'Design Engineering',
      url: '#',
      icon: Frame,
    },
    {
      name: 'Sales & Marketing',
      url: '#',
      icon: PieChart,
    },
    {
      name: 'Travel',
      url: '#',
      icon: Map,
    },
  ],
};

export const Base: Story = {
  render: () => {
    const [activeTeam, setActiveTeam] = useState(data.teams[0]);

    return (
      <SidebarProvider>
        <Sidebar collapsible="icon">
          <SidebarHeader>
            <SidebarMenu>
              <SidebarMenuItem>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <SidebarMenuButton
                      size="lg"
                      className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
                    >
                      <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                        <activeTeam.logo className="size-4" />
                      </div>
                      <div className="grid flex-1 text-left text-sm leading-tight">
                        <span className="truncate font-semibold">
                          {activeTeam.name}
                        </span>
                        <span className="truncate text-xs">
                          {activeTeam.plan}
                        </span>
                      </div>
                      <ChevronsUpDown className="ml-auto" />
                    </SidebarMenuButton>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent
                    className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
                    align="start"
                    side="bottom"
                    sideOffset={4}
                  >
                    <DropdownMenuLabel className="text-muted-foreground text-xs">
                      Teams
                    </DropdownMenuLabel>
                    {data.teams.map((team, index) => (
                      <DropdownMenuItem
                        key={team.name}
                        onClick={() => setActiveTeam(team)}
                        className="gap-2 p-2"
                      >
                        <div className="flex size-6 items-center justify-center rounded-sm border">
                          <team.logo className="size-4 shrink-0" />
                        </div>
                        {team.name}
                        <DropdownMenuShortcut>
                          ⌘{index + 1}
                        </DropdownMenuShortcut>
                      </DropdownMenuItem>
                    ))}
                    <DropdownMenuSeparator />
                    <DropdownMenuItem className="gap-2 p-2">
                      <div className="flex size-6 items-center justify-center rounded-md border bg-background">
                        <Plus className="size-4" />
                      </div>
                      <div className="font-medium text-muted-foreground">
                        Add team
                      </div>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarHeader>
          <SidebarContent>
            <SidebarGroup>
              <SidebarGroupLabel>Platform</SidebarGroupLabel>
              <SidebarMenu>
                {data.navMain.map((item) => (
                  <Collapsible
                    key={item.title}
                    asChild
                    defaultOpen={item.isActive}
                    className="group/collapsible"
                  >
                    <SidebarMenuItem>
                      <CollapsibleTrigger asChild>
                        <SidebarMenuButton tooltip={item.title}>
                          {item.icon && <item.icon />}
                          <span>{item.title}</span>
                          <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                        </SidebarMenuButton>
                      </CollapsibleTrigger>
                      <CollapsibleContent>
                        <SidebarMenuSub>
                          {item.items?.map((subItem) => (
                            <SidebarMenuSubItem key={subItem.title}>
                              <SidebarMenuSubButton asChild>
                                <a href={subItem.url}>
                                  <span>{subItem.title}</span>
                                </a>
                              </SidebarMenuSubButton>
                            </SidebarMenuSubItem>
                          ))}
                        </SidebarMenuSub>
                      </CollapsibleContent>
                    </SidebarMenuItem>
                  </Collapsible>
                ))}
              </SidebarMenu>
            </SidebarGroup>
            <SidebarGroup className="group-data-[collapsible=icon]:hidden">
              <SidebarGroupLabel>Projects</SidebarGroupLabel>
              <SidebarMenu>
                {data.projects.map((item) => (
                  <SidebarMenuItem key={item.name}>
                    <SidebarMenuButton asChild>
                      <a href={item.url}>
                        <item.icon />
                        <span>{item.name}</span>
                      </a>
                    </SidebarMenuButton>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <SidebarMenuAction showOnHover>
                          <MoreHorizontal />
                          <span className="sr-only">More</span>
                        </SidebarMenuAction>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent
                        className="w-48 rounded-lg"
                        side="bottom"
                        align="end"
                      >
                        <DropdownMenuItem>
                          <Folder className="text-muted-foreground" />
                          <span>View Project</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Forward className="text-muted-foreground" />
                          <span>Share Project</span>
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem>
                          <Trash2 className="text-muted-foreground" />
                          <span>Delete Project</span>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </SidebarMenuItem>
                ))}
                <SidebarMenuItem>
                  <SidebarMenuButton className="text-sidebar-foreground/70">
                    <MoreHorizontal className="text-sidebar-foreground/70" />
                    <span>More</span>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              </SidebarMenu>
            </SidebarGroup>
          </SidebarContent>
          <SidebarFooter>
            <SidebarMenu>
              <SidebarMenuItem>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <SidebarMenuButton
                      size="lg"
                      className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
                    >
                      <Avatar className="h-8 w-8 rounded-lg">
                        <AvatarImage
                          src={data.user.avatar}
                          alt={data.user.name}
                        />
                        <AvatarFallback className="rounded-lg">
                          CN
                        </AvatarFallback>
                      </Avatar>
                      <div className="grid flex-1 text-left text-sm leading-tight">
                        <span className="truncate font-semibold">
                          {data.user.name}
                        </span>
                        <span className="truncate text-xs">
                          {data.user.email}
                        </span>
                      </div>
                      <ChevronsUpDown className="ml-auto size-4" />
                    </SidebarMenuButton>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent
                    className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
                    side="bottom"
                    align="end"
                    sideOffset={4}
                  >
                    <DropdownMenuLabel className="p-0 font-normal">
                      <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                        <Avatar className="h-8 w-8 rounded-lg">
                          <AvatarImage
                            src={data.user.avatar}
                            alt={data.user.name}
                          />
                          <AvatarFallback className="rounded-lg">
                            CN
                          </AvatarFallback>
                        </Avatar>
                        <div className="grid flex-1 text-left text-sm leading-tight">
                          <span className="truncate font-semibold">
                            {data.user.name}
                          </span>
                          <span className="truncate text-xs">
                            {data.user.email}
                          </span>
                        </div>
                      </div>
                    </DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuGroup>
                      <DropdownMenuItem>
                        <Sparkles />
                        Upgrade to Pro
                      </DropdownMenuItem>
                    </DropdownMenuGroup>
                    <DropdownMenuSeparator />
                    <DropdownMenuGroup>
                      <DropdownMenuItem>
                        <BadgeCheck />
                        Account
                      </DropdownMenuItem>
                      <DropdownMenuItem>
                        <CreditCard />
                        Billing
                      </DropdownMenuItem>
                      <DropdownMenuItem>
                        <Bell />
                        Notifications
                      </DropdownMenuItem>
                    </DropdownMenuGroup>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>
                      <LogOut />
                      Log out
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarFooter>
          <SidebarRail />
        </Sidebar>
        <SidebarInset>
          <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
            <div className="flex items-center gap-2 px-4">
              <SidebarTrigger className="-ml-1" />
              <Separator orientation="vertical" className="mr-2 h-4" />
              <Breadcrumb>
                <BreadcrumbList>
                  <BreadcrumbItem className="hidden md:block">
                    <BreadcrumbLink href="#">
                      Building Your Application
                    </BreadcrumbLink>
                  </BreadcrumbItem>
                  <BreadcrumbSeparator className="hidden md:block" />
                  <BreadcrumbItem>
                    <BreadcrumbPage>Data Fetching</BreadcrumbPage>
                  </BreadcrumbItem>
                </BreadcrumbList>
              </Breadcrumb>
            </div>
          </header>
          <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
            <div className="grid auto-rows-min gap-4 md:grid-cols-3">
              <div className="aspect-video rounded-xl bg-muted/50" />
              <div className="aspect-video rounded-xl bg-muted/50" />
              <div className="aspect-video rounded-xl bg-muted/50" />
            </div>
            <div className="min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min" />
          </div>
        </SidebarInset>
      </SidebarProvider>
    );
  },
  args: {},
};

================
File: apps/storybook/stories/skeleton.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Skeleton } from '@repo/design-system/components/ui/skeleton';

/**
 * Use to show a placeholder while content is loading.
 */
const meta = {
  title: 'ui/Skeleton',
  component: Skeleton,
  tags: ['autodocs'],
  argTypes: {},
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Skeleton>;

export default meta;

type Story = StoryObj<typeof Skeleton>;

/**
 * The default form of the skeleton.
 */
export const Default: Story = {
  render: (args) => (
    <div className="flex items-center space-x-4">
      <Skeleton {...args} className="h-12 w-12 rounded-full" />
      <div className="space-y-2">
        <Skeleton {...args} className="h-4 w-[250px]" />
        <Skeleton {...args} className="h-4 w-[200px]" />
      </div>
    </div>
  ),
};

================
File: apps/storybook/stories/slider.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Slider } from '@repo/design-system/components/ui/slider';

/**
 * An input where the user selects a value from within a given range.
 */
const meta = {
  title: 'ui/Slider',
  component: Slider,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    defaultValue: [33],
    max: 100,
    step: 1,
  },
} satisfies Meta<typeof Slider>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the slider.
 */
export const Default: Story = {};

/**
 * Use the `inverted` prop to have the slider fill from right to left.
 */
export const Inverted: Story = {
  args: {
    inverted: true,
  },
};

/**
 * Use the `disabled` prop to disable the slider.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

================
File: apps/storybook/stories/sonner.stories.tsx
================
import { action } from '@storybook/addon-actions';
import type { Meta, StoryObj } from '@storybook/react';
import { toast } from 'sonner';

import { Toaster } from '@repo/design-system/components/ui/sonner';

/**
 * An opinionated toast component for React.
 */
const meta: Meta<typeof Toaster> = {
  title: 'ui/Sonner',
  component: Toaster,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    position: 'bottom-right',
  },
  parameters: {
    layout: 'fullscreen',
  },
} satisfies Meta<typeof Toaster>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the toaster.
 */
export const Default: Story = {
  render: (args) => (
    <div className="flex min-h-96 items-center justify-center space-x-2">
      <button
        type="button"
        onClick={() =>
          toast('Event has been created', {
            description: new Date().toLocaleString(),
            action: {
              label: 'Undo',
              onClick: action('Undo clicked'),
            },
          })
        }
      >
        Show Toast
      </button>
      <Toaster {...args} />
    </div>
  ),
};

================
File: apps/storybook/stories/switch.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Switch } from '@repo/design-system/components/ui/switch';

/**
 * A control that allows the user to toggle between checked and not checked.
 */
const meta = {
  title: 'ui/Switch',
  component: Switch,
  tags: ['autodocs'],
  argTypes: {},
  parameters: {
    layout: 'centered',
  },
  render: (args) => (
    <div className="flex items-center space-x-2">
      <Switch {...args} />
      <label htmlFor={args.id} className="peer-disabled:text-foreground/50">
        Airplane Mode
      </label>
    </div>
  ),
} satisfies Meta<typeof Switch>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the switch.
 */
export const Default: Story = {
  args: {
    id: 'default-switch',
  },
};

/**
 * Use the `disabled` prop to disable the switch.
 */
export const Disabled: Story = {
  args: {
    id: 'disabled-switch',
    disabled: true,
  },
};

================
File: apps/storybook/stories/table.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@repo/design-system/components/ui/table';

const invoices = [
  {
    invoice: 'INV001',
    paymentStatus: 'Paid',
    totalAmount: '$250.00',
    paymentMethod: 'Credit Card',
  },
  {
    invoice: 'INV002',
    paymentStatus: 'Pending',
    totalAmount: '$150.00',
    paymentMethod: 'PayPal',
  },
  {
    invoice: 'INV003',
    paymentStatus: 'Unpaid',
    totalAmount: '$350.00',
    paymentMethod: 'Bank Transfer',
  },
  {
    invoice: 'INV004',
    paymentStatus: 'Paid',
    totalAmount: '$450.00',
    paymentMethod: 'Credit Card',
  },
];

/**
 * Powerful table and datagrids built using TanStack Table.
 */
const meta = {
  title: 'ui/Table',
  component: Table,
  tags: ['autodocs'],
  argTypes: {},
  render: (args) => (
    <Table {...args}>
      <TableCaption>A list of your recent invoices.</TableCaption>
      <TableHeader>
        <TableRow>
          <TableHead className="w-[100px]">Invoice</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Method</TableHead>
          <TableHead className="text-right">Amount</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {invoices.map((invoice) => (
          <TableRow key={invoice.invoice}>
            <TableCell className="font-medium">{invoice.invoice}</TableCell>
            <TableCell>{invoice.paymentStatus}</TableCell>
            <TableCell>{invoice.paymentMethod}</TableCell>
            <TableCell className="text-right">{invoice.totalAmount}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  ),
} satisfies Meta<typeof Table>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the table.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/tabs.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@repo/design-system/components/ui/tabs';

/**
 * A set of layered sections of content—known as tab panels—that are displayed
 * one at a time.
 */
const meta = {
  title: 'ui/Tabs',
  component: Tabs,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    defaultValue: 'account',
    className: 'w-96',
  },
  render: (args) => (
    <Tabs {...args}>
      <TabsList className="grid grid-cols-2">
        <TabsTrigger value="account">Account</TabsTrigger>
        <TabsTrigger value="password">Password</TabsTrigger>
      </TabsList>
      <TabsContent value="account">
        Make changes to your account here.
      </TabsContent>
      <TabsContent value="password">Change your password here.</TabsContent>
    </Tabs>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Tabs>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the tabs.
 */
export const Default: Story = {};

================
File: apps/storybook/stories/textarea.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Textarea } from '@repo/design-system/components/ui/textarea';

/**
 * Displays a form textarea or a component that looks like a textarea.
 */
const meta = {
  title: 'ui/Textarea',
  component: Textarea,
  tags: ['autodocs'],
  argTypes: {},
  args: {
    placeholder: 'Type your message here.',
    disabled: false,
  },
} satisfies Meta<typeof Textarea>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the textarea.
 */
export const Default: Story = {};

/**
 * Use the `disabled` prop to disable the textarea.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

/**
 * Use the `Label` component to includes a clear, descriptive label above or
 * alongside the text area to guide users.
 */
export const WithLabel: Story = {
  render: (args) => (
    <div className="grid w-full gap-1.5">
      <label htmlFor="message">Your message</label>
      <Textarea {...args} id="message" />
    </div>
  ),
};

/**
 * Use a text element below the text area to provide additional instructions
 * or information to users.
 */
export const WithText: Story = {
  render: (args) => (
    <div className="grid w-full gap-1.5">
      <label htmlFor="message-2">Your Message</label>
      <Textarea {...args} id="message-2" />
      <p className="text-slate-500 text-sm">
        Your message will be copied to the support team.
      </p>
    </div>
  ),
};

/**
 * Use the `Button` component to indicate that the text area can be submitted
 * or used to trigger an action.
 */
export const WithButton: Story = {
  render: (args) => (
    <div className="grid w-full gap-2">
      <Textarea {...args} />
      <button
        className="rounded bg-primary px-4 py-2 text-primary-foreground"
        type="submit"
      >
        Send Message
      </button>
    </div>
  ),
};

================
File: apps/storybook/stories/toast.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import {
  Toast,
  ToastAction,
  type ToastActionElement,
  type ToastProps,
} from '@repo/design-system/components/ui/toast';
import { Toaster } from '@repo/design-system/components/ui/toaster';
import { useToast } from '@repo/design-system/hooks/use-toast';

/**
 * A succinct message that is displayed temporarily.
 */
const meta = {
  title: 'ui/Toast',
  component: Toast,
  tags: ['autodocs'],
  argTypes: {},
  parameters: {
    layout: 'centered',
  },
  render: (args) => {
    const { toast } = useToast();
    return (
      <div>
        <button
          type="button"
          onClick={() => {
            toast(args);
          }}
        >
          Show Toast
        </button>
        <Toaster />
      </div>
    );
  },
} satisfies Meta<typeof Toast>;

export default meta;

type Story = Omit<StoryObj<typeof meta>, 'args'> & {
  args: Omit<ToasterToast, 'id'>;
};

type ToasterToast = ToastProps & {
  id: string;
  title?: string;
  description?: string;
  action?: ToastActionElement;
};

/**
 * The default form of the toast.
 */
export const Default: Story = {
  args: {
    description: 'Your message has been sent.',
  },
};

/**
 * Use the `title` prop to provide a title for the toast.
 */
export const WithTitle: Story = {
  args: {
    title: 'Uh oh! Something went wrong.',
    description: 'There was a problem with your request.',
  },
};

/**
 * Use the `action` prop to provide an action for the toast.
 */
export const WithAction: Story = {
  args: {
    title: 'Uh oh! Something went wrong.',
    description: 'There was a problem with your request.',
    action: <ToastAction altText="Try again">Try again</ToastAction>,
  },
};

/**
 * Use the `destructive` variant to indicate a destructive action.
 */
export const Destructive: Story = {
  args: {
    variant: 'destructive',
    title: 'Uh oh! Something went wrong.',
    description: 'There was a problem with your request.',
    action: <ToastAction altText="Try again">Try again</ToastAction>,
  },
};

================
File: apps/storybook/stories/toggle-group.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Bold, Italic, Underline } from 'lucide-react';

import {
  ToggleGroup,
  ToggleGroupItem,
} from '@repo/design-system/components/ui/toggle-group';

/**
 * A set of two-state buttons that can be toggled on or off.
 */
const meta = {
  title: 'ui/ToggleGroup',
  component: ToggleGroup,
  tags: ['autodocs'],
  argTypes: {
    type: {
      options: ['multiple', 'single'],
      control: { type: 'radio' },
    },
  },
  args: {
    variant: 'default',
    size: 'default',
    type: 'multiple',
    disabled: false,
  },
  render: (args) => (
    <ToggleGroup {...args}>
      <ToggleGroupItem value="bold" aria-label="Toggle bold">
        <Bold className="h-4 w-4" />
      </ToggleGroupItem>
      <ToggleGroupItem value="italic" aria-label="Toggle italic">
        <Italic className="h-4 w-4" />
      </ToggleGroupItem>
      <ToggleGroupItem value="underline" aria-label="Toggle underline">
        <Underline className="h-4 w-4" />
      </ToggleGroupItem>
    </ToggleGroup>
  ),
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof ToggleGroup>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the toggle group.
 */
export const Default: Story = {};

/**
 * Use the `outline` variant to emphasizing the individuality of each button
 * while keeping them visually cohesive.
 */
export const Outline: Story = {
  args: {
    variant: 'outline',
  },
};

/**
 * Use the `single` type to create exclusive selection within the button
 * group, allowing only one button to be active at a time.
 */
export const Single: Story = {
  args: {
    type: 'single',
  },
};

/**
 * Use the `sm` size for a compact version of the button group, featuring
 * smaller buttons for spaces with limited real estate.
 */
export const Small: Story = {
  args: {
    size: 'sm',
  },
};

/**
 * Use the `lg` size for a more prominent version of the button group, featuring
 * larger buttons for emphasis.
 */
export const Large: Story = {
  args: {
    size: 'lg',
  },
};

/**
 * Add the `disabled` prop to a button to prevent interactions.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

================
File: apps/storybook/stories/toggle.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Bold, Italic } from 'lucide-react';

import { Toggle } from '@repo/design-system/components/ui/toggle';

/**
 * A two-state button that can be either on or off.
 */
const meta: Meta<typeof Toggle> = {
  title: 'ui/Toggle',
  component: Toggle,
  tags: ['autodocs'],
  argTypes: {
    children: {
      control: { disable: true },
    },
  },
  args: {
    children: <Bold className="h-4 w-4" />,
    'aria-label': 'Toggle bold',
  },
  parameters: {
    layout: 'centered',
  },
};
export default meta;

type Story = StoryObj<typeof Toggle>;

/**
 * The default form of the toggle.
 */
export const Default: Story = {};

/**
 * Use the `outline` variant for a distinct outline, emphasizing the boundary
 * of the selection circle for clearer visibility
 */
export const Outline: Story = {
  args: {
    variant: 'outline',
    children: <Italic className="h-4 w-4" />,
    'aria-label': 'Toggle italic',
  },
};

/**
 * Use the text element to add a label to the toggle.
 */
export const WithText: Story = {
  render: (args) => (
    <Toggle {...args}>
      <Italic className="mr-2 h-4 w-4" />
      Italic
    </Toggle>
  ),
  args: { ...Outline.args },
};

/**
 * Use the `sm` size for a smaller toggle, suitable for interfaces needing
 * compact elements without sacrificing usability.
 */
export const Small: Story = {
  args: {
    size: 'sm',
  },
};

/**
 * Use the `lg` size for a larger toggle, offering better visibility and
 * easier interaction for users.
 */
export const Large: Story = {
  args: {
    size: 'lg',
  },
};

/**
 * Add the `disabled` prop to prevent interactions with the toggle.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
  },
};

================
File: apps/storybook/stories/tooltip.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { Plus } from 'lucide-react';

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@repo/design-system/components/ui/tooltip';

/**
 * A popup that displays information related to an element when the element
 * receives keyboard focus or the mouse hovers over it.
 */
const meta: Meta<typeof TooltipContent> = {
  title: 'ui/Tooltip',
  component: TooltipContent,
  tags: ['autodocs'],
  argTypes: {
    side: {
      options: ['top', 'bottom', 'left', 'right'],
      control: {
        type: 'radio',
      },
    },
    children: {
      control: 'text',
    },
  },
  args: {
    side: 'top',
    children: 'Add to library',
  },
  parameters: {
    layout: 'centered',
  },
  render: (args) => (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger>
          <Plus className="h-4 w-4" />
          <span className="sr-only">Add</span>
        </TooltipTrigger>
        <TooltipContent {...args} />
      </Tooltip>
    </TooltipProvider>
  ),
} satisfies Meta<typeof TooltipContent>;

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * The default form of the tooltip.
 */
export const Default: Story = {};

/**
 * Use the `bottom` side to display the tooltip below the element.
 */
export const Bottom: Story = {
  args: {
    side: 'bottom',
  },
};

/**
 * Use the `left` side to display the tooltip to the left of the element.
 */
export const Left: Story = {
  args: {
    side: 'left',
  },
};

/**
 * Use the `right` side to display the tooltip to the right of the element.
 */
export const Right: Story = {
  args: {
    side: 'right',
  },
};

================
File: apps/storybook/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

*storybook.log

# storybook
storybook-static/

================
File: apps/storybook/next.config.ts
================
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  reactStrictMode: true,
};

export default nextConfig;

================
File: apps/storybook/package.json
================
{
  "name": "storybook",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "chromatic": "chromatic --exit-zero-on-changes",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@repo/design-system": "workspace:*",
    "lucide-react": "^0.473.0",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.4",
    "@repo/typescript-config": "workspace:*",
    "@storybook/addon-essentials": "^8.5.0",
    "@storybook/addon-interactions": "^8.5.0",
    "@storybook/addon-onboarding": "^8.5.0",
    "@storybook/addon-themes": "^8.5.0",
    "@storybook/blocks": "^8.5.0",
    "@storybook/nextjs": "^8.5.0",
    "@storybook/react": "^8.5.0",
    "@storybook/test": "^8.5.0",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "chromatic": "^11.25.0",
    "postcss": "^8",
    "storybook": "^8.5.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: apps/storybook/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: apps/storybook/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/pages/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn-pages-router) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/pages/building-your-application/deploying) for more details.

================
File: apps/storybook/tailwind.config.ts
================
export { config as default } from '@repo/tailwind-config/config';

================
File: apps/storybook/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": [
    "next-env.d.ts",
    "next.config.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ]
}

================
File: apps/web/.well-known/vercel/flags/route.ts
================
import { getFlags } from '@repo/feature-flags/access';

export const GET = getFlags;

================
File: apps/web/app/(home)/components/cases.tsx
================
'use client';

import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
} from '@repo/design-system/components/ui/carousel';
import { useEffect, useState } from 'react';

export const Cases = () => {
  const [api, setApi] = useState<CarouselApi>();
  const [current, setCurrent] = useState(0);

  useEffect(() => {
    if (!api) {
      return;
    }

    setTimeout(() => {
      if (api.selectedScrollSnap() + 1 === api.scrollSnapList().length) {
        setCurrent(0);
        api.scrollTo(0);
      } else {
        api.scrollNext();
        setCurrent(current + 1);
      }
    }, 1000);
  }, [api, current]);

  return (
    <div className="w-full py-20 lg:py-40">
      <div className="container mx-auto">
        <div className="flex flex-col gap-10">
          <h2 className="text-left font-regular text-xl tracking-tighter md:text-5xl lg:max-w-xl">
            Trusted by thousands of businesses worldwide
          </h2>
          <Carousel setApi={setApi} className="w-full">
            <CarouselContent>
              {Array.from({ length: 15 }).map((_, index) => (
                <CarouselItem className="basis-1/4 lg:basis-1/6" key={index}>
                  <div className="flex aspect-square items-center justify-center rounded-md bg-muted p-6">
                    <span className="text-sm">Logo {index + 1}</span>
                  </div>
                </CarouselItem>
              ))}
            </CarouselContent>
          </Carousel>
        </div>
      </div>
    </div>
  );
};

================
File: apps/web/app/(home)/components/cta.tsx
================
import { env } from '@/env';
import { Button } from '@repo/design-system/components/ui/button';
import { MoveRight, PhoneCall } from 'lucide-react';
import Link from 'next/link';

export const CTA = () => (
  <div className="w-full py-20 lg:py-40">
    <div className="container mx-auto">
      <div className="flex flex-col items-center gap-8 rounded-md bg-muted p-4 text-center lg:p-14">
        <div className="flex flex-col gap-2">
          <h3 className="max-w-xl font-regular text-3xl tracking-tighter md:text-5xl">
            Try our platform today!
          </h3>
          <p className="max-w-xl text-lg text-muted-foreground leading-relaxed tracking-tight">
            Managing a small business today is already tough. Avoid further
            complications by ditching outdated, tedious trade methods. Our goal
            is to streamline SMB trade, making it easier and faster than ever.
          </p>
        </div>
        <div className="flex flex-row gap-4">
          <Button className="gap-4" variant="outline" asChild>
            <Link href="/contact">
              Jump on a call <PhoneCall className="h-4 w-4" />
            </Link>
          </Button>
          <Button className="gap-4" asChild>
            <Link href={env.NEXT_PUBLIC_APP_URL}>
              Sign up here <MoveRight className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>
    </div>
  </div>
);

================
File: apps/web/app/(home)/components/faq.tsx
================
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@repo/design-system/components/ui/accordion';
import { Button } from '@repo/design-system/components/ui/button';
import { PhoneCall } from 'lucide-react';
import Link from 'next/link';

export const FAQ = () => (
  <div className="w-full py-20 lg:py-40">
    <div className="container mx-auto">
      <div className="grid gap-10 lg:grid-cols-2">
        <div className="flex flex-col gap-10">
          <div className="flex flex-col gap-4">
            <div className="flex flex-col gap-2">
              <h4 className="max-w-xl text-left font-regular text-3xl tracking-tighter md:text-5xl">
                This is the start of something new
              </h4>
              <p className="max-w-xl text-left text-lg text-muted-foreground leading-relaxed tracking-tight lg:max-w-lg">
                Managing a small business today is already tough. Avoid further
                complications by ditching outdated, tedious trade methods. Our
                goal is to streamline SMB trade, making it easier and faster
                than ever.
              </p>
            </div>
            <div className="">
              <Button className="gap-4" variant="outline" asChild>
                <Link href="/contact">
                  Any questions? Reach out <PhoneCall className="h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        </div>
        <Accordion type="single" collapsible className="w-full">
          {Array.from({ length: 8 }).map((_, index) => (
            <AccordionItem key={index} value={`index-${index}`}>
              <AccordionTrigger>
                This is the start of something new
              </AccordionTrigger>
              <AccordionContent>
                Managing a small business today is already tough. Avoid further
                complications by ditching outdated, tedious trade methods. Our
                goal is to streamline SMB trade, making it easier and faster
                than ever.
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  </div>
);

================
File: apps/web/app/(home)/components/features.tsx
================
import { User } from 'lucide-react';

export const Features = () => (
  <div className="w-full py-20 lg:py-40">
    <div className="container mx-auto">
      <div className="flex flex-col gap-10">
        <div className="flex flex-col items-start gap-4">
          <div className="flex flex-col gap-2">
            <h2 className="max-w-xl text-left font-regular text-3xl tracking-tighter md:text-5xl">
              Something new!
            </h2>
            <p className="max-w-xl text-left text-lg text-muted-foreground leading-relaxed tracking-tight lg:max-w-lg">
              Managing a small business today is already tough.
            </p>
          </div>
        </div>
        <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
          <div className="flex aspect-square h-full flex-col justify-between rounded-md bg-muted p-6 lg:col-span-2 lg:aspect-auto">
            <User className="h-8 w-8 stroke-1" />
            <div className="flex flex-col">
              <h3 className="text-xl tracking-tight">Pay supplier invoices</h3>
              <p className="max-w-xs text-base text-muted-foreground">
                Our goal is to streamline SMB trade, making it easier and faster
                than ever.
              </p>
            </div>
          </div>
          <div className="flex aspect-square flex-col justify-between rounded-md bg-muted p-6">
            <User className="h-8 w-8 stroke-1" />
            <div className="flex flex-col">
              <h3 className="text-xl tracking-tight">Pay supplier invoices</h3>
              <p className="max-w-xs text-base text-muted-foreground">
                Our goal is to streamline SMB trade, making it easier and faster
                than ever.
              </p>
            </div>
          </div>

          <div className="flex aspect-square flex-col justify-between rounded-md bg-muted p-6">
            <User className="h-8 w-8 stroke-1" />
            <div className="flex flex-col">
              <h3 className="text-xl tracking-tight">Pay supplier invoices</h3>
              <p className="max-w-xs text-base text-muted-foreground">
                Our goal is to streamline SMB trade, making it easier and faster
                than ever.
              </p>
            </div>
          </div>
          <div className="flex aspect-square h-full flex-col justify-between rounded-md bg-muted p-6 lg:col-span-2 lg:aspect-auto">
            <User className="h-8 w-8 stroke-1" />
            <div className="flex flex-col">
              <h3 className="text-xl tracking-tight">Pay supplier invoices</h3>
              <p className="max-w-xs text-base text-muted-foreground">
                Our goal is to streamline SMB trade, making it easier and faster
                than ever.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
);

================
File: apps/web/app/(home)/components/hero.tsx
================
import { env } from '@/env';
import { blog } from '@repo/cms';
import { Feed } from '@repo/cms/components/feed';
import { Button } from '@repo/design-system/components/ui/button';
import { MoveRight, PhoneCall } from 'lucide-react';
import { draftMode } from 'next/headers';
import Link from 'next/link';

export const Hero = async () => {
  const draft = await draftMode();

  return (
    <div className="w-full">
      <div className="container mx-auto">
        <div className="flex flex-col items-center justify-center gap-8 py-20 lg:py-40">
          <div>
            <Feed queries={[blog.latestPostQuery]} draft={draft.isEnabled}>
              {/* biome-ignore lint/suspicious/useAwait: "Server Actions must be async" */}
              {async ([data]) => {
                'use server';

                return (
                  <Button
                    variant="secondary"
                    size="sm"
                    className="gap-4"
                    asChild
                  >
                    <Link href={`/blog/${data.blog.posts.item?._slug}`}>
                      Read our latest article <MoveRight className="h-4 w-4" />
                    </Link>
                  </Button>
                );
              }}
            </Feed>
          </div>
          <div className="flex flex-col gap-4">
            <h1 className="max-w-2xl text-center font-regular text-5xl tracking-tighter md:text-7xl">
              This is the start of something new
            </h1>
            <p className="max-w-2xl text-center text-lg text-muted-foreground leading-relaxed tracking-tight md:text-xl">
              Managing a small business today is already tough. Avoid further
              complications by ditching outdated, tedious trade methods. Our
              goal is to streamline SMB trade, making it easier and faster than
              ever.
            </p>
          </div>
          <div className="flex flex-row gap-3">
            <Button size="lg" className="gap-4" variant="outline" asChild>
              <Link href="/contact">
                Get in touch <PhoneCall className="h-4 w-4" />
              </Link>
            </Button>
            <Button size="lg" className="gap-4" asChild>
              <Link href={env.NEXT_PUBLIC_APP_URL}>
                Sign up <MoveRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

================
File: apps/web/app/(home)/components/stats.tsx
================
import { MoveDownLeft, MoveUpRight } from 'lucide-react';

export const Stats = () => (
  <div className="w-full py-20 lg:py-40">
    <div className="container mx-auto">
      <div className="grid grid-cols-1 gap-10 lg:grid-cols-2">
        <div className="flex flex-col items-start gap-4">
          <div className="flex flex-col gap-2">
            <h2 className="text-left font-regular text-xl tracking-tighter md:text-5xl lg:max-w-xl">
              This is the start of something new
            </h2>
            <p className="text-left text-lg text-muted-foreground leading-relaxed tracking-tight lg:max-w-sm">
              Managing a small business today is already tough. Avoid further
              complications by ditching outdated, tedious trade methods. Our
              goal is to streamline SMB trade, making it easier and faster than
              ever.
            </p>
          </div>
        </div>
        <div className="flex items-center justify-center">
          <div className="grid w-full grid-cols-1 gap-2 text-left sm:grid-cols-2 lg:grid-cols-2">
            <div className="flex flex-col justify-between gap-0 rounded-md border p-6">
              <MoveUpRight className="mb-10 h-4 w-4 text-primary" />
              <h2 className="flex max-w-xl flex-row items-end gap-4 text-left font-regular text-4xl tracking-tighter">
                500.000
                <span className="text-muted-foreground text-sm tracking-normal">
                  +20.1%
                </span>
              </h2>
              <p className="max-w-xl text-left text-base text-muted-foreground leading-relaxed tracking-tight">
                Monthly active users
              </p>
            </div>
            <div className="flex flex-col justify-between gap-0 rounded-md border p-6">
              <MoveDownLeft className="mb-10 h-4 w-4 text-destructive" />
              <h2 className="flex max-w-xl flex-row items-end gap-4 text-left font-regular text-4xl tracking-tighter">
                20.105
                <span className="text-muted-foreground text-sm tracking-normal">
                  -2%
                </span>
              </h2>
              <p className="max-w-xl text-left text-base text-muted-foreground leading-relaxed tracking-tight">
                Daily active users
              </p>
            </div>
            <div className="flex flex-col justify-between gap-0 rounded-md border p-6">
              <MoveUpRight className="mb-10 h-4 w-4 text-primary" />
              <h2 className="flex max-w-xl flex-row items-end gap-4 text-left font-regular text-4xl tracking-tighter">
                $523.520
                <span className="text-muted-foreground text-sm tracking-normal">
                  +8%
                </span>
              </h2>
              <p className="max-w-xl text-left text-base text-muted-foreground leading-relaxed tracking-tight">
                Monthly recurring revenue
              </p>
            </div>
            <div className="flex flex-col justify-between gap-0 rounded-md border p-6">
              <MoveUpRight className="mb-10 h-4 w-4 text-primary" />
              <h2 className="flex max-w-xl flex-row items-end gap-4 text-left font-regular text-4xl tracking-tighter">
                $1052
                <span className="text-muted-foreground text-sm tracking-normal">
                  +2%
                </span>
              </h2>
              <p className="max-w-xl text-left text-base text-muted-foreground leading-relaxed tracking-tight">
                Cost per acquisition
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
);

================
File: apps/web/app/(home)/components/tenant-display.tsx
================
'use client';

export function TenantDisplay({ connectionStatus }: { connectionStatus: boolean }) {
    return (
        <div>
            <h1>Tenant Status</h1>
            <p>Connection: {connectionStatus ? 'Active' : 'Not Found'}</p>
        </div>
    );
}

================
File: apps/web/app/(home)/components/tenant-info.tsx
================
import { getTenantConnectionUrl } from '@repo/database/src/tenant-app/tenant-lookup';
import { TenantDisplay } from './tenant-display';

export async function TenantInfo({ subdomain }: { subdomain: string }) {
    console.log('Looking up tenant:', subdomain); // For debugging
    
    const connectionUrl = await getTenantConnectionUrl(subdomain);
    console.log('Connection found:', !!connectionUrl); // For debugging (don't log actual URL)
    
    return <TenantDisplay connectionStatus={!!connectionUrl} />;
}

================
File: apps/web/app/(home)/components/testimonials.tsx
================
'use client';

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@repo/design-system/components/ui/avatar';
import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
} from '@repo/design-system/components/ui/carousel';
import { User } from 'lucide-react';
import { useEffect, useState } from 'react';

export const Testimonials = () => {
  const [api, setApi] = useState<CarouselApi>();
  const [current, setCurrent] = useState(0);

  useEffect(() => {
    if (!api) {
      return;
    }

    setTimeout(() => {
      if (api.selectedScrollSnap() + 1 === api.scrollSnapList().length) {
        setCurrent(0);
        api.scrollTo(0);
      } else {
        api.scrollNext();
        setCurrent(current + 1);
      }
    }, 4000);
  }, [api, current]);

  return (
    <div className="w-full py-20 lg:py-40">
      <div className="container mx-auto">
        <div className="flex flex-col gap-10">
          <h2 className="text-left font-regular text-3xl tracking-tighter md:text-5xl lg:max-w-xl">
            Trusted by thousands of businesses worldwide
          </h2>
          <Carousel setApi={setApi} className="w-full">
            <CarouselContent>
              {Array.from({ length: 15 }).map((_, index) => (
                <CarouselItem className="lg:basis-1/2" key={index}>
                  <div className="flex aspect-video h-full flex-col justify-between rounded-md bg-muted p-6 lg:col-span-2">
                    <User className="h-8 w-8 stroke-1" />
                    <div className="flex flex-col gap-4">
                      <div className="flex flex-col">
                        <h3 className="text-xl tracking-tight">
                          Best decision
                        </h3>
                        <p className="max-w-xs text-base text-muted-foreground">
                          Our goal was to streamline SMB trade, making it easier
                          and faster than ever and we did it together.
                        </p>
                      </div>
                      <p className="flex flex-row items-center gap-2 text-sm">
                        <span className="text-muted-foreground">By</span>
                        <Avatar className="h-6 w-6">
                          <AvatarImage src="https://github.com/shadcn.png" />
                          <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                        <span>John Johnsen</span>
                      </p>
                    </div>
                  </div>
                </CarouselItem>
              ))}
            </CarouselContent>
          </Carousel>
        </div>
      </div>
    </div>
  );
};

================
File: apps/web/app/(home)/tenant/page.tsx
================
import { TenantInfo } from '../components/tenant-info';

export default async function TenantPage({
    params: { subdomain }
}: {
    params: { subdomain: string }
}) {
    return (
        <div>
            <TenantInfo subdomain={subdomain} />
        </div>
    );
}

================
File: apps/web/app/(home)/page.tsx
================
import { showBetaFeature } from '@repo/feature-flags';
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import { Cases } from './components/cases';
import { CTA } from './components/cta';
import { FAQ } from './components/faq';
import { Features } from './components/features';
import { Hero } from './components/hero';
import { Stats } from './components/stats';
import { Testimonials } from './components/testimonials';

const meta = {
  title: 'From zero to production in minutes.',
  description:
    "next-forge is a production-grade boilerplate for modern Next.js apps. It's designed to have everything you need to build your new SaaS app as quick as possible. Authentication, billing, analytics, SEO, and more. It's all here.",
};

export const metadata: Metadata = createMetadata(meta);

const Home = async () => {
  const betaFeature = await showBetaFeature();

  return (
    <>
      {betaFeature && (
        <div className="w-full bg-black py-2 text-center text-white">
          Beta feature now available
        </div>
      )}
      <Hero />
      <Cases />
      <Features />
      <Stats />
      <Testimonials />
      <FAQ />
      <CTA />
    </>
  );
};

export default Home;

================
File: apps/web/app/[subdomain]/page.tsx
================
import { TenantInfo } from '../(home)/components/tenant-info';

// This page will be accessible at: http://mg.localhost:3000
export default async function TenantPage({
    params: { subdomain }
}: {
    params: { subdomain: string }
}) {
    console.log('Subdomain:', subdomain); // For debugging
    
    return (
        <div className="p-4">
            <h1 className="text-xl mb-4">Tenant Page: {subdomain}</h1>
            <TenantInfo subdomain={subdomain} />
        </div>
    );
}

================
File: apps/web/app/blog/[slug]/page.tsx
================
import { Sidebar } from '@/components/sidebar';
import { env } from '@/env';
import { ArrowLeftIcon } from '@radix-ui/react-icons';
import { blog } from '@repo/cms';
import { Body } from '@repo/cms/components/body';
import { CodeBlock } from '@repo/cms/components/code-block';
import { Feed } from '@repo/cms/components/feed';
import { Image } from '@repo/cms/components/image';
import { TableOfContents } from '@repo/cms/components/toc';
import { JsonLd } from '@repo/seo/json-ld';
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import { draftMode } from 'next/headers';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import Balancer from 'react-wrap-balancer';

const protocol = env.VERCEL_PROJECT_PRODUCTION_URL?.startsWith('https')
  ? 'https'
  : 'http';
const url = new URL(`${protocol}://${env.VERCEL_PROJECT_PRODUCTION_URL}`);

type BlogPostProperties = {
  readonly params: Promise<{
    slug: string;
  }>;
};

export const generateMetadata = async ({
  params,
}: BlogPostProperties): Promise<Metadata> => {
  const { slug } = await params;
  const post = await blog.getPost(slug);

  if (!post) {
    return {};
  }

  return createMetadata({
    title: post._title,
    description: post.description,
    image: post.image.url,
  });
};

export const generateStaticParams = async (): Promise<{ slug: string }[]> => {
  const posts = await blog.getPosts();

  return posts.map(({ _slug }) => ({ slug: _slug }));
};

const BlogPost = async ({ params }: BlogPostProperties) => {
  const { slug } = await params;
  const draft = await draftMode();

  return (
    <Feed queries={[blog.postQuery(slug)]} draft={draft.isEnabled}>
      {/* biome-ignore lint/suspicious/useAwait: "Server Actions must be async" */}
      {async ([data]) => {
        'use server';

        const page = data.blog.posts.item;

        if (!page) {
          notFound();
        }

        return (
          <>
            <JsonLd
              code={{
                '@type': 'BlogPosting',
                '@context': 'https://schema.org',
                datePublished: page.date,
                description: page.description,
                mainEntityOfPage: {
                  '@type': 'WebPage',
                  '@id': new URL(`/blog/${page._slug}`, url).toString(),
                },
                headline: page._title,
                image: page.image.url,
                dateModified: page.date,
                author: page.authors.at(0)?._title,
                isAccessibleForFree: true,
              }}
            />
            <div className="container py-16">
              <Link
                className="mb-4 inline-flex items-center gap-1 text-muted-foreground text-sm focus:underline focus:outline-none"
                href="/blog"
              >
                <ArrowLeftIcon className="h-4 w-4" />
                Back to Blog
              </Link>
              <div className="mt-16 flex flex-col items-start gap-8 sm:flex-row">
                <div className="sm:flex-1">
                  <div className="prose prose-neutral dark:prose-invert max-w-none">
                    <h1 className="scroll-m-20 font-extrabold text-4xl tracking-tight lg:text-5xl">
                      <Balancer>{page._title}</Balancer>
                    </h1>
                    <p className="leading-7 [&:not(:first-child)]:mt-6">
                      <Balancer>{page.description}</Balancer>
                    </p>
                    {page.image ? (
                      <Image
                        src={page.image.url}
                        width={page.image.width}
                        height={page.image.height}
                        alt={page.image.alt ?? ''}
                        className="my-16 h-full w-full rounded-xl"
                        priority
                      />
                    ) : undefined}
                    <div className="mx-auto max-w-prose">
                      <Body
                        content={page.body.json.content}
                        components={{
                          pre: ({ code, language }) => {
                            return (
                              <CodeBlock
                                theme="vesper"
                                snippets={[{ code, language }]}
                              />
                            );
                          },
                        }}
                      />
                    </div>
                  </div>
                </div>
                <div className="sticky top-24 hidden shrink-0 md:block">
                  <Sidebar
                    toc={<TableOfContents data={page.body.json.toc} />}
                    readingTime={`${page.body.readingTime} min read`}
                    date={new Date(page.date)}
                  />
                </div>
              </div>
            </div>
          </>
        );
      }}
    </Feed>
  );
};

export default BlogPost;

================
File: apps/web/app/blog/page.tsx
================
import { blog } from '@repo/cms';
import { Feed } from '@repo/cms/components/feed';
import { Image } from '@repo/cms/components/image';
import { cn } from '@repo/design-system/lib/utils';
import type { Blog, WithContext } from '@repo/seo/json-ld';
import { JsonLd } from '@repo/seo/json-ld';
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import { draftMode } from 'next/headers';
import Link from 'next/link';

const title = 'Blog';
const description = 'Thoughts, ideas, and opinions.';

export const metadata: Metadata = createMetadata({ title, description });

const BlogIndex = async () => {
  const draft = await draftMode();

  const jsonLd: WithContext<Blog> = {
    '@type': 'Blog',
    '@context': 'https://schema.org',
  };

  return (
    <>
      <JsonLd code={jsonLd} />
      <div className="w-full py-20 lg:py-40">
        <div className="container mx-auto flex flex-col gap-14">
          <div className="flex w-full flex-col gap-8 sm:flex-row sm:items-center sm:justify-between">
            <h4 className="max-w-xl font-regular text-3xl tracking-tighter md:text-5xl">
              Latest articles
            </h4>
          </div>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
            <Feed queries={[blog.postsQuery]} draft={draft.isEnabled}>
              {async ([data]) => {
                'use server';

                if (!data.blog.posts.items.length) {
                  return null;
                }

                return data.blog.posts.items.map((post, index) => (
                  <Link
                    href={`/blog/${post._slug}`}
                    className={cn(
                      'flex cursor-pointer flex-col gap-4 hover:opacity-75',
                      !index && 'md:col-span-2'
                    )}
                    key={post._slug}
                  >
                    <Image
                      src={post.image.url}
                      alt={post.image.alt ?? ''}
                      width={post.image.width}
                      height={post.image.height}
                    />
                    <div className="flex flex-row items-center gap-4">
                      <p className="text-muted-foreground text-sm">
                        {new Date(post.date).toLocaleDateString('en-US', {
                          month: 'long',
                          day: 'numeric',
                          year: 'numeric',
                        })}
                      </p>
                    </div>
                    <div className="flex flex-col gap-2">
                      <h3 className="max-w-3xl text-4xl tracking-tight">
                        {post._title}
                      </h3>
                      <p className="max-w-3xl text-base text-muted-foreground">
                        {post.description}
                      </p>
                    </div>
                  </Link>
                ));
              }}
            </Feed>
          </div>
        </div>
      </div>
    </>
  );
};

export default BlogIndex;

================
File: apps/web/app/components/header/index.tsx
================
'use client';

import { env } from '@/env';
import { ModeToggle } from '@repo/design-system/components/mode-toggle';
import { Button } from '@repo/design-system/components/ui/button';
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from '@repo/design-system/components/ui/navigation-menu';
import { Menu, MoveRight, X } from 'lucide-react';
import Link from 'next/link';
import { useState } from 'react';

import Image from 'next/image';
import Logo from './logo.svg';

export const Header = () => {
  const navigationItems = [
    {
      title: 'Home',
      href: '/',
      description: '',
    },
    {
      title: 'Product',
      description: 'Managing a small business today is already tough.',
      items: [
        {
          title: 'Pricing',
          href: '/pricing',
        },
        {
          title: 'Pricing',
          href: '/pricing',
        },
        {
          title: 'Pricing',
          href: '/pricing',
        },
        {
          title: 'Pricing',
          href: '/pricing',
        },
      ],
    },
    {
      title: 'Blog',
      href: '/blog',
      description: '',
    },
  ];

  if (env.NEXT_PUBLIC_DOCS_URL) {
    navigationItems.push({
      title: 'Docs',
      href: env.NEXT_PUBLIC_DOCS_URL,
      description: '',
    });
  }

  const [isOpen, setOpen] = useState(false);
  return (
    <header className="sticky top-0 left-0 z-40 w-full border-b bg-background">
      <div className="container relative mx-auto flex min-h-20 flex-row items-center gap-4 lg:grid lg:grid-cols-3">
        <div className="hidden flex-row items-center justify-start gap-4 lg:flex">
          <NavigationMenu className="flex items-start justify-start">
            <NavigationMenuList className="flex flex-row justify-start gap-4">
              {navigationItems.map((item) => (
                <NavigationMenuItem key={item.title}>
                  {item.href ? (
                    <>
                      <NavigationMenuLink asChild>
                        <Button variant="ghost" asChild>
                          <Link href={item.href}>{item.title}</Link>
                        </Button>
                      </NavigationMenuLink>
                    </>
                  ) : (
                    <>
                      <NavigationMenuTrigger className="font-medium text-sm">
                        {item.title}
                      </NavigationMenuTrigger>
                      <NavigationMenuContent className="!w-[450px] p-4">
                        <div className="flex grid-cols-2 flex-col gap-4 lg:grid">
                          <div className="flex h-full flex-col justify-between">
                            <div className="flex flex-col">
                              <p className="text-base">{item.title}</p>
                              <p className="text-muted-foreground text-sm">
                                {item.description}
                              </p>
                            </div>
                            <Button size="sm" className="mt-10" asChild>
                              <Link href="/contact">Book a call today</Link>
                            </Button>
                          </div>
                          <div className="flex h-full flex-col justify-end text-sm">
                            {item.items?.map((subItem, idx) => (
                              <NavigationMenuLink
                                href={subItem.href}
                                key={idx}
                                className="flex flex-row items-center justify-between rounded px-4 py-2 hover:bg-muted"
                              >
                                <span>{subItem.title}</span>
                                <MoveRight className="h-4 w-4 text-muted-foreground" />
                              </NavigationMenuLink>
                            ))}
                          </div>
                        </div>
                      </NavigationMenuContent>
                    </>
                  )}
                </NavigationMenuItem>
              ))}
            </NavigationMenuList>
          </NavigationMenu>
        </div>
        <div className="flex items-center gap-2 lg:justify-center">
          <Image
            src={Logo}
            alt="Logo"
            width={24}
            height={24}
            className="dark:invert"
          />
          <p className="whitespace-nowrap font-semibold">next-forge</p>
        </div>
        <div className="flex w-full justify-end gap-4">
          <Button variant="ghost" className="hidden md:inline" asChild>
            <Link href="/contact">Contact us</Link>
          </Button>
          <div className="hidden border-r md:inline" />
          <div className="hidden md:inline">
            <ModeToggle />
          </div>
          <Button variant="outline" asChild className="hidden md:inline">
            <Link href={`${env.NEXT_PUBLIC_APP_URL}/sign-in`}>Sign in</Link>
          </Button>
          <Button asChild>
            <Link href={`${env.NEXT_PUBLIC_APP_URL}/sign-up`}>Get started</Link>
          </Button>
        </div>
        <div className="flex w-12 shrink items-end justify-end lg:hidden">
          <Button variant="ghost" onClick={() => setOpen(!isOpen)}>
            {isOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
          </Button>
          {isOpen && (
            <div className="container absolute top-20 right-0 flex w-full flex-col gap-8 border-t bg-background py-4 shadow-lg">
              {navigationItems.map((item) => (
                <div key={item.title}>
                  <div className="flex flex-col gap-2">
                    {item.href ? (
                      <Link
                        href={item.href}
                        className="flex items-center justify-between"
                        target={
                          item.href.startsWith('http') ? '_blank' : undefined
                        }
                        rel={
                          item.href.startsWith('http')
                            ? 'noopener noreferrer'
                            : undefined
                        }
                      >
                        <span className="text-lg">{item.title}</span>
                        <MoveRight className="h-4 w-4 stroke-1 text-muted-foreground" />
                      </Link>
                    ) : (
                      <p className="text-lg">{item.title}</p>
                    )}
                    {item.items?.map((subItem) => (
                      <Link
                        key={subItem.title}
                        href={subItem.href}
                        className="flex items-center justify-between"
                      >
                        <span className="text-muted-foreground">
                          {subItem.title}
                        </span>
                        <MoveRight className="h-4 w-4 stroke-1" />
                      </Link>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

================
File: apps/web/app/components/header/logo.svg
================
<svg fill="none" height="96" viewBox="0 0 96 96" width="96" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><clipPath id="a"><path d="m0 0h96v96h-96z"/></clipPath><g clip-path="url(#a)"><path clip-rule="evenodd" d="m48 0h-48l48 48h-48l48 48h48l-48-48h48z" fill="#000" fill-rule="evenodd"/></g></svg>

================
File: apps/web/app/components/footer.tsx
================
import { env } from '@/env';
import type { LegalPostMeta } from '@repo/cms';
import { Status } from '@repo/observability/status';
import Link from 'next/link';

export const Footer = ({
  legalPostsMeta,
}: { legalPostsMeta: LegalPostMeta[] }) => {
  const navigationItems = [
    {
      title: 'Home',
      href: '/',
      description: '',
    },
    {
      title: 'Pages',
      description: 'Managing a small business today is already tough.',
      items: [
        {
          title: 'Blog',
          href: '/blog',
        },
      ],
    },
    {
      title: 'Legal',
      description: 'We stay on top of the latest legal requirements.',
      items: legalPostsMeta.map((post) => {
        return {
          title: post._title,
          href: `/legal/${post._slug}`,
        };
      }),
    },
  ];

  if (env.NEXT_PUBLIC_DOCS_URL) {
    navigationItems.at(1)?.items?.push({
      title: 'Docs',
      href: env.NEXT_PUBLIC_DOCS_URL,
    });
  }

  return (
    <section className="dark border-foreground/10 border-t">
      <div className="w-full bg-background py-20 text-foreground lg:py-40">
        <div className="container mx-auto">
          <div className="grid items-center gap-10 lg:grid-cols-2">
            <div className="flex flex-col items-start gap-8">
              <div className="flex flex-col gap-2">
                <h2 className="max-w-xl text-left font-regular text-3xl tracking-tighter md:text-5xl">
                  next-forge
                </h2>
                <p className="max-w-lg text-left text-foreground/75 text-lg leading-relaxed tracking-tight">
                  This is the start of something new.
                </p>
              </div>
              <Status />
            </div>
            <div className="grid items-start gap-10 lg:grid-cols-3">
              {navigationItems.map((item) => (
                <div
                  key={item.title}
                  className="flex flex-col items-start gap-1 text-base"
                >
                  <div className="flex flex-col gap-2">
                    {item.href ? (
                      <Link
                        href={item.href}
                        className="flex items-center justify-between"
                        target={
                          item.href.includes('http') ? '_blank' : undefined
                        }
                        rel={
                          item.href.includes('http')
                            ? 'noopener noreferrer'
                            : undefined
                        }
                      >
                        <span className="text-xl">{item.title}</span>
                      </Link>
                    ) : (
                      <p className="text-xl">{item.title}</p>
                    )}
                    {item.items?.map((subItem) => (
                      <Link
                        key={subItem.title}
                        href={subItem.href}
                        className="flex items-center justify-between"
                        target={
                          subItem.href.includes('http') ? '_blank' : undefined
                        }
                        rel={
                          subItem.href.includes('http')
                            ? 'noopener noreferrer'
                            : undefined
                        }
                      >
                        <span className="text-foreground/75">
                          {subItem.title}
                        </span>
                      </Link>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

================
File: apps/web/app/contact/actions/contact.tsx
================
'use server';

import { env } from '@/env';
import { resend } from '@repo/email';
import { ContactTemplate } from '@repo/email/templates/contact';
import { parseError } from '@repo/observability/error';
import { createRateLimiter, slidingWindow } from '@repo/rate-limit';
import { headers } from 'next/headers';

export const contact = async (
  name: string,
  email: string,
  message: string
): Promise<{
  error?: string;
}> => {
  try {
    if (env.UPSTASH_REDIS_REST_URL && env.UPSTASH_REDIS_REST_TOKEN) {
      const rateLimiter = createRateLimiter({
        limiter: slidingWindow(1, '1d'),
      });
      const head = await headers();
      const ip = head.get('x-forwarded-for');

      const { success } = await rateLimiter.limit(`contact_form_${ip}`);

      if (!success) {
        throw new Error(
          'You have reached your request limit. Please try again later.'
        );
      }
    }

    await resend.emails.send({
      from: env.RESEND_FROM,
      to: env.RESEND_FROM,
      subject: 'Contact form submission',
      replyTo: email,
      react: <ContactTemplate name={name} email={email} message={message} />,
    });

    return {};
  } catch (error) {
    const errorMessage = parseError(error);

    return { error: errorMessage };
  }
};

================
File: apps/web/app/contact/components/contact-form.tsx
================
'use client';

import { Button } from '@repo/design-system/components/ui/button';
import { Calendar } from '@repo/design-system/components/ui/calendar';
import { Input } from '@repo/design-system/components/ui/input';
import { Label } from '@repo/design-system/components/ui/label';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@repo/design-system/components/ui/popover';
import { cn } from '@repo/design-system/lib/utils';
import { format } from 'date-fns';
import { CalendarIcon, Check, MoveRight } from 'lucide-react';
import { useState } from 'react';

export const ContactForm = () => {
  const [date, setDate] = useState<Date | undefined>(new Date());

  return (
    <div className="w-full py-20 lg:py-40">
      <div className="container mx-auto max-w-6xl">
        <div className="grid gap-10 lg:grid-cols-2">
          <div className="flex flex-col gap-6">
            <div className="flex flex-col gap-4">
              <div className="flex flex-col gap-2">
                <h4 className="max-w-xl text-left font-regular text-3xl tracking-tighter md:text-5xl">
                  Something new
                </h4>
                <p className="max-w-sm text-left text-lg text-muted-foreground leading-relaxed tracking-tight">
                  Managing a small business today is already tough. Avoid
                  further complications by ditching outdated, tedious trade
                  methods.
                </p>
              </div>
            </div>
            <div className="flex flex-row items-start gap-6 text-left">
              <Check className="mt-2 h-4 w-4 text-primary" />
              <div className="flex flex-col gap-1">
                <p>Easy to use</p>
                <p className="text-muted-foreground text-sm">
                  We&apos;ve made it easy to use and understand.
                </p>
              </div>
            </div>
            <div className="flex flex-row items-start gap-6 text-left">
              <Check className="mt-2 h-4 w-4 text-primary" />
              <div className="flex flex-col gap-1">
                <p>Fast and reliable</p>
                <p className="text-muted-foreground text-sm">
                  We&apos;ve made it easy to use and understand.
                </p>
              </div>
            </div>
            <div className="flex flex-row items-start gap-6 text-left">
              <Check className="mt-2 h-4 w-4 text-primary" />
              <div className="flex flex-col gap-1">
                <p>Beautiful and modern</p>
                <p className="text-muted-foreground text-sm">
                  We&apos;ve made it easy to use and understand.
                </p>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-center">
            <div className="flex max-w-sm flex-col gap-4 rounded-md border p-8">
              <p>Book a meeting</p>
              <div className="grid w-full max-w-sm items-center gap-1">
                <Label htmlFor="picture">Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        'w-full max-w-sm justify-start text-left font-normal',
                        !date && 'text-muted-foreground'
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date ? format(date, 'PPP') : <span>Pick a date</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={date}
                      onSelect={setDate}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="grid w-full max-w-sm items-center gap-1">
                <Label htmlFor="firstname">First name</Label>
                <Input id="firstname" type="text" />
              </div>
              <div className="grid w-full max-w-sm items-center gap-1">
                <Label htmlFor="lastname">Last name</Label>
                <Input id="lastname" type="text" />
              </div>
              <div className="grid w-full max-w-sm items-center gap-1">
                <Label htmlFor="picture">Upload resume</Label>
                <Input id="picture" type="file" />
              </div>

              <Button className="w-full gap-4">
                Book the meeting <MoveRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

================
File: apps/web/app/contact/page.tsx
================
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import { ContactForm } from './components/contact-form';

const title = 'Contact';
const description =
  "Let us know what's on your mind. We'll get back to you as soon as possible.";

export const metadata: Metadata = createMetadata({
  title,
  description,
});

const Contact = () => <ContactForm />;

export default Contact;

================
File: apps/web/app/legal/[slug]/page.tsx
================
import { Sidebar } from '@/components/sidebar';
import { ArrowLeftIcon } from '@radix-ui/react-icons';
import { legal } from '@repo/cms';
import { Body } from '@repo/cms/components/body';
import { Feed } from '@repo/cms/components/feed';
import { TableOfContents } from '@repo/cms/components/toc';
import { createMetadata } from '@repo/seo/metadata';
import type { Metadata } from 'next';
import { draftMode } from 'next/headers';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import Balancer from 'react-wrap-balancer';

type LegalPageProperties = {
  readonly params: Promise<{
    slug: string;
  }>;
};

export const generateMetadata = async ({
  params,
}: LegalPageProperties): Promise<Metadata> => {
  const { slug } = await params;
  const post = await legal.getPost(slug);

  if (!post) {
    return {};
  }

  return createMetadata({
    title: post._title,
    description: post.description,
  });
};

export const generateStaticParams = async (): Promise<{ slug: string }[]> => {
  const posts = await legal.getPosts();

  return posts.map(({ _slug }) => ({ slug: _slug }));
};

const LegalPage = async ({ params }: LegalPageProperties) => {
  const { slug } = await params;
  const draft = await draftMode();

  return (
    <Feed queries={[legal.postQuery(slug)]} draft={draft.isEnabled}>
      {/* biome-ignore lint/suspicious/useAwait: "Server Actions must be async" */}
      {async ([data]) => {
        'use server';

        const page = data.legalPages.item;

        if (!page) {
          notFound();
        }

        return (
          <div className="container max-w-5xl py-16">
            <Link
              className="mb-4 inline-flex items-center gap-1 text-muted-foreground text-sm focus:underline focus:outline-none"
              href="/"
            >
              <ArrowLeftIcon className="h-4 w-4" />
              Back to Home
            </Link>
            <h1 className="scroll-m-20 font-extrabold text-4xl tracking-tight lg:text-5xl">
              <Balancer>{page._title}</Balancer>
            </h1>
            <p className="leading-7 [&:not(:first-child)]:mt-6">
              <Balancer>{page.description}</Balancer>
            </p>
            <div className="mt-16 flex flex-col items-start gap-8 sm:flex-row">
              <div className="sm:flex-1">
                <div className="prose prose-neutral dark:prose-invert">
                  <Body content={page.body.json.content} />
                </div>
              </div>
              <div className="sticky top-24 hidden shrink-0 md:block">
                <Sidebar
                  toc={<TableOfContents data={page.body.json.toc} />}
                  readingTime={`${page.body.readingTime} min read`}
                  date={new Date()}
                />
              </div>
            </div>
          </div>
        );
      }}
    </Feed>
  );
};

export default LegalPage;

================
File: apps/web/app/legal/layout.tsx
================
import { Toolbar } from '@repo/cms/components/toolbar';
import type { ReactNode } from 'react';

type LegalLayoutProps = {
  children: ReactNode;
};

const LegalLayout = ({ children }: LegalLayoutProps) => (
  <>
    {children}
    <Toolbar />
  </>
);

export default LegalLayout;

================
File: apps/web/app/pricing/page.tsx
================
import { env } from '@/env';
import { Button } from '@repo/design-system/components/ui/button';
import { Check, Minus, MoveRight, PhoneCall } from 'lucide-react';
import Link from 'next/link';

const Pricing = () => (
  <div className="w-full py-20 lg:py-40">
    <div className="container mx-auto">
      <div className="flex flex-col items-center justify-center gap-4 text-center">
        <div className="flex flex-col gap-2">
          <h2 className="max-w-xl text-center font-regular text-3xl tracking-tighter md:text-5xl">
            Prices that make sense!
          </h2>
          <p className="max-w-xl text-center text-lg text-muted-foreground leading-relaxed tracking-tight">
            Managing a small business today is already tough.
          </p>
        </div>
        <div className="grid w-full grid-cols-3 divide-x pt-20 text-left lg:grid-cols-4">
          <div className="col-span-3 lg:col-span-1" />
          <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
            <p className="text-2xl">Startup</p>
            <p className="text-muted-foreground text-sm">
              Our goal is to streamline SMB trade, making it easier and faster
              than ever for everyone and everywhere.
            </p>
            <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
              <span className="text-4xl">$40</span>
              <span className="text-muted-foreground text-sm"> / month</span>
            </p>
            <Button variant="outline" className="mt-8 gap-4" asChild>
              <Link href={env.NEXT_PUBLIC_APP_URL}>
                Try it <MoveRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
          <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
            <p className="text-2xl">Growth</p>
            <p className="text-muted-foreground text-sm">
              Our goal is to streamline SMB trade, making it easier and faster
              than ever for everyone and everywhere.
            </p>
            <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
              <span className="text-4xl">$40</span>
              <span className="text-muted-foreground text-sm"> / month</span>
            </p>
            <Button className="mt-8 gap-4" asChild>
              <Link href={env.NEXT_PUBLIC_APP_URL}>
                Try it <MoveRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
          <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
            <p className="text-2xl">Enterprise</p>
            <p className="text-muted-foreground text-sm">
              Our goal is to streamline SMB trade, making it easier and faster
              than ever for everyone and everywhere.
            </p>
            <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
              <span className="text-4xl">$40</span>
              <span className="text-muted-foreground text-sm"> / month</span>
            </p>
            <Button variant="outline" className="mt-8 gap-4" asChild>
              <Link href="/contact">
                Contact us <PhoneCall className="h-4 w-4" />
              </Link>
            </Button>
          </div>
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            <b>Features</b>
          </div>
          <div />
          <div />
          <div />
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">SSO</div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            AI Assistant
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Minus className="h-4 w-4 text-muted-foreground" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            Version Control
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Minus className="h-4 w-4 text-muted-foreground" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            Members
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <p className="text-muted-foreground text-sm">5 members</p>
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <p className="text-muted-foreground text-sm">25 members</p>
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <p className="text-muted-foreground text-sm">100+ members</p>
          </div>
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            Multiplayer Mode
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Minus className="h-4 w-4 text-muted-foreground" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          {/* New Line */}
          <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
            Orchestration
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Minus className="h-4 w-4 text-muted-foreground" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
          <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
            <Check className="h-4 w-4 text-primary" />
          </div>
        </div>
      </div>
    </div>
  </div>
);

export default Pricing;

================
File: apps/web/app/styles/web.css
================
.shiki {
  background-color: var(--shiki-light-bg);
  color: var(--shiki-light);
  @apply border-border;
}

.shiki span {
  color: var(--shiki-light);
}

.dark .shiki {
  background-color: var(--shiki-dark-bg);
  color: var(--shiki-dark);
}

.dark .shiki span {
  color: var(--shiki-dark);
}

.shiki code {
  display: grid;
  font-size: 13px;
  counter-reset: line;
}

.shiki .line:before {
  content: counter(line);
  counter-increment: line;

  @apply inline-block w-4 mr-8 text-muted-foreground text-right;
}

.shiki[title]:before {
  content: attr(title);
  @apply inline-block text-muted-foreground text-right mb-6 text-sm;
}

================
File: apps/web/app/global-error.tsx
================
'use client';

import { Button } from '@repo/design-system/components/ui/button';
import { fonts } from '@repo/design-system/lib/fonts';
import { captureException } from '@sentry/nextjs';
import type NextError from 'next/error';
import { useEffect } from 'react';

type GlobalErrorProperties = {
  readonly error: NextError & { digest?: string };
  readonly reset: () => void;
};

const GlobalError = ({ error, reset }: GlobalErrorProperties) => {
  useEffect(() => {
    captureException(error);
  }, [error]);

  return (
    <html lang="en" className={fonts}>
      <body>
        <h1>Oops, something went wrong</h1>
        <Button onClick={() => reset()}>Try again</Button>
      </body>
    </html>
  );
};

export default GlobalError;

================
File: apps/web/app/layout.tsx
================
import '@repo/design-system/styles/globals.css';
import './styles/web.css';
import { legal } from '@repo/cms';
import { Feed } from '@repo/cms/components/feed';
import { DesignSystemProvider } from '@repo/design-system';
import { fonts } from '@repo/design-system/lib/fonts';
import { cn } from '@repo/design-system/lib/utils';
import { Toolbar } from '@repo/feature-flags/components/toolbar';
import type { ReactNode } from 'react';
import { Footer } from './components/footer';
import { Header } from './components/header';
import { Toolbar as CMSToolbar } from '@repo/cms/components/toolbar';

type RootLayoutProperties = {
  readonly children: ReactNode;
};

const RootLayout = ({ children }: RootLayoutProperties) => (
  <html
    lang="en"
    className={cn(fonts, 'scroll-smooth')}
    suppressHydrationWarning
  >
    <body>
      <DesignSystemProvider>
        <Header />
        {children}
        <Feed queries={[legal.postsQuery]}>
          {/* biome-ignore lint/suspicious/useAwait: "Server Actions must be async" */}
          {async ([data]) => {
            'use server';
            return <Footer legalPostsMeta={data.legalPages.items} />;
          }}
        </Feed>
      </DesignSystemProvider>
      <Toolbar />
      <CMSToolbar />
    </body>
  </html>
);

export default RootLayout;

================
File: apps/web/app/robots.ts
================
import { env } from '@/env';
import type { MetadataRoute } from 'next';

const protocol = env.VERCEL_PROJECT_PRODUCTION_URL?.startsWith('https')
  ? 'https'
  : 'http';
const url = new URL(`${protocol}://${env.VERCEL_PROJECT_PRODUCTION_URL}`);

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
    },
    sitemap: new URL('/sitemap.xml', url.href).href,
  };
}

================
File: apps/web/app/sitemap.ts
================
import fs from 'node:fs';
import { env } from '@/env';
import { blog, legal } from '@repo/cms';
import type { MetadataRoute } from 'next';

const appFolders = fs.readdirSync('app', { withFileTypes: true });
const pages = appFolders
  .filter((file) => file.isDirectory())
  .filter((folder) => !folder.name.startsWith('_'))
  .filter((folder) => !folder.name.startsWith('('))
  .map((folder) => folder.name);
const blogs = (await blog.getPosts()).map((post) => post._slug);
const legals = (await legal.getPosts()).map((post) => post._slug);
const protocol = env.VERCEL_PROJECT_PRODUCTION_URL?.startsWith('https')
  ? 'https'
  : 'http';
const url = new URL(`${protocol}://${env.VERCEL_PROJECT_PRODUCTION_URL}`);

const sitemap = async (): Promise<MetadataRoute.Sitemap> => [
  {
    url: new URL('/', url).href,
    lastModified: new Date(),
  },
  ...pages.map((page) => ({
    url: new URL(page, url).href,
    lastModified: new Date(),
  })),
  ...blogs.map((blog) => ({
    url: new URL(`blog/${blog}`, url).href,
    lastModified: new Date(),
  })),
  ...legals.map((legal) => ({
    url: new URL(`legal/${legal}`, url).href,
    lastModified: new Date(),
  })),
];

export default sitemap;

================
File: apps/web/components/sidebar.tsx
================
import { capitalize } from '@repo/design-system/lib/utils';
import type { ReactNode } from 'react';

type SidebarProperties = {
  readonly date: Date;
  readonly readingTime: string;
  readonly tags?: string[];
  readonly toc?: ReactNode;
};

export const Sidebar = async ({
  date,
  readingTime,
  tags,
  toc: Toc,
}: SidebarProperties) => (
  <div className="col-span-4 flex w-72 flex-col items-start gap-8 border-foreground/10 border-l px-6 lg:col-span-2">
    <div className="grid gap-2">
      <p className="text-muted-foreground text-sm">Published</p>
      <p className="rounded-sm text-foreground text-sm">
        {new Intl.DateTimeFormat('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric',
          timeZone: 'America/New_York',
        }).format(date)}
      </p>
    </div>
    <div className="grid gap-2">
      <p className="text-muted-foreground text-sm">Reading Time</p>
      <p className="rounded-sm text-foreground text-sm">{readingTime}</p>
    </div>
    {tags && (
      <div className="grid gap-2">
        <p className="text-muted-foreground text-sm">Tags</p>
        <p className="rounded-sm text-foreground text-sm">
          {tags.map(capitalize).join(', ')}
        </p>
      </div>
    )}
    {Toc ? (
      <div className="-mx-2">
        <div className="grid gap-2 p-2">
          <p className="text-muted-foreground text-sm">Sections</p>
          {Toc}
        </div>
      </div>
    ) : undefined}
  </div>
);

================
File: apps/web/.env.example
================
# Server
CLERK_SECRET_KEY=""
CLERK_WEBHOOK_SECRET=""
RESEND_FROM=""
DATABASE_URL=""
RESEND_TOKEN=""
STRIPE_SECRET_KEY=""
STRIPE_WEBHOOK_SECRET=""
BETTERSTACK_API_KEY=""
BETTERSTACK_URL=""
FLAGS_SECRET=""
ARCJET_KEY=""
SVIX_TOKEN=""
LIVEBLOCKS_SECRET=""
BASEHUB_TOKEN=""
VERCEL_PROJECT_PRODUCTION_URL="http://localhost:3001"
KNOCK_API_KEY=""
KNOCK_FEED_CHANNEL_ID=""

# Client
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=""
NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in"
NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up"
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL="/"
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL="/"
NEXT_PUBLIC_GA_MEASUREMENT_ID=""
NEXT_PUBLIC_POSTHOG_KEY=""
NEXT_PUBLIC_POSTHOG_HOST=""
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NEXT_PUBLIC_WEB_URL="http://localhost:3001"
NEXT_PUBLIC_API_URL="http://localhost:3002"
NEXT_PUBLIC_DOCS_URL="http://localhost:3004"

================
File: apps/web/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# prisma
.env

# react.email
.react-email

# Sentry
.sentryclirc

================
File: apps/web/env.ts
================
import { keys as cms } from '@repo/cms/keys';
import { keys as email } from '@repo/email/keys';
import { keys as flags } from '@repo/feature-flags/keys';
import { keys as core } from '@repo/next-config/keys';
import { keys as observability } from '@repo/observability/keys';
import { keys as rateLimit } from '@repo/rate-limit/keys';
import { keys as security } from '@repo/security/keys';
import { createEnv } from '@t3-oss/env-nextjs';

export const env = createEnv({
  extends: [
    cms(),
    core(),
    email(),
    observability(),
    flags(),
    security(),
    rateLimit(),
  ],
  server: {},
  client: {},
  runtimeEnv: {},
});

================
File: apps/web/instrumentation.ts
================
import { initializeSentry } from '@repo/observability/instrumentation';

export const register = initializeSentry();

================
File: apps/web/middleware.ts
================
// // apps/web/middleware.ts
// import { env } from '@/env';
// import { authMiddleware } from '@repo/auth/middleware';
// import { parseError } from '@repo/observability/error';
// import { secure } from '@repo/security';
// import {
//   noseconeMiddleware,
//   noseconeOptions,
//   noseconeOptionsWithToolbar,
// } from '@repo/security/middleware';
// import { NextResponse } from 'next/server';

// export const config = {
//   // matcher tells Next.js which routes to run the middleware on. This runs the
//   // middleware on all routes except for static assets and Posthog ingest
//   matcher: ['/((?!_next/static|_next/image|ingest|favicon.ico).*)'],
// };

// const securityHeaders = env.FLAGS_SECRET
//   ? noseconeMiddleware(noseconeOptionsWithToolbar)
//   : noseconeMiddleware(noseconeOptions);

// export default authMiddleware(async (_auth, request) => {
//   if (!env.ARCJET_KEY) {
//     return securityHeaders();
//   }

//   try {
//     await secure(
//       [
//         // See https://docs.arcjet.com/bot-protection/identifying-bots
//         'CATEGORY:SEARCH_ENGINE', // Allow search engines
//         'CATEGORY:PREVIEW', // Allow preview links to show OG images
//         'CATEGORY:MONITOR', // Allow uptime monitoring services
//       ],
//       request
//     );

//     return securityHeaders();
//   } catch (error) {
//     const message = parseError(error);

//     return NextResponse.json({ error: message }, { status: 403 });
//   }
// });

// apps/web/middleware.ts
import { env } from '@/env';
import { parseError } from '@repo/observability/error';
import { secure } from '@repo/security';
import {
  noseconeMiddleware,
  noseconeOptions,
  noseconeOptionsWithToolbar,
} from '@repo/security/middleware';
import { NextResponse } from 'next/server';

export const config = {
  // This matcher runs the middleware on all routes except for static assets and Posthog ingest
  matcher: ['/((?!_next/static|_next/image|ingest|favicon.ico).*)'],
};

const securityHeaders = env.FLAGS_SECRET
  ? noseconeMiddleware(noseconeOptionsWithToolbar)
  : noseconeMiddleware(noseconeOptions);

// Export the middleware without wrapping it in authMiddleware.
export default async (request: Request) => {
  if (!env.ARCJET_KEY) {
    return securityHeaders();
  }

  try {
    await secure(
      [
        'CATEGORY:SEARCH_ENGINE', // Allow search engines
        'CATEGORY:PREVIEW',       // Allow preview links to show OG images
        'CATEGORY:MONITOR',       // Allow uptime monitoring services
      ],
      request
    );

    return securityHeaders();
  } catch (error) {
    const message = parseError(error);
    return NextResponse.json({ error: message }, { status: 403 });
  }
};

================
File: apps/web/next.config.ts
================
import { env } from '@/env';
import { withCMS } from '@repo/cms/next-config';
import { withToolbar } from '@repo/feature-flags/lib/toolbar';
import { config, withAnalyzer } from '@repo/next-config';
import { withLogtail, withSentry } from '@repo/observability/next-config';
import type { NextConfig } from 'next';

let nextConfig: NextConfig = withToolbar(withLogtail({ ...config }));

nextConfig.images?.remotePatterns?.push({
  protocol: 'https',
  hostname: 'assets.basehub.com',
});

if (process.env.NODE_ENV === 'production') {
  const redirects: NextConfig['redirects'] = async () => [
    {
      source: '/legal',
      destination: '/legal/privacy',
      statusCode: 301,
    },
  ];

  nextConfig.redirects = redirects;
}

if (env.VERCEL) {
  nextConfig = withSentry(nextConfig);
}

if (env.ANALYZE === 'true') {
  nextConfig = withAnalyzer(nextConfig);
}

export default withCMS(nextConfig);

================
File: apps/web/package.json
================
{
  "name": "web",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3001 --turbopack",
    "build": "next build",
    "start": "next start",
    "analyze": "ANALYZE=true pnpm build",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@arcjet/next": "1.0.0-beta.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@repo/cms": "workspace:*",
    "@repo/design-system": "workspace:*",
    "@repo/email": "workspace:*",
    "@repo/feature-flags": "workspace:*",
    "@repo/next-config": "workspace:*",
    "@repo/observability": "workspace:*",
    "@repo/rate-limit": "workspace:*",
    "@repo/security": "workspace:*",
    "@repo/seo": "workspace:*",
    "@repo/tailwind-config": "workspace:*",
    "@sentry/nextjs": "^8.50.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "date-fns": "^4.1.0",
    "fumadocs-core": "^14.7.7",
    "import-in-the-middle": "^1.12.0",
    "lucide-react": "^0.473.0",
    "mdx-bundler": "^10.0.3",
    "next": "15.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-wrap-balancer": "^1.1.1",
    "require-in-the-middle": "^7.4.0",
    "sharp": "^0.33.5",
    "shiki": "^2.0.3",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "19.0.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}

================
File: apps/web/postcss.config.mjs
================
export { default } from '@repo/design-system/postcss.config.mjs';

================
File: apps/web/tailwind.config.ts
================
export { config as default } from '@repo/tailwind-config/config';

================
File: apps/web/tsconfig.json
================
{
  "extends": [
    "@repo/typescript-config/nextjs.json",
    "@repo/cms/typescript-config.json"
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "next.config.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ]
}

================
File: apps/web/vercel.json
================
{
  "crons": []
}

================
File: packages/ai/components/message.tsx
================
import type { Message as MessageType } from 'ai';
import type { ComponentProps } from 'react';
import Markdown from 'react-markdown';
import { twMerge } from 'tailwind-merge';

type MessageProps = {
  data: MessageType;
  markdown?: ComponentProps<typeof Markdown>;
};

export const Message = ({ data, markdown }: MessageProps) => (
  <div
    className={twMerge(
      'flex max-w-[80%] flex-col gap-2 rounded-xl px-4 py-2',
      data.role === 'user'
        ? 'self-end bg-foreground text-background'
        : 'self-start bg-muted'
    )}
  >
    <Markdown {...markdown}>{data.content}</Markdown>
  </div>
);

================
File: packages/ai/components/thread.tsx
================
import type { HTMLAttributes } from 'react';
import { twMerge } from 'tailwind-merge';

type ThreadProps = HTMLAttributes<HTMLDivElement>;

export const Thread = ({ children, className, ...props }: ThreadProps) => (
  <div
    className={twMerge(
      'flex flex-1 flex-col items-start gap-4 overflow-y-auto p-8 pb-0',
      className
    )}
    {...props}
  >
    {children}
  </div>
);

================
File: packages/ai/lib/models.ts
================
import { createOpenAI } from '@ai-sdk/openai';
import { keys } from '../keys';

const openai = createOpenAI({
  apiKey: keys().OPENAI_API_KEY,
  compatibility: 'strict',
});

export const models = {
  chat: openai('gpt-4o-mini'),
  embeddings: openai('text-embedding-3-small'),
};

================
File: packages/ai/lib/react.ts
================
export * from 'ai/react';

================
File: packages/ai/index.ts
================
export * from 'ai';

================
File: packages/ai/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      OPENAI_API_KEY: z.string().min(1).startsWith('sk-').optional(),
    },
    runtimeEnv: {
      OPENAI_API_KEY: process.env.OPENAI_API_KEY,
    },
  });

================
File: packages/ai/package.json
================
{
  "name": "@repo/ai",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "ai": "^4.1.0",
    "react": "^19.0.0",
    "react-markdown": "^9.0.3",
    "tailwind-merge": "^2.6.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/ai/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/analytics/posthog/client.tsx
================
'use client';

import posthogRaw, { type PostHog } from 'posthog-js';
import { PostHogProvider as PostHogProviderRaw } from 'posthog-js/react';
import type { ReactNode } from 'react';
import { keys } from '../keys';

export const analytics = posthogRaw.init(keys().NEXT_PUBLIC_POSTHOG_KEY, {
  api_host: '/ingest',
  ui_host: keys().NEXT_PUBLIC_POSTHOG_HOST,
  person_profiles: 'identified_only',
  capture_pageview: false, // Disable automatic pageview capture, as we capture manually
  capture_pageleave: true, // Overrides the `capture_pageview` setting
}) as PostHog;

type PostHogProviderProps = {
  readonly children: ReactNode;
};

export const PostHogProvider = (
  properties: Omit<PostHogProviderProps, 'client'>
) => <PostHogProviderRaw client={analytics} {...properties} />;

================
File: packages/analytics/posthog/server.ts
================
import 'server-only';
import { PostHog } from 'posthog-node';
import { keys } from '../keys';

export const analytics = new PostHog(keys().NEXT_PUBLIC_POSTHOG_KEY, {
  host: keys().NEXT_PUBLIC_POSTHOG_HOST,

  // Don't batch events and flush immediately - we're running in a serverless environment
  flushAt: 1,
  flushInterval: 0,
});

================
File: packages/analytics/google.ts
================
export { GoogleAnalytics } from '@next/third-parties/google';

================
File: packages/analytics/index.tsx
================
import type { ReactNode } from 'react';
import { GoogleAnalytics } from './google';
import { keys } from './keys';
import { PostHogProvider } from './posthog/client';
import { VercelAnalytics } from './vercel';

type AnalyticsProviderProps = {
  readonly children: ReactNode;
};

const { NEXT_PUBLIC_GA_MEASUREMENT_ID } = keys();

export const AnalyticsProvider = ({ children }: AnalyticsProviderProps) => (
  <PostHogProvider>
    {children}
    <VercelAnalytics />
    {NEXT_PUBLIC_GA_MEASUREMENT_ID && (
      <GoogleAnalytics gaId={NEXT_PUBLIC_GA_MEASUREMENT_ID} />
    )}
  </PostHogProvider>
);

================
File: packages/analytics/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    client: {
      NEXT_PUBLIC_POSTHOG_KEY: z.string().min(1).startsWith('phc_'),
      NEXT_PUBLIC_POSTHOG_HOST: z.string().min(1).url(),
      NEXT_PUBLIC_GA_MEASUREMENT_ID: z
        .string()
        .min(1)
        .startsWith('G-')
        .optional(),
    },
    runtimeEnv: {
      NEXT_PUBLIC_POSTHOG_KEY: process.env.NEXT_PUBLIC_POSTHOG_KEY,
      NEXT_PUBLIC_POSTHOG_HOST: process.env.NEXT_PUBLIC_POSTHOG_HOST,
      NEXT_PUBLIC_GA_MEASUREMENT_ID: process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID,
    },
  });

================
File: packages/analytics/package.json
================
{
  "name": "@repo/analytics",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@next/third-parties": "^15.1.5",
    "@t3-oss/env-nextjs": "^0.11.1",
    "@vercel/analytics": "^1.4.1",
    "posthog-js": "^1.207.2",
    "posthog-node": "^4.4.1",
    "react": "^19.0.0",
    "server-only": "^0.0.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/analytics/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/analytics/vercel.ts
================
export { Analytics as VercelAnalytics } from '@vercel/analytics/react';

================
File: packages/auth/components/sign-in.tsx
================
// packages/auth/components/sign-in.tsx
import { SignIn as ClerkSignIn } from '@clerk/nextjs';

export const SignIn = () => (
  <ClerkSignIn
    appearance={{
      elements: {
        header: 'hidden',
      },
    }}
  />
);

================
File: packages/auth/components/sign-up.tsx
================
import { SignUp as ClerkSignUp } from '@clerk/nextjs';

export const SignUp = () => (
  <ClerkSignUp
    appearance={{
      elements: {
        header: 'hidden',
      },
    }}
  />
);

================
File: packages/auth/client.ts
================
export * from '@clerk/nextjs';

================
File: packages/auth/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      CLERK_SECRET_KEY: z.string().min(1).startsWith('sk_'),
      CLERK_WEBHOOK_SECRET: z.string().min(1).startsWith('whsec_').optional(),
    },
    client: {
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1).startsWith('pk_'),
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: z.string().min(1).startsWith('/'),
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: z.string().min(1).startsWith('/'),
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: z.string().min(1).startsWith('/'),
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: z.string().min(1).startsWith('/'),
    },
    runtimeEnv: {
      CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,
      CLERK_WEBHOOK_SECRET: process.env.CLERK_WEBHOOK_SECRET,
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:
        process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL,
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL,
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL:
        process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL,
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL:
        process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL,
    },
  });

================
File: packages/auth/middleware.ts
================
// packages/auth/middleware.ts
// This file is a wrapper around the Clerk middleware.
// It is used to handle authentication and authorization for the application.
// It is used in the apps/app/middleware.ts file to handle authentication and authorization for the application.

export { clerkMiddleware as authMiddleware } from '@clerk/nextjs/server';

================
File: packages/auth/package.json
================
{
  "name": "@repo/auth",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.9.15",
    "@clerk/themes": "^2.2.9",
    "@repo/tailwind-config": "workspace:*",
    "@t3-oss/env-nextjs": "^0.11.1",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "server-only": "^0.0.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@clerk/types": "^4.41.2",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3",
    "typescript": "^5.7.3"
  }
}

================
File: packages/auth/provider.tsx
================
// packages/auth/provider
'use client';

import { ClerkProvider } from '@clerk/nextjs';
import { dark } from '@clerk/themes';
import type { Theme } from '@clerk/types';
import { tailwind } from '@repo/tailwind-config';
import { useTheme } from 'next-themes';
import type { ComponentProps } from 'react';

export const AuthProvider = (
  properties: ComponentProps<typeof ClerkProvider>
) => {
  const { resolvedTheme } = useTheme();
  const isDark = resolvedTheme === 'dark';
  const baseTheme = isDark ? dark : undefined;
  const variables: Theme['variables'] = {
    // Core
    fontFamily: tailwind.theme.fontFamily.sans.join(', '),
    fontFamilyButtons: tailwind.theme.fontFamily.sans.join(', '),
    fontSize: tailwind.theme.fontSize.sm[0],
    fontWeight: {
      bold: tailwind.theme.fontWeight.bold,
      normal: tailwind.theme.fontWeight.normal,
      medium: tailwind.theme.fontWeight.medium,
    },
    spacingUnit: tailwind.theme.spacing[4],
  };

  const elements: Theme['elements'] = {
    dividerLine: 'bg-border',
    socialButtonsIconButton: 'bg-card',
    navbarButton: 'text-foreground',
    organizationSwitcherTrigger__open: 'bg-background',
    organizationPreviewMainIdentifier: 'text-foreground',
    organizationSwitcherTriggerIcon: 'text-muted-foreground',
    organizationPreview__organizationSwitcherTrigger: 'gap-2',
    organizationPreviewAvatarContainer: 'shrink-0',
  };

  return (
    <ClerkProvider
      {...properties}
      appearance={{ baseTheme, variables, elements }}
    />
  );
};

================
File: packages/auth/server.ts
================
// packages/auth/server.ts
import 'server-only';

export * from '@clerk/nextjs/server';

================
File: packages/auth/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/cms/components/body.tsx
================
export { RichText as Body } from 'basehub/react-rich-text';

================
File: packages/cms/components/code-block.tsx
================
export { CodeBlock } from 'basehub/react-code-block';

================
File: packages/cms/components/feed.tsx
================
export { Pump as Feed } from 'basehub/react-pump';

================
File: packages/cms/components/image.tsx
================
export { BaseHubImage as Image } from 'basehub/next-image';

================
File: packages/cms/components/toc.tsx
================
import { RichText } from 'basehub/react-rich-text';
import type { ComponentProps } from 'react';

type TableOfContentsProperties = Omit<
  ComponentProps<typeof RichText>,
  'children'
> & {
  readonly data: ComponentProps<typeof RichText>['children'];
};

export const TableOfContents = ({
  data,
  ...props
}: TableOfContentsProperties) => (
  <div>
    <RichText
      // @ts-expect-error "idk"
      components={{
        ol: ({ children }) => (
          <ol className="flex list-none flex-col gap-2 text-sm">{children}</ol>
        ),
        ul: ({ children }) => (
          <ul className="flex list-none flex-col gap-2 text-sm">{children}</ul>
        ),
        li: ({ children }) => <li className="pl-3">{children}</li>,
        a: ({ children, href }) => (
          <a
            className="line-clamp-3 flex rounded-sm text-foreground text-sm underline decoration-foreground/0 transition-colors hover:decoration-foreground/50"
            href={`#${href?.split('#').at(1)}`}
          >
            {children}
          </a>
        ),
      }}
      {...props}
    >
      {data}
    </RichText>
  </div>
);

================
File: packages/cms/components/toolbar.tsx
================
export { Toolbar } from 'basehub/next-toolbar';

================
File: packages/cms/.env.example
================
BASEHUB_TOKEN=""

================
File: packages/cms/index.ts
================
import { basehub as basehubClient, fragmentOn } from 'basehub';
import { keys } from './keys';

const basehub = basehubClient({
  token: keys().BASEHUB_TOKEN,
});

/* -------------------------------------------------------------------------------------------------
 * Common Fragments
 * -----------------------------------------------------------------------------------------------*/

const imageFragment = fragmentOn('BlockImage', {
  url: true,
  width: true,
  height: true,
  alt: true,
  blurDataURL: true,
});

/* -------------------------------------------------------------------------------------------------
 * Blog Fragments & Queries
 * -----------------------------------------------------------------------------------------------*/

const postMetaFragment = fragmentOn('PostsItem', {
  _slug: true,
  _title: true,
  authors: {
    _title: true,
    avatar: imageFragment,
    xUrl: true,
  },
  categories: {
    _title: true,
  },
  date: true,
  description: true,
  image: imageFragment,
});

const postFragment = fragmentOn('PostsItem', {
  ...postMetaFragment,
  body: {
    plainText: true,
    json: {
      content: true,
      toc: true,
    },
    readingTime: true,
  },
});

export type PostMeta = fragmentOn.infer<typeof postMetaFragment>;
export type Post = fragmentOn.infer<typeof postFragment>;

export const blog = {
  postsQuery: fragmentOn('Query', {
    blog: {
      posts: {
        items: postMetaFragment,
      },
    },
  }),

  latestPostQuery: fragmentOn('Query', {
    blog: {
      posts: {
        __args: {
          orderBy: '_sys_createdAt__DESC',
        },
        item: postFragment,
      },
    },
  }),

  postQuery: (slug: string) => ({
    blog: {
      posts: {
        __args: {
          filter: {
            _sys_slug: { eq: slug },
          },
        },
        item: postFragment,
      },
    },
  }),

  getPosts: async (): Promise<PostMeta[]> => {
    const data = await basehub.query(blog.postsQuery);

    return data.blog.posts.items;
  },

  getLatestPost: async () => {
    const data = await basehub.query(blog.latestPostQuery);

    return data.blog.posts.item;
  },

  getPost: async (slug: string) => {
    const query = blog.postQuery(slug);
    const data = await basehub.query(query);

    return data.blog.posts.item;
  },
};

/* -------------------------------------------------------------------------------------------------
 * Legal Fragments & Queries
 * -----------------------------------------------------------------------------------------------*/

const legalPostMetaFragment = fragmentOn('LegalPagesItem', {
  _slug: true,
  _title: true,
  description: true,
});

const legalPostFragment = fragmentOn('LegalPagesItem', {
  ...legalPostMetaFragment,
  body: {
    plainText: true,
    json: {
      content: true,
      toc: true,
    },
    readingTime: true,
  },
});

export type LegalPostMeta = fragmentOn.infer<typeof legalPostMetaFragment>;
export type LegalPost = fragmentOn.infer<typeof legalPostFragment>;

export const legal = {
  postsQuery: fragmentOn('Query', {
    legalPages: {
      items: legalPostFragment,
    },
  }),

  latestPostQuery: fragmentOn('Query', {
    legalPages: {
      __args: {
        orderBy: '_sys_createdAt__DESC',
      },
      item: legalPostFragment,
    },
  }),

  postQuery: (slug: string) =>
    fragmentOn('Query', {
      legalPages: {
        __args: {
          filter: {
            _sys_slug: { eq: slug },
          },
        },
        item: legalPostFragment,
      },
    }),

  getPosts: async (): Promise<LegalPost[]> => {
    const data = await basehub.query(legal.postsQuery);

    return data.legalPages.items;
  },

  getLatestPost: async () => {
    const data = await basehub.query(legal.latestPostQuery);

    return data.legalPages.item;
  },

  getPost: async (slug: string) => {
    const query = legal.postQuery(slug);
    const data = await basehub.query(query);

    return data.legalPages.item;
  },
};

================
File: packages/cms/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      BASEHUB_TOKEN: z.string().min(1).startsWith('bshb_pk_'),
    },
    runtimeEnv: {
      BASEHUB_TOKEN: process.env.BASEHUB_TOKEN,
    },
  });

================
File: packages/cms/next-config.ts
================
import type { NextConfig } from 'next';

// This file is a stub for modifying the Next.js configuration.
// It's handy for supplementing the default CMS configuration.
export const withCMS = (config: NextConfig) => config;

================
File: packages/cms/package.json
================
{
  "name": "@repo/cms",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "basehub dev",
    "build": "basehub",
    "analyze": "basehub",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@t3-oss/env-nextjs": "^0.11.1",
    "basehub": "^8.1.1",
    "react": "^19.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3",
    "next": "15.1.6"
  }
}

================
File: packages/cms/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/cms/typescript-config.json
================
{}

================
File: packages/collaboration/auth.ts
================
import 'server-only';
import { Liveblocks as LiveblocksNode } from '@liveblocks/node';
import { keys } from './keys';

type AuthenticateOptions = {
  userId: string;
  orgId: string;
  userInfo: Liveblocks['UserMeta']['info'];
};

const secret = keys().LIVEBLOCKS_SECRET;

export const authenticate = async ({
  userId,
  orgId,
  userInfo,
}: AuthenticateOptions) => {
  if (!secret) {
    throw new Error('LIVEBLOCKS_SECRET is not set');
  }

  const liveblocks = new LiveblocksNode({ secret });

  // Start an auth session inside your endpoint
  const session = liveblocks.prepareSession(userId, { userInfo });

  // Use a naming pattern to allow access to rooms with wildcards
  // Giving the user write access on their organization
  session.allow(`${orgId}:*`, session.FULL_ACCESS);

  // Authorize the user and return the result
  const { status, body } = await session.authorize();

  return new Response(body, { status });
};

================
File: packages/collaboration/config.ts
================
// Define Liveblocks types for your application
// https://liveblocks.io/docs/api-reference/liveblocks-react#Typing-your-data
declare global {
  interface Liveblocks {
    // Each user's Presence, for useMyPresence, useOthers, etc.
    Presence: {
      // Example, real-time cursor coordinates
      cursor: { x: number; y: number } | null;
    };

    // The Storage tree for the room, for useMutation, useStorage, etc.
    Storage: {
      // Example, a conflict-free list
      // animals: LiveList<string>;
    };

    // Custom user info set when authenticating with a secret key
    UserMeta: {
      id: string;
      info: {
        name?: string;
        avatar?: string;
        color: string;
      };
    };

    // Custom events, for useBroadcastEvent, useEventListener
    RoomEvent: {};
    // Example has two events, using a union
    // | { type: "PLAY" }
    // | { type: "REACTION"; emoji: "🔥" };

    // Custom metadata set on threads, for useThreads, useCreateThread, etc.
    ThreadMetadata: {
      // Example, attaching coordinates to a thread
      // x: number;
      // y: number;
    };

    // Custom room info set with resolveRoomsInfo, for useRoomInfo
    RoomInfo: {
      // Example, rooms with a title and url
      // title: string;
      // url: string;
    };
  }
}

export {};

================
File: packages/collaboration/hooks.ts
================
export * from '@liveblocks/react/suspense';

================
File: packages/collaboration/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      LIVEBLOCKS_SECRET: z.string().min(1).startsWith('sk_').optional(),
    },
    runtimeEnv: {
      LIVEBLOCKS_SECRET: process.env.LIVEBLOCKS_SECRET,
    },
  });

================
File: packages/collaboration/package.json
================
{
  "name": "@repo/collaboration",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@t3-oss/env-nextjs": "^0.11.1",
    "@liveblocks/client": "^2.16.1",
    "@liveblocks/node": "^2.16.1",
    "@liveblocks/react": "^2.16.1",
    "react": "^19.0.0",
    "server-only": "^0.0.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/collaboration/room.tsx
================
'use client';

import type { ResolveMentionSuggestionsArgs } from '@liveblocks/client';
import type { ResolveUsersArgs } from '@liveblocks/node';
import {
  ClientSideSuspense,
  LiveblocksProvider,
  RoomProvider,
} from '@liveblocks/react/suspense';
import type { ComponentProps, ReactNode } from 'react';

type RoomProps = ComponentProps<typeof LiveblocksProvider> & {
  id: string;
  children: ReactNode;
  authEndpoint: string;
  fallback: ReactNode;
  resolveUsers?: (
    args: ResolveUsersArgs
  ) => Promise<Liveblocks['UserMeta']['info'][]>;
  resolveMentionSuggestions?: (
    args: ResolveMentionSuggestionsArgs
  ) => Promise<string[]>;
};

export const Room = ({
  id,
  children,
  authEndpoint,
  fallback,
  ...props
}: RoomProps) => (
  <LiveblocksProvider authEndpoint={authEndpoint} {...props}>
    <RoomProvider id={id} initialPresence={{ cursor: null }}>
      <ClientSideSuspense fallback={fallback}>{children}</ClientSideSuspense>
    </RoomProvider>
  </LiveblocksProvider>
);

================
File: packages/collaboration/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/database/__tests__/tenant-lookup.test.ts
================
import { getTenantConnectionUrl, clearTenantConnectionCache, clearAllTenantConnectionCaches } from '../src/tenant-app/queries/tenant-lookup';
import { db } from '../src/main-app/db'; // Assuming this is where your main db client is
import { afterEach, expect, it, describe, vi } from 'vitest';

// Mock the database client to control its behavior in tests
vi.mock('../../main-app/db', () => {
    const mockDb = {
        query: {
            organizations: {
                findFirst: vi.fn(),
            },
            projects: {
                findFirst: vi.fn(),
            },
        },
    };
    return { db: mockDb };
});

describe('getTenantConnectionUrl', () => {
    afterEach(() => {
        vi.clearAllMocks(); // Reset mocks after each test
        clearAllTenantConnectionCaches(); // Clear cache after each test
        });

    it('should return connection URL from cache on second call', async () => {
        const subdomain = 'test-tenant';
        const mockConnectionUrl = 'test-connection-url';

        // Mock database to return a connection URL for the first call
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });

        // First call - should fetch from DB and cache
        const url1 = await getTenantConnectionUrl(subdomain);
        expect(url1).toBe(mockConnectionUrl);
        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(1);
        expect(db.query.projects.findFirst).toHaveBeenCalledTimes(1);

        // Reset mock call counts
        vi.clearAllMocks();

        // Second call - should fetch from cache
        const url2 = await getTenantConnectionUrl(subdomain);
        expect(url2).toBe(mockConnectionUrl);
        // Database should NOT be called again
        expect(db.query.organizations.findFirst).not.toHaveBeenCalled();
        expect(db.query.projects.findFirst).not.toHaveBeenCalled();
    });

    it('should return connection URL if found in database and cache it', async () => {
        const subdomain = 'test-tenant';
        const mockConnectionUrl = 'test-connection-url';

        // Mock database to return organization and project
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBe(mockConnectionUrl);
        expect(db.query.organizations.findFirst).toHaveBeenCalledWith(expect.objectContaining({
            where: expect.any(Function), // You can be more specific if needed
            columns: { id: true }
        }));
        expect(db.query.projects.findFirst).toHaveBeenCalledWith(expect.objectContaining({
            where: expect.any(Function),
            columns: { connectionUrl: true }
        }));
    });

    it('should return null if organization is not found', async () => {
        const subdomain = 'non-existent-tenant';

        // Mock database to return no organization
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce(undefined);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(db.query.projects.findFirst).not.toHaveBeenCalled(); // Project query should not be called
    });

    it('should return null if project is not found', async () => {
        const subdomain = 'tenant-without-project';

        // Mock database to return organization but no project
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce(undefined);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(db.query.projects.findFirst).toHaveBeenCalled();
    });

    it('should return null and log error if database query fails', async () => {
        const subdomain = 'error-tenant';
        const mockError = new Error('Database error');
        const consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {}); // Spy on console.error

        // Mock database to throw an error
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockRejectedValueOnce(mockError);

        const url = await getTenantConnectionUrl(subdomain);
        expect(url).toBeNull();
        expect(db.query.organizations.findFirst).toHaveBeenCalled();
        expect(consoleErrorSpy).toHaveBeenCalledWith("Error looking up tenant connection URL:", mockError);

        consoleErrorSpy.mockRestore(); // Restore console.error
    });

    it('should clear cache for a specific subdomain', async () => {
        const subdomain = 'tenant-to-clear';
        const mockConnectionUrl = 'cached-connection-url';

        // Populate the cache
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl });
        await getTenantConnectionUrl(subdomain);

        // Clear cache for the subdomain
        clearTenantConnectionCache(subdomain);

        // Next call should be a cache miss and fetch from DB again
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-connection-url' }); // Different URL

        const urlAfterClear = await getTenantConnectionUrl(subdomain);
        expect(urlAfterClear).toBe('new-connection-url'); // Should get the new URL from DB
        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(1); // DB should be queried again
    });

    it('should clear all tenant connection caches', async () => {
        const subdomain1 = 'tenant-1';
        const subdomain2 = 'tenant-2';
        const mockConnectionUrl1 = 'cached-url-1';
        const mockConnectionUrl2 = 'cached-url-2';

        // Populate cache for two subdomains
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-1' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl1 });
        await getTenantConnectionUrl(subdomain1);
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-2' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: mockConnectionUrl2 });
        await getTenantConnectionUrl(subdomain2);


        // Clear all caches
        clearAllTenantConnectionCaches();

        // Next calls should be cache misses
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-1' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-url-1' });
        await getTenantConnectionUrl(subdomain1);
        vi.clearAllMocks();
        (db.query.organizations.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ id: 'org-id-2' });
        (db.query.projects.findFirst as ReturnType<typeof vi.fn>).mockResolvedValueOnce({ connectionUrl: 'new-url-2' });
        await getTenantConnectionUrl(subdomain2);


        expect(db.query.organizations.findFirst).toHaveBeenCalledTimes(2); // DB should be queried again for both
    });
});

================
File: packages/database/neon/src/client.ts
================
import { createApiClient } from '@neondatabase/api-client';
import { keys } from '../../keys';

const NEON_API_KEY = keys().NEON_API_KEY;

if (!NEON_API_KEY) {
  throw new Error('NEON_API_KEY is not set in environment variables');
}

export const neonApiClient = createApiClient({
  apiKey: NEON_API_KEY,
});

================
File: packages/database/src/main-app/.drizzle/meta/_journal.json
================
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1738866675550,
      "tag": "0000_easy_namora",
      "breakpoints": true
    }
  ]
}

================
File: packages/database/src/main-app/.drizzle/meta/0000_snapshot.json
================
{
  "id": "60bbc857-717c-471a-8b81-11f092b16794",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "clerk_id": {
          "name": "clerk_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "signup_status": {
          "name": "signup_status",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'awaiting_org'"
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "image_url": {
          "name": "image_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email_verified": {
          "name": "email_verified",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "welcome_email_sent": {
          "name": "welcome_email_sent",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'active'"
        },
        "last_sign_in": {
          "name": "last_sign_in",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_id_unique": {
          "name": "users_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "id"
          ]
        },
        "users_clerk_id_unique": {
          "name": "users_clerk_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "clerk_id"
          ]
        },
        "users_email_unique": {
          "name": "users_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.projects": {
      "name": "projects",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "project_id": {
          "name": "project_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "connection_url": {
          "name": "connection_url",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organizations": {
      "name": "organizations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "clerk_id": {
          "name": "clerk_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "logo_url": {
          "name": "logo_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'active'"
        },
        "has_project": {
          "name": "has_project",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "organizations_clerk_id_unique": {
          "name": "organizations_clerk_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "clerk_id"
          ]
        },
        "organizations_slug_unique": {
          "name": "organizations_slug_unique",
          "nullsNotDistinct": false,
          "columns": [
            "slug"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organization_members": {
      "name": "organization_members",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'member'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "organization_members_organization_id_organizations_id_fk": {
          "name": "organization_members_organization_id_organizations_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_members_user_id_users_id_fk": {
          "name": "organization_members_user_id_users_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}

================
File: packages/database/src/main-app/.drizzle/0000_easy_namora.sql
================
CREATE TABLE "users" (
	"id" uuid PRIMARY KEY NOT NULL,
	"clerk_id" text NOT NULL,
	"signup_status" text DEFAULT 'awaiting_org',
	"email" text NOT NULL,
	"first_name" text,
	"last_name" text,
	"image_url" text,
	"email_verified" boolean DEFAULT false,
	"welcome_email_sent" boolean DEFAULT false,
	"status" text DEFAULT 'active',
	"last_sign_in" timestamp with time zone,
	"is_active" boolean DEFAULT true,
	"metadata" jsonb,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now(),
	CONSTRAINT "users_id_unique" UNIQUE("id"),
	CONSTRAINT "users_clerk_id_unique" UNIQUE("clerk_id"),
	CONSTRAINT "users_email_unique" UNIQUE("email")
);
--> statement-breakpoint
CREATE TABLE "projects" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"project_id" varchar NOT NULL,
	"organization_id" uuid NOT NULL,
	"connection_url" varchar,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "organizations" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"clerk_id" text,
	"name" text,
	"slug" text,
	"logo_url" text,
	"status" text DEFAULT 'active',
	"has_project" boolean DEFAULT false NOT NULL,
	"metadata" jsonb,
	"created_at" timestamp with time zone DEFAULT now(),
	"created_by" uuid,
	"updated_at" timestamp with time zone DEFAULT now(),
	CONSTRAINT "organizations_clerk_id_unique" UNIQUE("clerk_id"),
	CONSTRAINT "organizations_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
CREATE TABLE "organization_members" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"organization_id" uuid,
	"user_id" uuid,
	"role" text DEFAULT 'member',
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now()
);
--> statement-breakpoint
ALTER TABLE "organization_members" ADD CONSTRAINT "organization_members_organization_id_organizations_id_fk" FOREIGN KEY ("organization_id") REFERENCES "public"."organizations"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "organization_members" ADD CONSTRAINT "organization_members_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;

================
File: packages/database/src/main-app/hooks/index.ts
================
export * from './use-users';

================
File: packages/database/src/main-app/hooks/use-users.ts
================
'use client';

import { useQuery } from '@tanstack/react-query';
import { findUserById, getAllUsers } from '../queries/users-queries';
import type { User } from '../schema/users-schema';

export const useUser = (userId: string) => {
  return useQuery<User | undefined>({
    queryKey: ['user', userId],
    queryFn: () => findUserById(userId),
  });
};

export const useUsers = () => {
  return useQuery({
    queryKey: ['users'],
    queryFn: () => getAllUsers(),
  });
};

================
File: packages/database/src/main-app/queries/index.ts
================
export * from './users-queries';
// export * from './organizations-queries';

================
File: packages/database/src/main-app/queries/organization-queries.ts
================
// packages/database/src/main-app/queries/organization-queries.ts

import { db } from '../db';
import { eq } from 'drizzle-orm';
import { organizationMembers, organizations } from '../schema';
import { currentUser } from '@repo/auth/server';

interface DefaultOrganization {
    id: string;
    subdomainSlug: string;
}
export async function fetchDefaultOrganizationForUser(userId: string): Promise<DefaultOrganization | null> {
  try {
        // Find the organization this user is a member of
        const result = await db.query.organizationMembers.findFirst({
            where: eq(organizationMembers.userId, userId),
            with: {
                organization: {
                    columns: {
                        id: true,
                        subdomainSlug: true, //VERY IMPORTANT, use the name you set in the db
                        name: true
                    }
                }
            }
        });

        if (!result?.organization?.subdomainSlug) {
            return null;
        }

        return {
            id: result.organization.id,
            subdomainSlug: result.organization.subdomainSlug,
        };
    } catch (error) {
        console.error('Error fetching organization for user:', error);
        return null;
    }
}

/**
 * Checks if a user is a member of a specific organization
 */
export async function isUserOrganizationMember(userId: string, organizationId: string): Promise<boolean> {
    try {
        const membership = await db.query.organizationMembers.findFirst({
            where: (organizationMembers, { and, eq }) => and(
                eq(organizationMembers.userId, userId),
                eq(organizationMembers.organizationId, organizationId)
            ),
            columns: { id: true }
        });

        return !!membership;
    } catch (error) {
        console.error('Error checking organization membership:', error);
        return false;
    }
}

================
File: packages/database/src/main-app/queries/organizations.ts
================
import { eq } from "drizzle-orm";
import { db } from "../db";
import { organizationMembers } from "../schema/organizations-members-schema";

export const findUserOrganization = async (userId: string) => {
  return db.query.organizationMembers.findFirst({
    where: eq(organizationMembers.userId, userId),
    with: {
      organization: true
    }
  });
};

================
File: packages/database/src/main-app/queries/projects.ts
================
import { db } from "../db";
import { projects } from "../schema";
import { eq } from "drizzle-orm";


export const getProjectConnection = async (orgId: string) => {
  return db.query.projects.findFirst({
    where: eq(projects.organizationId, orgId),
    columns: { connectionUrl: true }
  });
};

================
File: packages/database/src/main-app/queries/users-queries.ts
================
import { db } from '../db';
import { users } from '../schema/users-schema';
import { eq } from 'drizzle-orm';

export const findUserById = async (userId: string) => {
  return db.query.users.findFirst({
    where: eq(users.id, userId),
  });
};

export const findUserByClerkId = async (clerkId: string) => {
  return db.query.users.findFirst({
    where: eq(users.clerkId, clerkId),
    with: {
      organizations: {
        with: {
          organization: {
            with: {
              projects: {
                columns: {
                  connectionUrl: true
                }
              }
            }
          }
        }
      }
    }
  });
};

// Add the missing function that pool.ts needs
export const findUserWithOrg = async (userId: string) => {
  return db.query.users.findFirst({
    where: eq(users.id, userId),
    with: {
      organizations: {
        with: {
          organization: true
        }
      }
    }
  });
};

export const getAllUsers = () => db.select().from(users);

export const findUserWithConnectionByClerkId = async (clerkId: string) => {
  return db.query.users.findFirst({
    where: eq(users.clerkId, clerkId),
    with: {
      organizations: {
        with: {
          organization: {
            with: {
              projects: {
                columns: {
                  connectionUrl: true
                }
              }
            }
          }
        }
      }
    }
  });
};

================
File: packages/database/src/main-app/queries/users.ts
================
import { db } from '../db';
import { users } from '../schema/users-schema';
import { eq } from 'drizzle-orm';   

export const findUserWithOrg = async (userId: string) => {
  return db.query.users.findFirst({
    where: eq(users.id, userId),
    with: {
      organizations: {
        with: {
          organization: true
        }
      }
    }
  });
};

================
File: packages/database/src/main-app/schema/index.ts
================
export * from './users-schema';
export * from './projects-schema';
export * from './organizations-schema';
export * from './organizations-members-schema';

================
File: packages/database/src/main-app/schema/organizations-members-schema.ts
================
import { relations } from 'drizzle-orm';
import { pgTable, text, timestamp, uuid } from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { organizations } from './organizations-schema';
import { users } from './users-schema';
export const organizationMembers = pgTable('organization_members', {
  id: uuid('id').primaryKey().defaultRandom(),
  organizationId: uuid('organization_id').references(() => organizations.id),
  userId: uuid('user_id').references(() => users.id),
  role: text('role').default('member'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow(),
});

export const organizationMembersRelations = relations(
  organizationMembers,
  ({ one }) => ({
    organization: one(organizations, {
      fields: [organizationMembers.organizationId],
      references: [organizations.id],
    }),
    user: one(users, {
      fields: [organizationMembers.userId],
      references: [users.id],
    }),
  })
);

// Types
export type OrganizationMember = typeof organizationMembers.$inferSelect;
export type NewOrganizationMember = typeof organizationMembers.$inferInsert;

// Schemas
export const organizationMemberInsertSchema =
  createInsertSchema(organizationMembers);
export const organizationMemberSelectSchema =
  createSelectSchema(organizationMembers);

================
File: packages/database/src/main-app/schema/organizations-schema.ts
================
import { relations } from 'drizzle-orm';
import {
  boolean,
  jsonb,
  pgTable,
  text,
  timestamp,
  uuid,
} from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { organizationMembers } from './organizations-members-schema';
import { projects } from './projects-schema';

export const organizations = pgTable('organizations', {
  id: uuid('id').primaryKey().defaultRandom(),
  clerkId: text('clerk_id').unique(),
  name: text('name'),
  slug: text('slug').unique(),
  subdomainSlug: text('subdomain_slug').unique(),
  logoUrl: text('logo_url'),
  hasProject: boolean('has_project').default(false).notNull(),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),
  createdBy: uuid('created_by'),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow(),
});

export const organizationsRelations = relations(organizations, ({ many }) => ({
  members: many(organizationMembers),
  projects: many(projects),
}));

// Types
export type Organization = typeof organizations.$inferSelect;
export type NewOrganization = typeof organizations.$inferInsert;

export const organizationInsertSchema = createInsertSchema(organizations);
export const organizationSelectSchema = createSelectSchema(organizations);

================
File: packages/database/src/main-app/schema/projects-schema.ts
================
import { uuid, pgTable, timestamp, varchar } from "drizzle-orm/pg-core"
import { createInsertSchema, createSelectSchema } from "drizzle-zod";
import { organizations } from "./organizations-schema";
import { relations } from "drizzle-orm";

export const projects = pgTable('projects', {
  id: uuid('id').primaryKey().defaultRandom(),
  projectId: varchar('project_id').notNull(),
  organizationId: uuid('organization_id').notNull(),
  connectionUrl: varchar('connection_url'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow(),
});

export const projectsRelations = relations(projects, ({ one }) => ({
  organization: one(organizations, {
    fields: [projects.organizationId],
    references: [organizations.id],
  }),
}));

// Types
export type Project = typeof projects.$inferSelect;
export type NewProject = typeof projects.$inferInsert;

// Schemas
export const projectInsertSchema = createInsertSchema(projects);
export const projectSelectSchema = createSelectSchema(projects);

================
File: packages/database/src/main-app/schema/users-schema.ts
================
import { relations } from 'drizzle-orm';
import {
  boolean,
  jsonb,
  pgTable,
  text,
  timestamp,
  uuid,
} from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { organizationMembers } from './organizations-members-schema';

export const users = pgTable('users', {
  id: uuid('id').primaryKey().unique(),
  clerkId: text('clerk_id').unique().notNull(),
  signupStatus: text('signup_status').default('awaiting_org'),
  email: text('email').unique().notNull(),
  firstName: text('first_name'),
  lastName: text('last_name'),
  imageUrl: text('image_url'),
  emailVerified: boolean('email_verified').default(false),
  welcomeEmailSent: boolean('welcome_email_sent').default(false),
  status: text('status').default('active'),
  lastSignIn: timestamp('last_sign_in', { withTimezone: true }),
  isActive: boolean('is_active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow(),
});

export const usersRelations = relations(users, ({ many }) => ({
  organizations: many(organizationMembers),
}));

// Types
export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

export const userInsertSchema = createInsertSchema(users);
export const userSelectSchema = createSelectSchema(users);

================
File: packages/database/src/main-app/db.ts
================
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { keys } from '../../keys';
import * as schema from './schema';

const client = neon(keys().DATABASE_URL);

export const db = drizzle(client, { schema });

================
File: packages/database/src/main-app/drizzle.config.ts
================
import * as dotenv from 'dotenv';
import { defineConfig } from 'drizzle-kit';
import { keys } from '../../keys';

// Load .env file
dotenv.config({ path: '../../.env' });

const databaseUrl = keys().DATABASE_URL;
if (!databaseUrl) {
  throw new Error('DATABASE_URL environment variable is required');
}

export default defineConfig({
  schema: './schema/index.ts', // Updated path
  out: './.drizzle',
  dialect: 'postgresql',
  dbCredentials: {
    url: databaseUrl,
  },
});

================
File: packages/database/src/main-app/index.ts
================
export * from './db';
export * from './schema';

================
File: packages/database/src/tenant-app/__tests__/tenant-lookup.test.ts
================
import { getTenantConnectionUrl, clearTenantConnectionCache, clearAllTenantConnectionCaches } from '../queries/tenant-lookup';
import { db } from '../../main-app/db'; // Still mock the db client itself
import { vi, describe, afterEach, it, expect, beforeAll } from 'vitest';

// Mock the keys module
vi.mock('../../keys', () => {
    return {
        keys: vi.fn(() => ({ // Mock the keys function
            DATABASE_URL: 'test_db_url', // Provide dummy values
            NEON_API_KEY: 'test_neon_api_key',
        })),
    };
});


// Mock the database client (as before)
vi.mock('../../main-app/db', () => {
    const mockDb = {
        query: {
            organizations: {
                findFirst: vi.fn(),
            },
            projects: {
                findFirst: vi.fn(),
            },
        },
    };
    return { db: mockDb };
});

describe('getTenantConnectionUrl', () => {
    afterEach(() => {
        vi.clearAllMocks();
        clearAllTenantConnectionCaches();
    });

    // ... your test cases ...
    it('should return connection URL from cache on second call', async () => { /* ... */ });
    it('should return connection URL if found in database and cache it', async () => { /* ... */ });
    it('should return null if organization is not found', async () => { /* ... */ });
    it('should return null if project is not found', async () => { /* ... */ });
    it('should return null and log error if database query fails', async () => { /* ... */ });
    it('should clear cache for a specific subdomain', async () => { /* ... */ });
    it('should clear all tenant connection caches', async () => { /* ... */ });
});

describe('getTenantConnectionUrl Integration Tests', () => {
    const testSlug = 'mg';

    // Clear cache before tests
    beforeAll(() => {
        clearTenantConnectionCache(testSlug);
    });

    it('should find connection URL for existing tenant "mg"', async () => {
        const connectionUrl = await getTenantConnectionUrl(testSlug);
        
        // We expect a non-null result since 'mg' exists
        expect(connectionUrl).not.toBeNull();
        
        // Log the URL (for debugging, remove in production)
        console.log('Found connection URL:', connectionUrl);
        
        // Basic URL validation
        expect(typeof connectionUrl).toBe('string');
        expect(connectionUrl).toContain('postgres://');
    });

    it('should use cache on second call', async () => {
        // First call
        const firstCall = await getTenantConnectionUrl(testSlug);
        
        // Second call should be from cache
        const secondCall = await getTenantConnectionUrl(testSlug);
        
        // Both calls should return the same URL
        expect(secondCall).toBe(firstCall);
    });

    it('should return null for non-existent tenant', async () => {
        const nonExistentSlug = 'non-existent-tenant';
        const connectionUrl = await getTenantConnectionUrl(nonExistentSlug);
        
        expect(connectionUrl).toBeNull();
    });
});

================
File: packages/database/src/tenant-app/queries/tenant-lookup.ts
================
// packages/database/src/tenant-app/tenant-lookup.ts
import 'server-only';
import { db } from '../../main-app/db'; // Main application database client
import { redis } from '@repo/rate-limit'; // Import your Redis client (from rate-limit package)
import { and, eq } from 'drizzle-orm';
import { organizations } from '../../main-app/schema/organizations-schema';
import { projects } from '../../main-app/schema/projects-schema';

const CACHE_TTL_SECONDS = 60 * 60; // 1 hour cache TTL (adjust as needed)

/**
 * Retrieves the tenant database connection URL for a given subdomain.
 * Uses Redis caching to minimize database lookups.
 */
export async function getTenantConnectionUrl(subdomain: string): Promise<string | null> {
  const cacheKey = `tenant:connectionUrl:${subdomain}`;

  // 1. Try to get from Redis cache
  try {
      const cachedUrl = await redis.get<string>(cacheKey);
      if (cachedUrl) {
          console.log(`Cache HIT for subdomain: ${subdomain}`);
          return cachedUrl;
      }
  } catch (error) {
     console.error("Error with redis:", error);
     return null
  }
  console.log(`Cache MISS for subdomain: ${subdomain}`);

  // 2. If not in cache, query the main database
  try {
    const organization = await db.query.organizations.findFirst({
      where: eq(organizations.slug, subdomain), // Use the correct field name!
      columns: { id: true }, // Only select necessary columns
    });

    if (!organization) {
      return null; // Organization not found
    }

    const project = await db.query.projects.findFirst({
      where: eq(projects.organizationId, organization.id),
      columns: { connectionUrl: true },
    });

    const connectionUrl = project?.connectionUrl;

    // 3. Store in Redis cache (if found)
    if (connectionUrl) {
      await redis.set(cacheKey, connectionUrl, { ex: CACHE_TTL_SECONDS });
    }

    return connectionUrl ?? null;
  } catch (error) {
    console.error("Error looking up tenant connection URL:", error);
    return null;
  }
}

/**
 * Clears the connection URL cache for a specific tenant.
 */
export async function clearTenantConnectionCache(subdomain: string): Promise<void> {
  const cacheKey = `tenant:connectionUrl:${subdomain}`;
  await redis.del(cacheKey);
}

/**
 *  Clears all tenant connection URL caches
 */
export async function clearAllTenantConnectionCaches(): Promise<void> {
    const keys = await redis.keys('tenant:connectionUrl:*');
    if (keys.length > 0) {
      await redis.del(...keys);
    }
}

================
File: packages/database/src/tenant-app/schema/index.ts
================
export * from './users-schema';

================
File: packages/database/src/tenant-app/schema/users-schema.ts
================
import {
  boolean,
  jsonb,
  pgTable,
  text,
  timestamp,
  uuid,
} from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  userId: uuid('user_id').primaryKey().defaultRandom(),
  clerkId: text('clerk_id').unique().notNull(),
  signupStatus: text('signup_status').default('awaiting_org'),
  email: text('email').unique().notNull(),
  firstName: text('first_name'),
  lastName: text('last_name'),
  imageUrl: text('image_url'),
  emailVerified: boolean('email_verified').default(false),
  welcomeEmailSent: boolean('welcome_email_sent').default(false),
  status: text('status').default('active'),
  lastSignIn: timestamp('last_sign_in', { withTimezone: true }),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow(),
});

// Types
export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

================
File: packages/database/src/tenant-app/utils/tenant-db.ts
================
import type { DrizzleClient } from '../tenant-connection-db';
import { isTenantRequest } from '../types';
import type { TenantRequest } from '../types';

// We need to extend the Request type to include our dbClient
declare global {
    namespace NodeJS {
        interface ProcessEnv {
            DATABASE_URL: string;
        }
    }
}

/**
 * Gets the tenant database client from the request context.
 * This should only be called in route handlers or middleware where the tenant middleware has been applied.
 */
export function getTenantDbClient(request: Request): DrizzleClient {
    if (!isTenantRequest(request)) {
        throw new Error(
            "Tenant database client not initialized. Make sure you're accessing this from a tenant subdomain and the tenant middleware has been applied."
        );
    }
    
    if (!request.dbClient) {
        throw new Error("Tenant database client is not available in the request context.");
    }

    return request.dbClient;
}

/**
 * Helper function to check if we're in a tenant context
 */
export function hasTenantContext(request: Request): boolean {
    return isTenantRequest(request) && !!request.dbClient;
}

================
File: packages/database/src/tenant-app/drizzle.config.ts
================
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  schema: './schema/index.ts',
  out: './.drizzle',
  dialect: 'postgresql',
});

================
File: packages/database/src/tenant-app/provider.tsx
================
// 'use client';

// import { createContext, useContext } from 'react';

// type TenantContextType = {
//   organizationId: string | null; // Allow null for now
//   projectId: string | null;      // Allow null for now
//   // Other tenant-specific info
// }

// const TenantContext = createContext<TenantContextType | null>(null);

// function useTenantInfo(): TenantContextType {
//   // In a real app, this would fetch tenant info, e.g., from an API
//   // For now, return placeholder values
//   return {
//     organizationId: 'PLACEHOLDER_ORG_ID',
//     projectId: 'PLACEHOLDER_PROJECT_ID',
//   };
// }

// export function TenantProvider({ children }) {
//   // Get tenant info from session/api
//   const tenantInfo = useTenantInfo();

//   return (
//     <TenantContext.Provider value={tenantInfo}>
//       {children}
//     </TenantContext.Provider>
//   );
// }

// // Hook for components to access tenant info
// export function useTenant() {
//   const context = useContext(TenantContext);
//   if (!context) {
//     throw new Error('useTenant must be used within TenantProvider');
//   }
//   return context;
// }

================
File: packages/database/src/tenant-app/tenant-connection-db.ts
================
// packages/database/src/tenant-app/tenant-connection-db.ts
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from 'ws';

// Supply a WebSocket constructor if running in Node.js.
neonConfig.webSocketConstructor = ws;

/**
 * Creates and returns a tenant-specific Drizzle client using a Neon connection pool.
 * 
 * You can pass an optional schema to bind the client to your tenant tables.
 *
 * @param connectionUrl - The tenant's database connection URL.
 * @param schema - (Optional) The tenant schema.
 * @returns A configured Drizzle client.
 */
export function createTenantConnection(connectionUrl: string, schema?: unknown) {
  // Create a new pool using the provided connection URL.
  const pool = new Pool({ connectionString: connectionUrl });
  
  // If a schema is provided, pass it to drizzle. Sometimes the types for the schema
  // may not exactly line up; casting it as any can resolve this.
  if (schema) {
    return drizzle(pool, { schema: schema as any });
  }
  return drizzle(pool);
}

// Export the type of the drizzle client for type-safety elsewhere in your code.
export type DrizzleClient = ReturnType<typeof createTenantConnection>;

/** Note:
If you later wish to improve the type definitions for your schema (instead of casting to any), 
you can refine the types in your tenant schema module so that drizzle’s generic parameters work as expected.
*/

================
File: packages/database/src/tenant-app/types.ts
================
import type { DrizzleClient } from './tenant-connection-db';

declare global {
    namespace NodeJS {
        interface ProcessEnv {
            DATABASE_URL: string;
        }
    }
}

/**
 * Base interface for requests with tenant database client
 */
export interface TenantRequest extends Request {
    dbClient?: DrizzleClient;
}

/**
 * Type guard to check if a request has tenant context
 */
export function isTenantRequest(request: unknown): request is TenantRequest {
    return request !== null && 
           typeof request === 'object' && 
           'dbClient' in request;
}

================
File: packages/database/src/types/index.ts
================
export type { User } from '../main-app/schema/users-schema';
export type { Organization } from '../main-app/schema/organizations-schema'; 
export type { Project } from '../main-app/schema/projects-schema';
export type { OrganizationMember } from '../main-app/schema/organizations-members-schema';

================
File: packages/database/.gitignore
================
node_modules
# Keep environment variables out of version control
.env

================
File: packages/database/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      DATABASE_URL: z.string().min(1).url(),
      NEON_API_KEY: z.string().min(1),
    },
    runtimeEnv: {
      DATABASE_URL: process.env.DATABASE_URL,
      NEON_API_KEY: process.env.NEON_API_KEY,
    },
  });

================
File: packages/database/package.json
================
{
  "name": "@repo/database",
  "version": "0.0.0",
  "main": "./index.ts",
  "types": "./index.ts",
  "scripts": {
    "db-main-app:migrate": "cd src/main-app && npx drizzle-kit migrate",
    "db-main-app:generate": "cd src/main-app && npx drizzle-kit generate",
    "db:pull": "cd src/main-app && npx drizzle-kit pull",
    "db-tenant-app:generate": "cd src/tenant-app && npx drizzle-kit generate",
    "db-tenant-app:migrate": "cd packages/database/src/tenant-app && npx drizzle-kit migrate",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false",
    "test": "vitest"
  },
  "dependencies": {
    "@neondatabase/api-client": "^1.12.0",
    "@neondatabase/serverless": "^0.10.4",
    "@t3-oss/env-nextjs": "^0.12.0",
    "@tanstack/react-query": "^5.66.0",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.2",
    "drizzle-zod": "^0.7.0",
    "server-only": "^0.0.1",
    "undici": "^7.3.0",
    "ws": "^8.18.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.13.1",
    "@types/ws": "^8.5.14",
    "bufferutil": "^4.0.9",
    "drizzle-kit": "^0.30.4",
    "tsx": "^4.19.2",
    "typescript": "^5.7.3",
    "@repo/testing": "workspace:*",
    "@testing-library/dom": "^10.1.0",
    "@testing-library/react": "^14.2.1",
    "vitest": "^1.2.2"
  },
  "eslintConfig": {
    "root": true,
    "extends": [
      "@repo/eslint-config/base"
    ],
    "parserOptions": {
      "project": "./tsconfig.json"
    }
  }
}

================
File: packages/database/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/database/vitest.config.ts
================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    env: {
      DATABASE_URL: process.env.DATABASE_URL,
    },
  },
});

================
File: packages/design-system/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@repo/design-system/lib/utils"
import { ChevronDownIcon } from "@radix-ui/react-icons"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: packages/design-system/components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@repo/design-system/lib/utils"
import { buttonVariants } from "@repo/design-system/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: packages/design-system/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: packages/design-system/components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: packages/design-system/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@repo/design-system/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: packages/design-system/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: packages/design-system/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@repo/design-system/lib/utils"
import { ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRightIcon />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: packages/design-system/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: packages/design-system/components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { DayPicker } from "react-day-picker"

import { cn } from "@repo/design-system/lib/utils"
import { buttonVariants } from "@repo/design-system/components/ui/button"
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, children, ...props }) => (
          <ChevronLeftIcon className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, children, ...props }) => (
          <ChevronRightIcon className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: packages/design-system/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@repo/design-system/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: packages/design-system/components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { cn } from "@repo/design-system/lib/utils"
import { Button } from "@repo/design-system/components/ui/button"
import { ArrowLeftIcon, ArrowRightIcon } from "@radix-ui/react-icons"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeftIcon className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRightIcon className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: packages/design-system/components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@repo/design-system/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: packages/design-system/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { cn } from "@repo/design-system/lib/utils"
import { CheckIcon } from "@radix-ui/react-icons"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: packages/design-system/components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: packages/design-system/components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { cn } from "@repo/design-system/lib/utils"
import { Dialog, DialogContent } from "@repo/design-system/components/ui/dialog"
import { MagnifyingGlassIcon } from "@radix-ui/react-icons"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: packages/design-system/components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { cn } from "@repo/design-system/lib/utils"
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: packages/design-system/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { cn } from "@repo/design-system/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: packages/design-system/components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@repo/design-system/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: packages/design-system/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { cn } from "@repo/design-system/lib/utils"
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: packages/design-system/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@repo/design-system/lib/utils"
import { Label } from "@repo/design-system/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: packages/design-system/components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@repo/design-system/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: packages/design-system/components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { cn } from "@repo/design-system/lib/utils"
import { MinusIcon } from "@radix-ui/react-icons"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <MinusIcon />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: packages/design-system/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@repo/design-system/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: packages/design-system/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: packages/design-system/components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { cn } from "@repo/design-system/lib/utils"
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: packages/design-system/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { cn } from "@repo/design-system/lib/utils"
import { ChevronDownIcon } from "@radix-ui/react-icons"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: packages/design-system/components/ui/pagination.tsx
================
import * as React from "react"
import { cn } from "@repo/design-system/lib/utils"
import { ButtonProps, buttonVariants } from "@repo/design-system/components/ui/button"
import { ChevronLeftIcon, ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

================
File: packages/design-system/components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@repo/design-system/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: packages/design-system/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@repo/design-system/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: packages/design-system/components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { cn } from "@repo/design-system/lib/utils"
import { DotFilledIcon } from "@radix-ui/react-icons"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <DotFilledIcon className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: packages/design-system/components/ui/resizable.tsx
================
"use client"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@repo/design-system/lib/utils"
import { DragHandleDots2Icon } from "@radix-ui/react-icons"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: packages/design-system/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@repo/design-system/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: packages/design-system/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { cn } from "@repo/design-system/lib/utils"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDownIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: packages/design-system/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@repo/design-system/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: packages/design-system/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@repo/design-system/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: packages/design-system/components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { useIsMobile } from "@repo/design-system/hooks/use-mobile"
import { cn } from "@repo/design-system/lib/utils"
import { Button } from "@repo/design-system/components/ui/button"
import { Input } from "@repo/design-system/components/ui/input"
import { Separator } from "@repo/design-system/components/ui/separator"
import { Sheet, SheetContent, SheetTitle } from "@repo/design-system/components/ui/sheet"
import { Skeleton } from "@repo/design-system/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@repo/design-system/components/ui/tooltip"
import { ViewVerticalIcon } from "@radix-ui/react-icons"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetTitle className="sr-only" />
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <ViewVerticalIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: packages/design-system/components/ui/skeleton.tsx
================
import { cn } from "@repo/design-system/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: packages/design-system/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@repo/design-system/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: packages/design-system/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: packages/design-system/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@repo/design-system/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: packages/design-system/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@repo/design-system/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: packages/design-system/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@repo/design-system/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: packages/design-system/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@repo/design-system/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: packages/design-system/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@repo/design-system/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: packages/design-system/components/ui/toaster.tsx
================
"use client"

import { useToast } from "@repo/design-system/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@repo/design-system/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: packages/design-system/components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"
import { toggleVariants } from "@repo/design-system/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: packages/design-system/components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/design-system/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: packages/design-system/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@repo/design-system/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: packages/design-system/components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@repo/design-system/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: packages/design-system/components/mode-toggle.tsx
================
'use client';

import { MoonIcon, SunIcon } from '@radix-ui/react-icons';
import { useTheme } from 'next-themes';
import { Button } from '../components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '../components/ui/dropdown-menu';

const themes = [
  { label: 'Light', value: 'light' },
  { label: 'Dark', value: 'dark' },
  { label: 'System', value: 'system' },
];

export const ModeToggle = () => {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="shrink-0 text-foreground"
        >
          <SunIcon className="dark:-rotate-90 h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:scale-0" />
          <MoonIcon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        {themes.map(({ label, value }) => (
          <DropdownMenuItem key={value} onClick={() => setTheme(value)}>
            {label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

================
File: packages/design-system/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: packages/design-system/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@repo/design-system/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: packages/design-system/lib/fonts.ts
================
import { cn } from '@repo/design-system/lib/utils';
import { GeistMono } from 'geist/font/mono';
import { GeistSans } from 'geist/font/sans';

export const fonts = cn(
  GeistSans.variable,
  GeistMono.variable,
  'touch-manipulation font-sans antialiased'
);

================
File: packages/design-system/lib/utils.ts
================
import { parseError } from '@repo/observability/error';
import { clsx } from 'clsx';
import type { ClassValue } from 'clsx';
import { toast } from 'sonner';
import { twMerge } from 'tailwind-merge';

export const cn = (...inputs: ClassValue[]): string => twMerge(clsx(inputs));

export const capitalize = (str: string) =>
  str.charAt(0).toUpperCase() + str.slice(1);

export const handleError = (error: unknown): void => {
  const message = parseError(error);

  toast.error(message);
};

================
File: packages/design-system/providers/theme.tsx
================
import type { ThemeProviderProps } from 'next-themes';
import { ThemeProvider as NextThemeProvider } from 'next-themes';

export const ThemeProvider = ({
  children,
  ...properties
}: ThemeProviderProps) => (
  <NextThemeProvider
    attribute="class"
    defaultTheme="system"
    enableSystem
    disableTransitionOnChange
    {...properties}
  >
    {children}
  </NextThemeProvider>
);

================
File: packages/design-system/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;

    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --success: 142 76% 36%;
    --success-foreground: 0 0% 98%;

    --warning: 36 100% 50%;
    --warning-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;

    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;

    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;

    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;

    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --success: 142 76% 36%;
    --success-foreground: 0 0% 98%;

    --warning: 36 100% 50%;
    --warning-foreground: 0 0% 98%;

    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;

    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;

    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

/* This layer is added by shadcn/ui */
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* This layer is by next-forge */
@layer base {
  * {
    @apply min-w-0;
  }
  html {
    text-rendering: optimizelegibility;
  }
  body {
    @apply min-h-[100dvh];
  }
}

================
File: packages/design-system/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "../tailwind-config/config.ts",
    "css": "styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@repo/design-system/components",
    "utils": "@repo/design-system/lib/utils",
    "hooks": "@repo/design-system/hooks",
    "lib": "@repo/design-system/lib",
    "ui": "@repo/design-system/components/ui"
  }
}

================
File: packages/design-system/index.tsx
================
//packages/design-system/index.ts
import { AnalyticsProvider } from '@repo/analytics';
import { AuthProvider } from '@repo/auth/provider';
import type { ThemeProviderProps } from 'next-themes';
import { Toaster } from './components/ui/sonner';
import { TooltipProvider } from './components/ui/tooltip';
import { ThemeProvider } from './providers/theme';

type DesignSystemProviderProperties = ThemeProviderProps;

export const DesignSystemProvider = ({
  children,
  ...properties
}: DesignSystemProviderProperties) => (
  <ThemeProvider {...properties}>
    <AuthProvider>
      <AnalyticsProvider>
        <TooltipProvider>{children}</TooltipProvider>
        <Toaster />
      </AnalyticsProvider>
    </AuthProvider>
  </ThemeProvider>
);

================
File: packages/design-system/package.json
================
{
  "name": "@repo/design-system",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-hover-card": "^1.1.4",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@repo/analytics": "workspace:*",
    "@repo/auth": "workspace:*",
    "@repo/observability": "workspace:*",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.5.2",
    "geist": "^1.3.1",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.473.0",
    "next-themes": "^0.4.4",
    "react": "19.0.0",
    "react-day-picker": "^8.10.1",
    "react-hook-form": "^7.54.2",
    "react-moveable": "^0.56.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.0",
    "server-only": "^0.0.1",
    "sonner": "^1.7.2",
    "tailwind-merge": "^2.6.0",
    "vaul": "^1.1.2",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "^22.10.7",
    "@types/react": "^19.0.7",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}

================
File: packages/design-system/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

================
File: packages/design-system/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@repo/*": ["../*"],
      "@repo/design-system/*": ["./*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/email/templates/contact.tsx
================
import {
  Body,
  Container,
  Head,
  Hr,
  Html,
  Preview,
  Section,
  Tailwind,
  Text,
} from '@react-email/components';

type ContactTemplateProps = {
  readonly name: string;
  readonly email: string;
  readonly message: string;
};

export const ContactTemplate = ({
  name,
  email,
  message,
}: ContactTemplateProps) => (
  <Tailwind>
    <Html>
      <Head />
      <Preview>New email from {name}</Preview>
      <Body className="bg-zinc-50 font-sans">
        <Container className="mx-auto py-12">
          <Section className="mt-8 rounded-md bg-zinc-200 p-px">
            <Section className="rounded-[5px] bg-white p-8">
              <Text className="mt-0 mb-4 font-semibold text-2xl text-zinc-950">
                New email from {name}
              </Text>
              <Text className="m-0 text-zinc-500">
                {name} ({email}) has sent you a message:
              </Text>
              <Hr className="my-4" />
              <Text className="m-0 text-zinc-500">{message}</Text>
            </Section>
          </Section>
        </Container>
      </Body>
    </Html>
  </Tailwind>
);

const ExampleContactEmail = () => (
  <ContactTemplate
    name="Jane Smith"
    email="jane@example.com"
    message="Hello, how do I get started?"
  />
);

export default ExampleContactEmail;

================
File: packages/email/index.ts
================
import { Resend } from 'resend';
import { keys } from './keys';

export const resend = new Resend(keys().RESEND_TOKEN);

================
File: packages/email/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      RESEND_FROM: z.string().min(1).email(),
      RESEND_TOKEN: z.string().min(1).startsWith('re_'),
    },
    runtimeEnv: {
      RESEND_FROM: process.env.RESEND_FROM,
      RESEND_TOKEN: process.env.RESEND_TOKEN,
    },
  });

================
File: packages/email/package.json
================
{
  "name": "@repo/email",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@react-email/components": "0.0.32",
    "@t3-oss/env-nextjs": "^0.11.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "resend": "^4.1.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3",
    "typescript": "^5.7.3"
  }
}

================
File: packages/email/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["./*.ts", "./*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/feature-flags/components/toolbar.tsx
================
import { VercelToolbar } from '@vercel/toolbar/next';
import { keys } from '../keys';

export const Toolbar = () => (keys().FLAGS_SECRET ? <VercelToolbar /> : null);

================
File: packages/feature-flags/lib/create-flag.ts
================
import { analytics } from '@repo/analytics/posthog/server';
import { auth } from '@repo/auth/server';
import { flag } from '@vercel/flags/next';

export const createFlag = (key: string) =>
  flag({
    key,
    defaultValue: false,
    async decide() {
      const { userId } = await auth();

      if (!userId) {
        return this.defaultValue as boolean;
      }

      const isEnabled = await analytics.isFeatureEnabled(key, userId);

      return isEnabled ?? (this.defaultValue as boolean);
    },
  });

================
File: packages/feature-flags/lib/toolbar.ts
================
import { withVercelToolbar } from '@vercel/toolbar/plugins/next';
import { keys } from '../keys';

export const withToolbar = (config: object) =>
  keys().FLAGS_SECRET ? withVercelToolbar()(config) : config;

================
File: packages/feature-flags/access.ts
================
import { type ApiData, verifyAccess } from '@vercel/flags';
import { type NextRequest, NextResponse } from 'next/server';
import * as flags from './index';

export const getFlags = async (request: NextRequest) => {
  const access = await verifyAccess(request.headers.get('Authorization'));

  if (!access) {
    return NextResponse.json(null, { status: 401 });
  }

  const definitions = Object.fromEntries(
    Object.values(flags).map((flag) => [
      flag.key,
      {
        origin: flag.origin,
        description: flag.description,
        options: flag.options,
      },
    ])
  );

  return NextResponse.json<ApiData>({
    definitions,
  });
};

================
File: packages/feature-flags/index.ts
================
import { createFlag } from './lib/create-flag';

export const showBetaFeature = createFlag('showBetaFeature');

================
File: packages/feature-flags/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      FLAGS_SECRET: z.string().min(1).optional(),
    },
    runtimeEnv: {
      FLAGS_SECRET: process.env.FLAGS_SECRET,
    },
  });

================
File: packages/feature-flags/package.json
================
{
  "name": "@repo/feature-flags",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@repo/analytics": "workspace:*",
    "@repo/auth": "workspace:*",
    "@repo/design-system": "workspace:*",
    "@t3-oss/env-nextjs": "^0.11.1",
    "@vercel/flags": "^3.0.2",
    "@vercel/toolbar": "^0.1.30",
    "react": "^19.0.0",
    "zod": "^3.24.1"
  },
  "peerDependencies": {
    "next": "15.0.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/feature-flags/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/next-config/index.ts
================
import withBundleAnalyzer from '@next/bundle-analyzer';

// @ts-expect-error No declaration file
import { PrismaPlugin } from '@prisma/nextjs-monorepo-workaround-plugin';
import type { NextConfig } from 'next';

const otelRegex = /@opentelemetry\/instrumentation/;

export const config: NextConfig = {
  images: {
    formats: ['image/avif', 'image/webp'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'img.clerk.com',
      },
    ],
  },

  // biome-ignore lint/suspicious/useAwait: rewrites is async
  async rewrites() {
    return [
      {
        source: '/ingest/static/:path*',
        destination: 'https://us-assets.i.posthog.com/static/:path*',
      },
      {
        source: '/ingest/:path*',
        destination: 'https://us.i.posthog.com/:path*',
      },
      {
        source: '/ingest/decide',
        destination: 'https://us.i.posthog.com/decide',
      },
    ];
  },

  webpack(config, { isServer }) {
    if (isServer) {
      config.plugins = [...config.plugins, new PrismaPlugin()];
    }

    config.ignoreWarnings = [{ module: otelRegex }];

    return config;
  },

  // This is required to support PostHog trailing slash API requests
  skipTrailingSlashRedirect: true,
};

export const withAnalyzer = (sourceConfig: NextConfig): NextConfig =>
  withBundleAnalyzer()(sourceConfig);

================
File: packages/next-config/keys.ts
================
import { vercel } from '@t3-oss/env-core/presets';
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    extends: [vercel()],
    server: {
      ANALYZE: z.string().optional(),

      // Added by Vercel
      NEXT_RUNTIME: z.enum(['nodejs', 'edge']).optional(),
    },
    client: {
      NEXT_PUBLIC_APP_URL: z.string().min(1).url(),
      NEXT_PUBLIC_WEB_URL: z.string().min(1).url(),
      NEXT_PUBLIC_API_URL: z.string().min(1).url().optional(),
      NEXT_PUBLIC_DOCS_URL: z.string().min(1).url().optional(),
    },
    runtimeEnv: {
      ANALYZE: process.env.ANALYZE,
      NEXT_RUNTIME: process.env.NEXT_RUNTIME,
      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
      NEXT_PUBLIC_WEB_URL: process.env.NEXT_PUBLIC_WEB_URL,
      NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
      NEXT_PUBLIC_DOCS_URL: process.env.NEXT_PUBLIC_DOCS_URL,
    },
  });

================
File: packages/next-config/package.json
================
{
  "name": "@repo/next-config",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "next": "15.1.6"
  },
  "dependencies": {
    "@next/bundle-analyzer": "^15.1.5",
    "@prisma/nextjs-monorepo-workaround-plugin": "^6.2.1",
    "@t3-oss/env-core": "^0.11.1",
    "@t3-oss/env-nextjs": "^0.11.1",
    "zod": "^3.24.1"
  }
}

================
File: packages/next-config/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/notifications/components/provider.tsx
================
'use client';

import { KnockFeedProvider, KnockProvider } from '@knocklabs/react';
import type { ReactNode } from 'react';
import { keys } from '../keys';

const knockApiKey = keys().NEXT_PUBLIC_KNOCK_API_KEY;
const knockFeedChannelId = keys().NEXT_PUBLIC_KNOCK_FEED_CHANNEL_ID;

type NotificationsProviderProps = {
  children: ReactNode;
  userId: string;
};

export const NotificationsProvider = ({
  children,
  userId,
}: NotificationsProviderProps) => {
  if (!knockApiKey || !knockFeedChannelId) {
    return children;
  }

  return (
    <KnockProvider apiKey={knockApiKey} userId={userId}>
      <KnockFeedProvider feedId={knockFeedChannelId}>
        {children}
      </KnockFeedProvider>
    </KnockProvider>
  );
};

================
File: packages/notifications/components/trigger.tsx
================
'use client';

import {
  NotificationFeedPopover,
  NotificationIconButton,
} from '@knocklabs/react';
import { useRef, useState } from 'react';
import type { RefObject } from 'react';
import { keys } from '../keys';

// Required CSS import, unless you're overriding the styling
import '@knocklabs/react/dist/index.css';
import '../styles.css';

export const NotificationsTrigger = () => {
  const [isVisible, setIsVisible] = useState(false);
  const notifButtonRef = useRef<HTMLButtonElement>(null);

  const handleClose = (event: Event) => {
    if (event.target === notifButtonRef.current) {
      return;
    }

    setIsVisible(false);
  };

  if (!keys().NEXT_PUBLIC_KNOCK_API_KEY) {
    return null;
  }

  return (
    <>
      <NotificationIconButton
        onClick={() => setIsVisible(!isVisible)}
        ref={notifButtonRef}
      />
      {notifButtonRef.current && (
        <NotificationFeedPopover
          buttonRef={notifButtonRef as RefObject<HTMLElement>}
          isVisible={isVisible}
          onClose={handleClose}
        />
      )}
    </>
  );
};

================
File: packages/notifications/index.ts
================
import { Knock } from '@knocklabs/node';
import { keys } from './keys';

const key = keys().KNOCK_SECRET_API_KEY;

export const notifications = new Knock(key);

================
File: packages/notifications/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      KNOCK_SECRET_API_KEY: z.string().min(1).optional(),
    },
    client: {
      NEXT_PUBLIC_KNOCK_API_KEY: z.string().min(1).optional(),
      NEXT_PUBLIC_KNOCK_FEED_CHANNEL_ID: z.string().min(1).optional(),
    },
    runtimeEnv: {
      NEXT_PUBLIC_KNOCK_API_KEY: process.env.NEXT_PUBLIC_KNOCK_API_KEY,
      NEXT_PUBLIC_KNOCK_FEED_CHANNEL_ID:
        process.env.NEXT_PUBLIC_KNOCK_FEED_CHANNEL_ID,
      KNOCK_SECRET_API_KEY: process.env.KNOCK_SECRET_API_KEY,
    },
  });

================
File: packages/notifications/package.json
================
{
  "name": "@repo/notifications",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@knocklabs/node": "^0.6.16",
    "@knocklabs/react": "^0.3.1",
    "@t3-oss/env-nextjs": "^0.11.1",
    "react": "^19.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/notifications/styles.css
================
:root {
  --rnf-notification-icon-button-size: 1rem;
}

.rnf-notification-icon-button svg {
  width: var(--rnf-notification-icon-button-size);
  height: var(--rnf-notification-icon-button-size);
}

================
File: packages/notifications/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/observability/status/index.tsx
================
import 'server-only';
import { keys } from '../keys';
import type { BetterStackResponse } from './types';

const apiKey = keys().BETTERSTACK_API_KEY;
const url = keys().BETTERSTACK_URL;

export const Status = async () => {
  if (!apiKey || !url) {
    return null;
  }

  let statusColor = 'bg-muted-foreground';
  let statusLabel = 'Unable to fetch status';

  try {
    const response = await fetch(
      'https://uptime.betterstack.com/api/v2/monitors',
      {
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      }
    );

    if (!response.ok) {
      throw new Error('Failed to fetch status');
    }

    const { data } = (await response.json()) as BetterStackResponse;

    const status =
      data.filter((monitor) => monitor.attributes.status === 'up').length /
      data.length;

    if (status === 0) {
      statusColor = 'bg-destructive';
      statusLabel = 'Degraded performance';
    } else if (status < 1) {
      statusColor = 'bg-warning';
      statusLabel = 'Partial outage';
    } else {
      statusColor = 'bg-success';
      statusLabel = 'All systems normal';
    }
  } catch {
    statusColor = 'bg-muted-foreground';
    statusLabel = 'Unable to fetch status';
  }

  return (
    <a
      className="flex items-center gap-3 font-medium text-sm"
      target="_blank"
      rel="noreferrer"
      href={url}
    >
      <span className="relative flex h-2 w-2">
        <span
          className={`absolute inline-flex h-full w-full animate-ping rounded-full opacity-75 ${statusColor}`}
        />
        <span
          className={`relative inline-flex h-2 w-2 rounded-full ${statusColor}`}
        />
      </span>
      <span className="text-muted-foreground">{statusLabel}</span>
    </a>
  );
};

================
File: packages/observability/status/types.ts
================
export type BetterStackResponse = {
  data: {
    id: string;
    type: string;
    attributes: {
      url: string;
      pronounceable_name: string;
      auth_username: string;
      auth_password: string;
      monitor_type: string;
      monitor_group_id: unknown;
      last_checked_at: string;
      status:
        | 'down'
        | 'maintenance'
        | 'paused'
        | 'pending'
        | 'up'
        | 'validating';
      policy_id: unknown;
      required_keyword: unknown;
      verify_ssl: boolean;
      check_frequency: number;
      call: boolean;
      sms: boolean;
      email: boolean;
      push: boolean;
      team_wait: unknown;
      http_method: string;
      request_timeout: number;
      recovery_period: number;
      request_headers: unknown[];
      request_body: string;
      follow_redirects: boolean;
      remember_cookies: boolean;
      created_at: string;
      updated_at: string;
      ssl_expiration: unknown;
      domain_expiration: unknown;
      regions: string[];
      expected_status_codes: unknown[];
      port: unknown;
      confirmation_period: number;
      paused_at: unknown;
      paused: boolean;
      maintenance_from: unknown;
      maintenance_to: unknown;
      maintenance_timezone: string;
    };
    relationships: {
      policy: {
        data: unknown;
      };
    };
  }[];
  pagination: {
    first: string;
    last: string;
    prev: unknown;
    next: unknown;
  };
};

================
File: packages/observability/client.ts
================
/*
 * This file configures the initialization of Sentry on the client.
 * The config you add here will be used whenever a users loads a page in their browser.
 * https://docs.sentry.io/platforms/javascript/guides/nextjs/
 */

import { init, replayIntegration } from '@sentry/nextjs';
import { keys } from './keys';

export const initializeSentry = (): ReturnType<typeof init> =>
  init({
    dsn: keys().NEXT_PUBLIC_SENTRY_DSN,

    // Adjust this value in production, or use tracesSampler for greater control
    tracesSampleRate: 1,

    // Setting this option to true will print useful information to the console while you're setting up Sentry.
    debug: false,

    replaysOnErrorSampleRate: 1,

    /*
     * This sets the sample rate to be 10%. You may want this to be 100% while
     * in development and sample at a lower rate in production
     */
    replaysSessionSampleRate: 0.1,

    // You can remove this option if you're not planning to use the Sentry Session Replay feature:
    integrations: [
      replayIntegration({
        // Additional Replay configuration goes in here, for example:
        maskAllText: true,
        blockAllMedia: true,
      }),
    ],
  });

================
File: packages/observability/error.ts
================
import { captureException } from '@sentry/nextjs';
import { log } from './log';

export const parseError = (error: unknown): string => {
  let message = 'An error occurred';

  if (error instanceof Error) {
    message = error.message;
  } else if (error && typeof error === 'object' && 'message' in error) {
    message = error.message as string;
  } else {
    message = String(error);
  }

  try {
    captureException(error);
    log.error(`Parsing error: ${message}`);
  } catch (newError) {
    // biome-ignore lint/suspicious/noConsole: Need console here
    console.error('Error parsing error:', newError);
  }

  return message;
};

================
File: packages/observability/instrumentation.ts
================
import { keys } from './keys';
import { init } from '@sentry/nextjs';

const opts = {
  dsn: keys().NEXT_PUBLIC_SENTRY_DSN,
};

export const initializeSentry = () => {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    init(opts);
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    init(opts);
  }
};

================
File: packages/observability/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      BETTERSTACK_API_KEY: z.string().min(1).optional(),
      BETTERSTACK_URL: z.string().min(1).url().optional(),

      // Added by Sentry Integration, Vercel Marketplace
      SENTRY_ORG: z.string().min(1).optional(),
      SENTRY_PROJECT: z.string().min(1).optional(),
    },
    client: {
      // Added by Sentry Integration, Vercel Marketplace
      NEXT_PUBLIC_SENTRY_DSN: z.string().min(1).url().optional(),
    },
    runtimeEnv: {
      BETTERSTACK_API_KEY: process.env.BETTERSTACK_API_KEY,
      BETTERSTACK_URL: process.env.BETTERSTACK_URL,
      SENTRY_ORG: process.env.SENTRY_ORG,
      SENTRY_PROJECT: process.env.SENTRY_PROJECT,
      NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
    },
  });

================
File: packages/observability/log.ts
================
import { log as logtail } from '@logtail/next';

export const log = process.env.NODE_ENV === 'production' ? logtail : console;

================
File: packages/observability/next-config.ts
================
import { withSentryConfig } from '@sentry/nextjs';
import { keys } from './keys';

export const sentryConfig: Parameters<typeof withSentryConfig>[1] = {
  org: keys().SENTRY_ORG,
  project: keys().SENTRY_PROJECT,

  // Only print logs for uploading source maps in CI
  silent: !process.env.CI,

  /*
   * For all available options, see:
   * https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/
   */

  // Upload a larger set of source maps for prettier stack traces (increases build time)
  widenClientFileUpload: true,

  /*
   * Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.
   * This can increase your server load as well as your hosting bill.
   * Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-
   * side errors will fail.
   */
  tunnelRoute: '/monitoring',

  // Hides source maps from generated client bundles
  hideSourceMaps: true,

  // Automatically tree-shake Sentry logger statements to reduce bundle size
  disableLogger: true,

  /*
   * Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)
   * See the following for more information:
   * https://docs.sentry.io/product/crons/
   * https://vercel.com/docs/cron-jobs
   */
  automaticVercelMonitors: true,
};

export const withSentry = (sourceConfig: object): object => {
  const configWithTranspile = {
    ...sourceConfig,
    transpilePackages: ['@sentry/nextjs'],
  };

  return withSentryConfig(configWithTranspile, sentryConfig);
};

export { withLogtail } from '@logtail/next';

================
File: packages/observability/package.json
================
{
  "name": "@repo/observability",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@logtail/next": "^0.1.7",
    "@sentry/nextjs": "^8.50.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "react": "^19.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3",
    "typescript": "^5.7.3"
  }
}

================
File: packages/observability/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/payments/ai.ts
================
import { StripeAgentToolkit } from '@stripe/agent-toolkit/ai-sdk';
import { keys } from './keys';

export const paymentsAgentToolkit = new StripeAgentToolkit({
  secretKey: keys().STRIPE_SECRET_KEY,
  configuration: {
    actions: {
      paymentLinks: {
        create: true,
      },
      products: {
        create: true,
      },
      prices: {
        create: true,
      },
    },
  },
});

================
File: packages/payments/index.ts
================
import 'server-only';
import Stripe from 'stripe';
import { keys } from './keys';

export const stripe = new Stripe(keys().STRIPE_SECRET_KEY, {
  apiVersion: '2024-12-18.acacia',
});

export type { Stripe } from 'stripe';

================
File: packages/payments/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      STRIPE_SECRET_KEY: z.string().min(1).startsWith('sk_'),
      STRIPE_WEBHOOK_SECRET: z.string().min(1).startsWith('whsec_').optional(),
    },
    runtimeEnv: {
      STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
      STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,
    },
  });

================
File: packages/payments/package.json
================
{
  "name": "@repo/payments",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@stripe/agent-toolkit": "^0.2.2",
    "@t3-oss/env-nextjs": "^0.11.1",
    "stripe": "^17.5.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3"
  }
}

================
File: packages/payments/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/rate-limit/index.ts
================
import { Ratelimit, type RatelimitConfig } from '@upstash/ratelimit';
import { Redis } from '@upstash/redis';
import { keys } from './keys';

export const redis = new Redis({
  url: keys().UPSTASH_REDIS_REST_URL,
  token: keys().UPSTASH_REDIS_REST_TOKEN,
});

export const createRateLimiter = (props: Omit<RatelimitConfig, 'redis'>) =>
  new Ratelimit({
    redis,
    limiter: props.limiter ?? Ratelimit.slidingWindow(10, '10 s'),
    prefix: props.prefix ?? 'next-forge',
  });

export const { slidingWindow } = Ratelimit;

================
File: packages/rate-limit/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      UPSTASH_REDIS_REST_URL: z.string().min(1).url().optional(),
      UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
    },
    runtimeEnv: {
      UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL,
      UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN,
    },
  });

================
File: packages/rate-limit/package.json
================
{
  "name": "@repo/rate-limit",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@t3-oss/env-nextjs": "^0.11.1",
    "@upstash/ratelimit": "^2.0.5",
    "@upstash/redis": "^1.34.3",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3"
  }
}

================
File: packages/security/index.ts
================
import arcjet, {
  type ArcjetBotCategory,
  type ArcjetWellKnownBot,
  detectBot,
  request,
  shield,
} from '@arcjet/next';
import { keys } from './keys';

const arcjetKey = keys().ARCJET_KEY;

export const secure = async (
  allow: (ArcjetWellKnownBot | ArcjetBotCategory)[],
  sourceRequest?: Request
) => {
  if (!arcjetKey) {
    return;
  }

  const base = arcjet({
    // Get your site key from https://app.arcjet.com
    key: arcjetKey,
    // Identify the user by their IP address
    characteristics: ['ip.src'],
    rules: [
      // Protect against common attacks with Arcjet Shield
      shield({
        // Will block requests. Use "DRY_RUN" to log only
        mode: 'LIVE',
      }),
      // Other rules are added in different routes
    ],
  });

  const req = sourceRequest ?? (await request());
  const aj = base.withRule(detectBot({ mode: 'LIVE', allow }));
  const decision = await aj.protect(req);

  if (decision.isDenied()) {
    console.warn(
      `Arcjet decision: ${JSON.stringify(decision.reason, null, 2)}`
    );

    if (decision.reason.isBot()) {
      throw new Error('No bots allowed');
    }

    if (decision.reason.isRateLimit()) {
      throw new Error('Rate limit exceeded');
    }

    throw new Error('Access denied');
  }
};

================
File: packages/security/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      ARCJET_KEY: z.string().min(1).startsWith('ajkey_').optional(),
    },
    runtimeEnv: {
      ARCJET_KEY: process.env.ARCJET_KEY,
    },
  });

================
File: packages/security/middleware.ts
================
import {
  type NoseconeOptions,
  defaults,
  withVercelToolbar,
} from '@nosecone/next';
export { createMiddleware as noseconeMiddleware } from '@nosecone/next';

// Nosecone security headers configuration
// https://docs.arcjet.com/nosecone/quick-start
export const noseconeOptions: NoseconeOptions = {
  ...defaults,
  // Content Security Policy (CSP) is disabled by default because the values
  // depend on which Next Forge features are enabled. See
  // https://docs.next-forge.com/features/security/headers for guidance on how
  // to configure it.
  contentSecurityPolicy: false,
};

export const noseconeOptionsWithToolbar: NoseconeOptions =
  withVercelToolbar(noseconeOptions);

================
File: packages/security/package.json
================
{
  "name": "@repo/security",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@arcjet/next": "1.0.0-beta.1",
    "@nosecone/next": "1.0.0-beta.1",
    "@t3-oss/env-nextjs": "^0.11.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3"
  }
}

================
File: packages/security/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/seo/json-ld.tsx
================
import type { Thing, WithContext } from 'schema-dts';

type JsonLdProps = {
  code: WithContext<Thing>;
};

export const JsonLd = ({ code }: JsonLdProps) => (
  <script
    type="application/ld+json"
    // biome-ignore lint/security/noDangerouslySetInnerHtml: "This is a JSON-LD script, not user-generated content."
    dangerouslySetInnerHTML={{ __html: JSON.stringify(code) }}
  />
);

export * from 'schema-dts';

================
File: packages/seo/metadata.ts
================
import merge from 'lodash.merge';
import type { Metadata } from 'next';

type MetadataGenerator = Omit<Metadata, 'description' | 'title'> & {
  title: string;
  description: string;
  image?: string;
};

const applicationName = 'next-forge';
const author: Metadata['authors'] = {
  name: 'Hayden Bleasel',
  url: 'https://haydenbleasel.com/',
};
const publisher = 'Hayden Bleasel';
const twitterHandle = '@haydenbleasel';

export const createMetadata = ({
  title,
  description,
  image,
  ...properties
}: MetadataGenerator): Metadata => {
  const parsedTitle = `${title} | ${applicationName}`;
  const defaultMetadata: Metadata = {
    title: parsedTitle,
    description,
    applicationName,
    authors: [author],
    creator: author.name,
    formatDetection: {
      telephone: false,
    },
    appleWebApp: {
      capable: true,
      statusBarStyle: 'default',
      title: parsedTitle,
    },
    openGraph: {
      title: parsedTitle,
      description,
      type: 'website',
      siteName: applicationName,
      locale: 'en_US',
    },
    publisher,
    twitter: {
      card: 'summary_large_image',
      creator: twitterHandle,
    },
  };

  const metadata: Metadata = merge(defaultMetadata, properties);

  if (image && metadata.openGraph) {
    metadata.openGraph.images = [
      {
        url: image,
        width: 1200,
        height: 630,
        alt: title,
      },
    ];
  }

  return metadata;
};

================
File: packages/seo/package.json
================
{
  "name": "@repo/seo",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "lodash.merge": "^4.6.2",
    "react": "^19.0.0",
    "schema-dts": "^1.1.2"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/lodash.merge": "^4.6.9",
    "@types/node": "22.10.7",
    "@types/react": "19.0.7",
    "@types/react-dom": "^19.0.3",
    "next": "15.1.6"
  }
}

================
File: packages/seo/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/storage/client.ts
================
export * from '@vercel/blob/client';

================
File: packages/storage/index.ts
================
export * from '@vercel/blob';

================
File: packages/storage/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      BLOB_READ_WRITE_TOKEN: z.string().min(1).optional(),
    },
    runtimeEnv: {
      BLOB_READ_WRITE_TOKEN: process.env.BLOB_READ_WRITE_TOKEN,
    },
  });

================
File: packages/storage/package.json
================
{
  "name": "@repo/storage",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@t3-oss/env-nextjs": "^0.11.1",
    "@vercel/blob": "^0.27.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*"
  }
}

================
File: packages/storage/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/tailwind-config/config.ts
================
import typography from '@tailwindcss/typography';
import type { Config } from 'tailwindcss';
import animate from 'tailwindcss-animate';
import defaultTheme from 'tailwindcss/defaultTheme';
import typographyConfig from './typography.config';

export const config: Config = {
  darkMode: ['class'],
  content: [
    './node_modules/@repo/design-system/components/**/*.{ts,tsx}',
    './node_modules/@repo/design-system/lib/**/*.{ts,tsx}',
    './node_modules/@repo/design-system/index.tsx',
    './components/**/*.{ts,tsx}',
    './lib/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './providers/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border) / <alpha-value>)',
        input: 'hsl(var(--input) / <alpha-value>)',
        ring: 'hsl(var(--ring) / <alpha-value>)',
        background: 'hsl(var(--background) / <alpha-value>)',
        foreground: 'hsl(var(--foreground) / <alpha-value>)',
        primary: {
          DEFAULT: 'hsl(var(--primary) / <alpha-value>)',
          foreground: 'hsl(var(--primary-foreground) / <alpha-value>)',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary) / <alpha-value>)',
          foreground: 'hsl(var(--secondary-foreground) / <alpha-value>)',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive) / <alpha-value>)',
          foreground: 'hsl(var(--destructive-foreground) / <alpha-value>)',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted) / <alpha-value>)',
          foreground: 'hsl(var(--muted-foreground) / <alpha-value>)',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent) / <alpha-value>)',
          foreground: 'hsl(var(--accent-foreground) / <alpha-value>)',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover) / <alpha-value>)',
          foreground: 'hsl(var(--popover-foreground) / <alpha-value>)',
        },
        card: {
          DEFAULT: 'hsl(var(--card) / <alpha-value>)',
          foreground: 'hsl(var(--card-foreground) / <alpha-value>)',
        },
        success: {
          DEFAULT: 'hsl(var(--success) / <alpha-value>)',
          foreground: 'hsl(var(--success-foreground) / <alpha-value>)',
        },
        warning: {
          DEFAULT: 'hsl(var(--warning) / <alpha-value>)',
          foreground: 'hsl(var(--warning-foreground) / <alpha-value>)',
        },
        brand: {
          DEFAULT: 'hsl(var(--primary) / <alpha-value>)',
          foreground: 'hsl(var(--primary-foreground) / <alpha-value>)',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      fontFamily: {
        sans: ['var(--font-geist-sans)', ...defaultTheme.fontFamily.sans],
        mono: ['var(--font-geist-mono)', ...defaultTheme.fontFamily.mono],
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
      typography: typographyConfig,
    },
  },
  plugins: [animate, typography],
};

================
File: packages/tailwind-config/index.ts
================
import resolveConfig from 'tailwindcss/resolveConfig';
import { config } from './config';

export const tailwind = resolveConfig(config);

================
File: packages/tailwind-config/package.json
================
{
  "name": "@repo/tailwind-config",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@tailwindcss/typography": "^0.5.16",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "tailwindcss": "^3.4.17"
  }
}

================
File: packages/tailwind-config/tsconfig.json
================
{
  "extends": "@repo/typescript-config/react-library.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/tailwind-config/typography.config.ts
================
const typographyConfig = (theme: (path: string) => string) => ({
  DEFAULT: {
    css: {
      ':first-child': {
        marginTop: theme('margin.0'),
      },
      'h1, h2, h3, h4, h5, h6': {
        fontWeight: theme('fontWeight.semibold'),
        letterSpacing: theme('letterSpacing.tight'),
        marginBottom: theme('margin.4'),

        '+ h1, + h2, + h3, + h4, + h5, + h6': {
          marginTop: theme('margin.0'),
        },
      },
      h1: {
        fontSize: theme('fontSize.3xl'),
        marginTop: theme('margin.16'),
      },
      h2: {
        fontSize: theme('fontSize.2xl'),
      },
      h3: {
        fontSize: theme('fontSize.xl'),
      },
      h4: {
        fontSize: theme('fontSize.lg'),
      },
      h5: {
        fontSize: theme('fontSize.base'),
      },
      h6: {
        fontSize: theme('fontSize.base'),
      },
      table: {
        boxShadow: `0 0 0 1px ${theme('colors.gray.200')}`,
        borderRadius: theme('borderRadius.md'),
        overflow: 'hidden',
        p: {
          margin: 0,
        },
        th: {
          paddingTop: '0.5714286em',
          paddingRight: '0.5714286em',
          paddingBottom: '0.5714286em',
          paddingLeft: '0.5714286em',
          backgroundColor: theme('colors.gray.100'),
          '&:not(:last-child)': {
            borderRightWidth: '1px',
            borderRightColor: theme('colors.gray.200'),
          },
        },
        'tbody td, tfoot td': {
          paddingLeft: '0.5714286em',
          '&:not(:last-child)': {
            borderRightWidth: '1px',
            borderRightColor: theme('colors.gray.200'),
          },
        },
      },
      code: {
        '&::before, &::after': {
          display: 'none',
        },
      },
      pre: {
        backgroundColor: 'transparent',
        borderWidth: 1,
        borderColor: theme('colors.gray.200'),
      },
    },
  },
  invert: {
    css: {
      table: {
        boxShadow: `0 0 0 1px ${theme('colors.gray.700')}`,
        th: {
          backgroundColor: theme('colors.gray.800'),
          '&:not(:last-child)': {
            borderRightColor: theme('colors.gray.700'),
          },
        },
        'tbody td, tfoot td': {
          '&:not(:last-child)': {
            borderRightColor: theme('colors.gray.700'),
          },
        },
      },
      pre: {
        borderColor: theme('colors.gray.800'),
      },
    },
  },
});

export default typographyConfig;

================
File: packages/testing/index.js
================
const path = require('node:path');
const react = require('@vitejs/plugin-react');
const { defineConfig } = require('vitest/config');

const config = defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './'),
      '@repo': path.resolve(__dirname, '../../packages'),
    },
  },
});

module.exports = config;

================
File: packages/testing/package.json
================
{
  "name": "@repo/testing",
  "version": "0.0.0",
  "private": true,
  "main": "./index.js",
  "type": "commonjs",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.4",
    "vitest": "^3.0.3"
  }
}

================
File: packages/testing/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["./src/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: packages/typescript-config/base.json
================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": false,
    "isolatedModules": true,
    "lib": ["es2022", "DOM", "DOM.Iterable"],
    "module": "NodeNext",
    "moduleDetection": "force",
    "moduleResolution": "NodeNext",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ES2022",
    "strictNullChecks": true
  }
}

================
File: packages/typescript-config/nextjs.json
================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "allowJs": true,
    "jsx": "preserve",
    "noEmit": true,
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "exclude": ["node_modules"]
}

================
File: packages/typescript-config/package.json
================
{
  "name": "@repo/typescript-config",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  }
}

================
File: packages/typescript-config/react-library.json
================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx"
  }
}

================
File: packages/webhooks/lib/svix.ts
================
import 'server-only';
import { auth } from '@repo/auth/server';
import { Svix } from 'svix';
import { keys } from '../keys';

const svixToken = keys().SVIX_TOKEN;

export const send = async (eventType: string, payload: object) => {
  if (!svixToken) {
    throw new Error('SVIX_TOKEN is not set');
  }

  const svix = new Svix(svixToken);
  const { orgId } = await auth();

  if (!orgId) {
    return;
  }

  return svix.message.create(orgId, {
    eventType,
    payload: {
      eventType,
      ...payload,
    },
    application: {
      name: orgId,
      uid: orgId,
    },
  });
};

export const getAppPortal = async () => {
  if (!svixToken) {
    throw new Error('SVIX_TOKEN is not set');
  }

  const svix = new Svix(svixToken);
  const { orgId } = await auth();

  if (!orgId) {
    return;
  }

  return svix.authentication.appPortalAccess(orgId, {
    application: {
      name: orgId,
      uid: orgId,
    },
  });
};

================
File: packages/webhooks/index.ts
================
import { getAppPortal, send } from './lib/svix';

export const webhooks = {
  send,
  getAppPortal,
};

================
File: packages/webhooks/keys.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

export const keys = () =>
  createEnv({
    server: {
      SVIX_TOKEN: z
        .union([
          z.string().min(1).startsWith('sk_'),
          z.string().min(1).startsWith('testsk_'),
        ])
        .optional(),
    },
    runtimeEnv: {
      SVIX_TOKEN: process.env.SVIX_TOKEN,
    },
  });

================
File: packages/webhooks/package.json
================
{
  "name": "@repo/webhooks",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@repo/auth": "workspace:*",
    "@t3-oss/env-nextjs": "^0.11.1",
    "svix": "^1.45.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "^5.7.3"
  }
}

================
File: packages/webhooks/tsconfig.json
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": "."
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: scripts/index.ts
================
#!/usr/bin/env node

import { program } from 'commander';
import { initialize } from './initialize.js';
import { update } from './update.js';

program
  .command('init')
  .description('Initialize a new next-forge project')
  .option('--name <name>', 'Name of the project')
  .option(
    '--package-manager <manager>',
    'Package manager to use (npm, yarn, bun, pnpm)'
  )
  .option('--disable-git', 'Disable git initialization')
  .action(initialize);

program
  .command('update')
  .description('Update the project from one version to another')
  .option('--from <version>', 'Version to update from e.g. 1.0.0')
  .option('--to <version>', 'Version to update to e.g. 2.0.0')
  .action(update);

program.parse(process.argv);

================
File: scripts/initialize.ts
================
import { copyFile, readFile, readdir, rm, writeFile } from 'node:fs/promises';
import { join } from 'node:path';
import {
  cancel,
  intro,
  isCancel,
  log,
  outro,
  select,
  spinner,
  text,
} from '@clack/prompts';
import {
  url,
  exec,
  execSyncOpts,
  internalContentDirs,
  internalContentFiles,
  supportedPackageManagers,
} from './utils.js';

const cloneNextForge = async (name: string, packageManager: string) => {
  const command = [
    'npx create-next-app@latest',
    name,
    '--example',
    url,
    '--disable-git',
    '--skip-install',
    `--use-${packageManager}`,
  ];

  await exec(command.join(' '), execSyncOpts);
};

const deleteInternalContent = async () => {
  for (const folder of internalContentDirs) {
    await rm(folder, { recursive: true, force: true });
  }

  for (const file of internalContentFiles) {
    await rm(file, { force: true });
  }
};

const installDependencies = async (packageManager: string) => {
  const suffix = packageManager === 'npm' ? '--force' : '';

  await exec(`${packageManager} install ${suffix}`, execSyncOpts);
};

const initializeGit = async () => {
  await exec('git init', execSyncOpts);
  await exec('git add .', execSyncOpts);
  await exec('git commit -m "✨ Initial commit"', execSyncOpts);
};

const setupEnvironmentVariables = async () => {
  const files = [
    { source: join('apps', 'api'), target: '.env.local' },
    { source: join('apps', 'app'), target: '.env.local' },
    { source: join('apps', 'web'), target: '.env.local' },
    { source: join('packages', 'cms'), target: '.env.local' },
    { source: join('packages', 'database'), target: '.env' },
  ];

  for (const { source, target } of files) {
    await copyFile(join(source, '.env.example'), join(source, target));
  }
};

const setupOrm = async (packageManager: string) => {
  const filterCommand = packageManager === 'npm' ? '--workspace' : '--filter';

  const command = [
    packageManager,
    'run',
    'build',
    filterCommand,
    '@repo/database',
  ].join(' ');

  await exec(command, execSyncOpts);
};

const updatePackageManagerConfiguration = async (
  projectDir: string,
  packageManager: string
) => {
  const packageJsonPath = join(projectDir, 'package.json');
  const packageJsonFile = await readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageJsonFile);

  if (packageManager === 'bun') {
    packageJson.packageManager = 'bun@1.1.43';
  } else if (packageManager === 'npm') {
    packageJson.packageManager = 'npm@10.8.1';
  } else if (packageManager === 'yarn') {
    packageJson.packageManager = 'yarn@1.22.22';
  }

  const newPackageJson = JSON.stringify(packageJson, null, 2);

  await writeFile(packageJsonPath, `${newPackageJson}\n`);
};

const updateWorkspaceConfiguration = async (projectDir: string) => {
  const packageJsonPath = join(projectDir, 'package.json');
  const packageJsonFile = await readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageJsonFile);

  packageJson.workspaces = ['apps/*', 'packages/*'];

  const newPackageJson = JSON.stringify(packageJson, null, 2);

  await writeFile(packageJsonPath, `${newPackageJson}\n`);

  await rm('pnpm-lock.yaml', { force: true });
  await rm('pnpm-workspace.yaml', { force: true });
};

const updateInternalPackageDependencies = async (path: string) => {
  const pkgJsonFile = await readFile(path, 'utf8');
  const pkgJson = JSON.parse(pkgJsonFile);

  if (pkgJson.dependencies) {
    // Update dependencies
    const entries = Object.entries(pkgJson.dependencies);

    for (const [dep, version] of entries) {
      if (version === 'workspace:*') {
        pkgJson.dependencies[dep] = '*';
      }
    }
  }

  if (pkgJson.devDependencies) {
    // Update devDependencies
    const entries = Object.entries(pkgJson.devDependencies);

    for (const [dep, version] of entries) {
      if (version === 'workspace:*') {
        pkgJson.devDependencies[dep] = '*';
      }
    }
  }

  const newPkgJson = JSON.stringify(pkgJson, null, 2);

  await writeFile(path, `${newPkgJson}\n`);
};

const updateInternalDependencies = async (projectDir: string) => {
  const rootPackageJsonPath = join(projectDir, 'package.json');
  await updateInternalPackageDependencies(rootPackageJsonPath);

  const workspaceDirs = ['apps', 'packages'];

  for (const dir of workspaceDirs) {
    const dirPath = join(projectDir, dir);
    const packages = await readdir(dirPath);

    for (const pkg of packages) {
      const path = join(dirPath, pkg, 'package.json');
      await updateInternalPackageDependencies(path);
    }
  }
};

const getName = async () => {
  const value = await text({
    message: 'What is your project named?',
    placeholder: 'my-app',
    validate(value: string) {
      if (value.length === 0) {
        return 'Please enter a project name.';
      }
    },
  });

  if (isCancel(value)) {
    cancel('Operation cancelled.');
    process.exit(0);
  }

  return value.toString();
};

const getPackageManager = async () => {
  const value = await select({
    message: 'Which package manager would you like to use?',
    options: supportedPackageManagers.map((choice) => ({
      value: choice,
      label: choice,
    })),
    initialValue: 'pnpm',
  });

  if (isCancel(value)) {
    cancel('Operation cancelled.');
    process.exit(0);
  }

  return value.toString() as (typeof supportedPackageManagers)[number];
};

export const initialize = async (options: {
  name?: string;
  packageManager?: string;
  disableGit?: boolean;
}) => {
  try {
    intro("Let's start a next-forge project!");

    const cwd = process.cwd();
    const name = options.name || (await getName());
    const packageManager =
      options.packageManager || (await getPackageManager());

    if (!supportedPackageManagers.includes(packageManager)) {
      throw new Error('Invalid package manager');
    }

    const s = spinner();
    const projectDir = join(cwd, name);

    s.start('Cloning next-forge...');
    await cloneNextForge(name, packageManager);

    s.message('Moving into repository...');
    process.chdir(projectDir);

    if (packageManager !== 'pnpm') {
      s.message('Updating package manager configuration...');
      await updatePackageManagerConfiguration(projectDir, packageManager);

      s.message('Updating workspace config...');
      await updateWorkspaceConfiguration(projectDir);

      s.message('Updating workspace dependencies...');
      await updateInternalDependencies(projectDir);
    }

    s.message('Setting up environment variable files...');
    await setupEnvironmentVariables();

    s.message('Deleting internal content...');
    await deleteInternalContent();

    s.message('Installing dependencies...');
    await installDependencies(packageManager);

    s.message('Setting up ORM...');
    await setupOrm(packageManager);

    if (!options.disableGit) {
      s.message('Initializing Git repository...');
      await initializeGit();
    }

    s.stop('Project initialized successfully!');

    outro(
      'Please make sure you install the Mintlify CLI and Stripe CLI before starting the project.'
    );
  } catch (error) {
    const message =
      error instanceof Error
        ? error.message
        : `Failed to initialize project: ${error}`;

    log.error(message);
    process.exit(1);
  }
};

================
File: scripts/update.ts
================
import { copyFile, mkdir, readFile, rm } from 'node:fs/promises';
import { dirname, join } from 'node:path';
import {
  cancel,
  intro,
  isCancel,
  log,
  outro,
  select,
  spinner,
} from '@clack/prompts';
import {
  url,
  allInternalContent,
  cleanFileName,
  exec,
  getAvailableVersions,
  tempDirName,
} from './utils.js';

const compareVersions = (a: string, b: string) => {
  const [aMajor, aMinor, aPatch] = a.split('.').map(Number);
  const [bMajor, bMinor, bPatch] = b.split('.').map(Number);
  if (aMajor !== bMajor) {
    return aMajor - bMajor;
  }
  if (aMinor !== bMinor) {
    return aMinor - bMinor;
  }
  return aPatch - bPatch;
};

const createTemporaryDirectory = async (name: string) => {
  const cwd = process.cwd();
  const tempDir = join(cwd, name);

  await rm(tempDir, { recursive: true, force: true });
  await mkdir(tempDir, { recursive: true });
};

const cloneRepository = async (name: string) =>
  await exec(`git clone ${url} ${name}`);

const getFiles = async (version: string) => {
  await exec(`git checkout ${version}`);

  const response = await exec('git ls-files');
  const files = response.stdout.toString().trim().split('\n');

  return files;
};

const updateFiles = async (files: string[]) => {
  const cwd = process.cwd();
  const tempDir = join(cwd, tempDirName);

  for (const file of files) {
    const sourcePath = join(tempDir, file);
    const destPath = join(cwd, file);

    // Ensure destination directory exists
    await mkdir(dirname(destPath), { recursive: true });

    await copyFile(sourcePath, destPath);
  }
};

const deleteTemporaryDirectory = async () =>
  await rm(tempDirName, { recursive: true, force: true });

const getCurrentVersion = async (): Promise<string | undefined> => {
  const packageJsonPath = join(process.cwd(), 'package.json');
  const packageJsonContents = await readFile(packageJsonPath, 'utf-8');
  const packageJson = JSON.parse(packageJsonContents) as { version?: string };

  return packageJson.version;
};

const selectVersion = async (
  label: string,
  availableVersions: string[],
  initialValue: string | undefined
) => {
  const version = await select({
    message: `Select a version to update ${label}:`,
    options: availableVersions.map((v) => ({ value: v, label: `v${v}` })),
    initialValue,
    maxItems: 10,
  });

  if (isCancel(version)) {
    cancel('Operation cancelled.');
    process.exit(0);
  }

  return version.toString();
};

const getDiff = async (
  from: { version: string; files: string[] },
  to: { version: string; files: string[] }
) => {
  const filesToUpdate: string[] = [];

  for (const file of to.files) {
    // Skip internal content that is meant to be deleted during init
    if (allInternalContent.some((ic) => file.startsWith(ic))) {
      continue;
    }

    const hasChanged =
      !from.files.includes(file) ||
      (
        await exec(
          `git diff ${from.version} ${to.version} -- "${cleanFileName(file)}"`,
          { maxBuffer: 1024 * 1024 * 1024 }
        )
      )
        .toString()
        .trim() !== '';

    if (hasChanged) {
      filesToUpdate.push(file);
    }
  }

  return filesToUpdate;
};

export const update = async (options: { from?: string; to?: string }) => {
  try {
    intro("Let's update your next-forge project!");

    const cwd = process.cwd();
    const availableVersions = await getAvailableVersions();
    let currentVersion = await getCurrentVersion();

    // Ditch the project version if it is not in the available versions
    if (currentVersion && !availableVersions.includes(currentVersion)) {
      currentVersion = undefined;
    }

    const fromVersion =
      options.from ||
      (await selectVersion('from', availableVersions, currentVersion));

    if (fromVersion === availableVersions[0]) {
      outro('You are already on the latest version!');
      return;
    }

    const upgradeableVersions = availableVersions.filter(
      (v) => compareVersions(v, fromVersion) > 0
    );

    const [nextVersion] = upgradeableVersions;

    const toVersion =
      options.to ||
      (await selectVersion('to', upgradeableVersions, nextVersion));

    const from = `v${fromVersion}`;
    const to = `v${toVersion}`;

    const s = spinner();

    s.start(`Preparing to update from ${from} to ${to}...`);

    s.message('Creating temporary directory...');
    await createTemporaryDirectory(tempDirName);

    s.message('Cloning next-forge...');
    await cloneRepository(tempDirName);

    s.message('Moving into repository...');
    process.chdir(tempDirName);

    s.message(`Getting files from version ${from}...`);
    const fromFiles = await getFiles(from);

    s.message(`Getting files from version ${to}...`);
    const toFiles = await getFiles(to);

    s.message(`Computing diff between versions ${from} and ${to}...`);
    const diff = await getDiff(
      {
        version: from,
        files: fromFiles,
      },
      {
        version: to,
        files: toFiles,
      }
    );

    s.message('Moving back to original directory...');
    process.chdir(cwd);

    s.message(`Updating ${diff.length} files...`);
    await updateFiles(diff);

    s.message('Cleaning up...');
    await deleteTemporaryDirectory();

    s.stop(`Successfully updated project from ${from} to ${to}!`);

    outro('Please review and test the changes carefully.');
  } catch (error) {
    const message = error instanceof Error ? error.message : `${error}`;

    log.error(`Failed to update project: ${message}`);
    process.exit(1);
  }
};

================
File: scripts/utils.ts
================
import { type ExecSyncOptions, exec as execRaw } from 'node:child_process';
import { readFile } from 'node:fs/promises';
import { join } from 'node:path';
import { promisify } from 'node:util';

export const url = 'https://github.com/haydenbleasel/next-forge';

export const cleanFileName = (file: string) =>
  file.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\\/g, '/');

export const execSyncOpts: ExecSyncOptions = { stdio: 'ignore' };

export const internalContentDirs = [
  join('.github', 'workflows'),
  'docs',
  'splash',
];

export const internalContentFiles = [
  join('.github', 'CONTRIBUTING.md'),
  join('.github', 'FUNDING.yml'),
  join('.github', 'SECURITY.md'),
  '.autorc',
  'CHANGELOG.md',
  'license.md',
];

export const allInternalContent = [
  ...internalContentDirs,
  ...internalContentFiles,
];

export const semver = /^\d+\.\d+\.\d+$/;

export const tempDirName = 'next-forge-update';

export const exec = promisify(execRaw);

export const supportedPackageManagers = ['npm', 'yarn', 'bun', 'pnpm'];

export const getAvailableVersions = async (): Promise<string[]> => {
  const changelog = await readFile('CHANGELOG.md', 'utf-8');
  const versionRegex = /# v(\d+\.\d+\.\d+)/g;
  const matches = [...changelog.matchAll(versionRegex)];

  return matches
    .map((match) => match[1])
    .sort((a, b) => {
      const [aMajor, aMinor, aPatch] = a.split('.').map(Number);
      const [bMajor, bMinor, bPatch] = b.split('.').map(Number);
      if (aMajor !== bMajor) {
        return bMajor - aMajor;
      }
      if (aMinor !== bMinor) {
        return bMinor - aMinor;
      }
      return bPatch - aPatch;
    });
};

================
File: turbo/generators/templates/package.json.hbs
================
{
  "name": "@repo/{{ name }}",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  }
}

================
File: turbo/generators/templates/tsconfig.json.hbs
================
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: turbo/generators/config.ts
================
import type { PlopTypes } from '@turbo/gen';

export default function generator(plop: PlopTypes.NodePlopAPI): void {
  plop.setGenerator('init', {
    description: 'Generate a new package for the Monorepo',
    prompts: [
      {
        type: 'input',
        name: 'name',
        message:
          'What is the name of the package? (You can skip the `@repo/` prefix)',
      },
    ],
    actions: [
      (answers) => {
        if (
          'name' in answers &&
          typeof answers.name === 'string' &&
          answers.name.startsWith('@repo/')
        ) {
          answers.name = answers.name.replace('@repo/', '');
        }
        return 'Config sanitized';
      },
      {
        type: 'add',
        path: 'packages/{{ name }}/package.json',
        templateFile: 'templates/package.json.hbs',
      },
      {
        type: 'add',
        path: 'packages/{{ name }}/tsconfig.json',
        templateFile: 'templates/tsconfig.json.hbs',
      },
    ],
  });
}

================
File: turbo/generators/package.json
================
{
  "type": "commonjs"
}

================
File: .cursorrules.example
================
# [PROJECT NAME]

## PROJECT DESCRIPTION
- [PROJECT DESCRIPTION - What is the goal of the project? What is the purpose of the project?]

## AI AGENT ROLE
- [AI AGENT ROLE - What is the role of the AI agent? What is the goal of the AI agent? Example ↴]
- You are a senior software engineer with great experience in [PROJECT LANGUAGE] and [PROJECT TECHNOLOGY].
- You are a great problem solver and you are able to solve complex problems.

## CODING STYLE AND STRUCTURE
- [How do you want the agent to write the code? What is the coding style and structure?]
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs
- Write concise, technical TypeScript code with accurate examples

## Error Handling
- [How do you want the agent to handle errors?]
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- [How do you want the agent to handle testing?]
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- [How do you want the agent to handle security?]
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# Dependencies
node_modules
.pnp
.pnp.js

# Local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage

# Turbo
.turbo

# Vercel
.vercel

# Build Outputs
.next/
out/
build
dist


# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Misc
.DS_Store
*.pem

# Sentry Config File
.env.sentry-build-plugin

# BaseHub
.basehub

# AI Rules
.cursorrules
.github/copilot-instructions.md

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "extends": ["ultracite"],
  "javascript": {
    "globals": ["Liveblocks"]
  },
  "files": {
    "ignore": [
      "packages/design-system/components/ui/**",
      "packages/design-system/lib/**",
      "packages/design-system/hooks/**",
      "packages/collaboration/config.ts",
      "apps/docs/**/*.json",
      "apps/email/.react-email/**"
    ]
  }
}

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.

================
File: package.json
================
{
  "name": "next-forge",
  "version": "3.2.20",
  "bin": {
    "next-forge": "dist/index.js"
  },
  "files": [
    "dist/index.js"
  ],
  "scripts": {
    "build": "turbo build",
    "dev": "turbo dev",
    "lint": "ultracite lint",
    "format": "ultracite format",
    "test": "turbo test",
    "analyze": "turbo analyze",
    "bump-deps": "npx npm-check-updates --deep -u -x react-day-picker && pnpm install",
    "bump-ui": "npx shadcn@latest add --all --overwrite -c packages/design-system",
    "migrate": "cd packages/database && npx prisma format && npx prisma generate && npx prisma db push",
    "clean": "git clean -xdf node_modules"
  },
  "devDependencies": {
    "@auto-it/first-time-contributor": "^11.3.0",
    "@biomejs/biome": "1.9.4",
    "@repo/typescript-config": "workspace:*",
    "@turbo/gen": "^2.3.3",
    "@types/node": "^22.10.7",
    "tsup": "^8.3.5",
    "turbo": "^2.3.3",
    "typescript": "^5.7.3",
    "ultracite": "^4.1.15",
    "vitest": "^3.0.3"
  },
  "engines": {
    "node": ">=18"
  },
  "packageManager": "pnpm@9.15.4",
  "dependencies": {
    "@clack/prompts": "^0.9.1",
    "commander": "^13.1.0"
  },
  "type": "module"
}

================
File: pnpm-workspace.yaml
================
packages:
  - "apps/*"
  - "packages/*"

================
File: README.md
================
# Lavel AI: Multi-Tenant Legal AI Agent Platform (Next.js & Turbo Repo)

This repository contains the codebase for Lavel AI, a multi-tenant SaaS platform designed for legal professionals in Mexico.  The platform leverages AI to provide [mention specific AI functionalities, e.g., document summarization, legal research, case prediction, etc.].  A key feature of Lavel AI is its **tenant isolation**, achieved through dedicated databases for each tenant (organization).

**Key Technologies:**

*   **Next.js:** A React framework for building server-side rendered (SSR) and statically generated web applications.
*   **Turbo Repo:** A high-performance build system for JavaScript/TypeScript monorepos.
*   **Clerk:** User authentication and management.
*   **Neon:** Serverless PostgreSQL database provider (used for both the main application database and tenant databases).
*   **Drizzle ORM:** A TypeScript ORM for interacting with the database.
*   **Vercel:** Hosting platform for the Next.js applications.
*   **Liveblocks:** (Optional, based on existing code) For real-time collaboration features (cursors, presence).
*   **PostHog:** (Optional, based on existing code) Product analytics and feature flags.
*   **Vitest:**  Testing framework.
*   **Shadcn/ui:**  UI component library.
*   **Resend:** (Optional, based on existing code) For sending transactional emails (e.g., contact form submissions).
*   **Stripe:** (Optional, based on existing code) For payments/subscription management.
*   **Svix:** (Optional, based on existing code) For webhook management.

**Repository Structure:**

This repository is structured as a monorepo using Turbo Repo, organizing code into logical packages and applications:
.
├── apps/ # Next.js applications
│ ├── api/ # Serverless functions (API endpoints, webhooks)
│ ├── app/ # Main application (authenticated routes, tenant logic)
│ ├── docs/ # Documentation site (likely using Mintlify)
│ ├── email/ # Email templates (using react.email)
│ ├── storybook/ # Storybook for UI component development
│ ├── web/ # Marketing/landing page website
│ └── studio/ # Prisma Studio (database management UI)
├── packages/ # Reusable packages
│ ├── ai/ # AI-related logic and components
│ ├── analytics/ # Analytics integration (PostHog, Google Analytics, Vercel Analytics)
│ ├── auth/ # Authentication logic (using Clerk)
│ ├── cms/ # Content Management System (Basehub)
│ ├── collaboration/ # Real-time collaboration (using Liveblocks)
│ ├── database/ # Database interactions (Drizzle ORM, Neon connection)
│ │ ├── neon/
│ │ ├── src/
│ │ │ ├── main-app/ # Main application database schema, queries, and connection
│ │ │ └── tenant-app/ # Tenant-specific database schema, queries, connection, and lookup
│ │ └── types/
│ ├── design-system/ # UI components (Shadcn/ui, Tailwind CSS)
│ ├── email/ # Email templates and sending logic (Resend)
│ ├── feature-flags/ # Feature flag management
│ ├── next-config/ # Shared Next.js configuration
│ ├── notifications/ # User notification logic
│ ├── observability/ # Logging, error tracking, and monitoring (Sentry, Logtail)
│ ├── payments/ # Payments integration (Stripe)
│ ├── rate-limit/ # API rate limiting (Upstash Redis)
│ ├── security/ # Security headers and middleware (Nosecone)
│ ├── seo/ # SEO utilities (metadata, JSON-LD)
│ ├── storage/ # Cloud storage (Vercel Blob)
│ ├── tailwind-config/ # Shared Tailwind CSS configuration
│ ├── testing/ # Shared testing configuration (Vitest)
│ ├── typescript-config/ # Shared TypeScript configuration
│ └── webhooks/ # Webhook handling (Svix)
└── scripts/ # Utility scripts (initialization, updates)


**Core Features (Based on Codebase):**

*   **Multi-Tenancy with Subdomain Routing:**  Users access their organization's workspace via a unique subdomain (e.g., `organization-slug.lavel.ai`).
*   **Tenant Isolation:** Each tenant has a separate Neon PostgreSQL database, ensuring data privacy and security.
*   **Authentication with Clerk:**  Handles user registration, login, and session management.  Users initially log in on the main domain (`lavel.ai`) and are redirected to their default organization's subdomain.
*   **Organization Management:**  (Needs further implementation based on the current codebase).  Users can belong to multiple organizations, and the platform includes a mechanism to determine the user's default organization.
*   **Database Management with Drizzle ORM:**  Provides a type-safe way to interact with both the main application database and tenant databases.
*   **Real-time Collaboration (Optional):**  Leverages Liveblocks for features like presence (cursors) and potentially other collaborative editing features.
*   **API (Serverless Functions):** Next.js API routes are used for webhooks (Clerk, Stripe), and potentially other backend logic.
*   **Feature Flags (Optional):**  Uses Vercel's Feature Flags for managing feature rollouts.
*   **Analytics (Optional):** Integrates with PostHog for product analytics and Google Analytics for website tracking.
*   **Email (Optional):** Uses Resend for sending transactional emails.
*   **Payments (Optional):**  Integrates with Stripe for subscription management.
*   **Webhooks (Optional):**  Uses Svix for managing webhooks, allowing integration with external services.
*   **Rate Limiting (Optional):**  Uses Upstash Redis for API rate limiting.
*   **Security Headers:** Uses Nosecone middleware to set HTTP security headers for enhanced security.
*   **SEO:** Includes utilities for generating metadata and JSON-LD for improved search engine optimization.
*   **Documentation:**  Uses Mintlify for generating documentation from Markdown and MDX files.
* **Content Management System:** Uses Basehub to create content, mainly for blog posts.

**Getting Started:**

1.  **Prerequisites:**
    *   Node.js (v18+) and pnpm (or your preferred package manager)
    *   Clerk account and API keys
    *   Neon account and API keys (for main and tenant databases)
    *   (Optional) Resend, Stripe, Svix, PostHog, Vercel, etc., accounts and API keys if using those features
    *   (Optional) If using Basehub, add a valid `BASEHUB_TOKEN`

2.  **Clone the repository:**

    ```bash
    git clone <repository_url>
    ```

3.  **Install dependencies:**

    ```bash
    pnpm install  # Or npm install, yarn install, bun install
    ```

4.  **Set up environment variables:**

    *   Create `.env.local` files in the `apps/api`, `apps/app`, `apps/web`, `packages/cms` and `packages/database` directories (copy the `.env.example` files and fill in the required values).
    *   Make sure to populate the necessary API keys for Clerk, Neon, and any other services you intend to use.
    *   Set `DATABASE_URL` in `packages/database/.env` to point to your **main application database**.
    *   For testing the tenant lookup, create an organization and a project that sets a database connection URL (using, for example, `pscale connect`).

5.  **Database Setup:**

    *   **Main Application Database:**
        *   Run `pnpm migrate` inside `packages/database` to create the tables in your main application database.
        *   You may need to manually create the main database through Neon first.

    *   **Tenant Databases:**
        *   The `tenant-lookup.ts` file contains logic for looking up connection URLs based on subdomains.  You'll need to ensure your main database has the `organizations` and `projects` tables populated correctly.
        *   The actual tenant database schemas are defined in `packages/database/src/tenant-app/schema`. You will need to run migrations *against each tenant database* after you create it (see below).

6.  **Run the development servers:**

    ```bash
    pnpm dev
    ```
    This command (from the root of the monorepo) will start the Next.js development servers for the different applications (app, web, api, etc.).  The default ports are:

    *   `app`: 3000 (main application, authenticated routes)
    *   `web`: 3001 (marketing website)
    *   `api`: 3002 (API endpoints)
    *   `docs`: 3004 (documentation)
    *   `storybook`: 6006

7. **Local Subdomain Setup (Important!):**
   To test multi-tenancy locally, you'll need to configure your system to resolve subdomains to `localhost`. The easiest way is to edit your hosts file:

    *   **macOS / Linux:** `/etc/hosts`
    *   **Windows:** `C:\Windows\System32\drivers\etc\hosts`
    Add entries like this:

    ```
    127.0.0.1   localhost
    127.0.0.1   tenant-a.localhost
    127.0.0.1   tenant-b.localhost
    127.0.0.1   mg.localhost
    ```

    Replace `tenant-a`, `tenant-b`, `mg` with your test subdomains (slugs). You will also need to add entries to the `organizations` table in your main database with those slugs, and a `projects` entry with a corresponding valid `connectionUrl`.

8. **Accessing Applications:**
    * **Main Application:** Access the main application at the appropriate domain and port e.g. `http://localhost:3000`.
    * **Tenant Subdomains:** Access tenant workspaces via their subdomains (e.g., `http://tenant-a.localhost:3000`).
    * **Marketing Website:** Access the marketing website at `http://localhost:3001`.
    * **Documentation:** Access the documentation site at `http://localhost:3004`.
    * **Storybook:** Access Storybook at `http://localhost:6006`.

**Deployment:**

The project is designed to be deployed on Vercel. You will need to:

1.  Create Vercel projects for each of the Next.js applications (`apps/app`, `apps/web`, `apps/api`).
2.  Set the appropriate environment variables in each Vercel project (from your `.env.local` files).
3.  Configure the domains (including wildcard subdomains for multi-tenancy) in Vercel.
4.  Ensure your DNS settings (e.g., a wildcard CNAME record) point to Vercel.

**Key Implementation Details:**

*   **Tenant Middleware (`apps/app/middleware.ts`):** This middleware is crucial for multi-tenancy. It intercepts requests, extracts the subdomain, looks up the corresponding tenant database connection URL, and sets up a Drizzle ORM client for that tenant.
*   **Database Connection Lookup (`@repo/database/src/tenant-app/tenant-lookup.ts`):** The `getTenantConnectionUrl` function is responsible for retrieving the tenant's database connection URL. It implements a simple in-memory cache to improve performance.  *Important Note:* You'll need a robust cache invalidation strategy in a production environment.
*   **Post-Login Redirection (`apps/app/app/(authenticated)/layout.tsx`):**  After a user logs in on the main domain, this layout fetches the user's default organization and redirects them to the appropriate subdomain.
*   **Accessing Tenant Database Client:** Use the `getTenantDbClient` utility function (located in `apps/app/utils/tenant-db.ts`) within route handlers to access the tenant-specific Drizzle client set up by the middleware.

**Next Steps and Further Development:**

*   **Complete Organization Management:** Implement UI and backend logic for:
    *   Creating and managing organizations.
    *   Inviting users to organizations.
    *   Setting user roles within organizations.
    *   Allowing users to switch between organizations.
    *   Implementing a proper "default organization" selection mechanism.
*   **Tenant Database Migrations:**  Develop a strategy for managing database migrations across multiple tenant databases. You'll need a way to apply schema changes to all tenant databases consistently.
*   **Robust Caching:** Implement a more robust caching mechanism for tenant connection URLs (e.g., using Redis or a similar solution) with appropriate cache invalidation.
*   **Error Handling:** Enhance error handling throughout the application, especially in the tenant middleware and database interactions.
*   **Testing:** Expand the test suite to cover more scenarios, including end-to-end tests for the login and redirection flow.
*   **AI Agent Implementation:** This README focuses on the infrastructure.  You'll need to implement the core AI agent functionality, including interactions with the chosen AI models.
*  **Security:** Add more tests to verify the role based access, to check different user roles in the app and check they only access what they are allowed to, also make test to verify the middleware.

This README provides a comprehensive overview of the Lavel AI platform, its architecture, core features, and setup instructions. Remember to adapt the instructions and feature descriptions to your specific implementation as you develop the application further.  Good luck!

================
File: tsconfig.json
================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": false,
    "isolatedModules": true,
    "lib": ["es2022", "DOM", "DOM.Iterable"],
    "module": "NodeNext",
    "moduleDetection": "force",
    "moduleResolution": "NodeNext",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ES2022",
    "strictNullChecks": true
  }
}

================
File: tsup.config.ts
================
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['scripts/index.ts'],
  outDir: 'dist',
  sourcemap: false,
  minify: true,
  dts: true,
  format: ['cjs', 'esm'],
});

================
File: turbo.json
================
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": ["**/.env.*local"],
  "ui": "tui",
  "envMode": "loose",
  "tasks": {
    "build": {
      "dependsOn": ["^build", "test"],
      "outputs": [".next/**", "!.next/cache/**", ".basehub/**"]
    },
    "test": {
      "dependsOn": ["^test"]
    },
    "analyze": {
      "dependsOn": ["^analyze"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "clean": {
      "cache": false
    },
    "//#clean": {
      "cache": false
    }
  }
}



================================================================
End of Codebase
================================================================
